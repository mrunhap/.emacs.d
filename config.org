#+STARTUP: fold
#+PROPERTY: header-args :tangle init.el :mkdirp yes

* Core
** Early init
#+begin_src elisp :tangle early-init.el
(setq frame-inhibit-implied-resize t
      package-enable-at-startup nil
      message-log-max 16384
      gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6
      default-frame-alist '((scroll-bar-mode . 0)
                            (vertical-scroll-bars . nil)
                            ;; (undecorated . t)
                            (menu-bar-lines . 0)
                            (tool-bar-lines . 0))
      ;; disable native compilation
      native-comp-jit-compilation nil)
#+end_src
** Enable lexical binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

Emacs 默认使用 dynamic binding，主要影响的是变量的作用域。

在默认的 dynamic binding 下变量的作用域是基于函数调用栈的，变量被修改
后会影响到整个函数调用链上。

在开启 lexcial binding 后变量的作用域是基于代码块的结构的，更符合通常
的编程语言中的作用域规则，变量的作用域被限制在定义它的代码块内，不会泄
露到外部代码块。

例如对于如下代码，在未开始 lexcial binding 时输出为：
#+RESULTS:
: Outer: x is 10
: Inner: x is 20
: Outer: x is 20
当调用 =inner-function= 中内部引用 =x= 时，会查找外部调用堆栈中的 =x= ，既
=outer-function= 中的 =x= ，值为 =10= 。

而当开启 lexcial binding 时输出的结果为：
: Outer: x is 10
: Inner: x is 20
: Outer: x is 10
当调用 =inner-function= 中内部引用 =x= 时，它只会看到自己的局部变量 =x= ，值
为 =20= ，而不会改变外部函数 =outer-function= 中的 =x= 的值，仍为 =10= 。

#+begin_src emacs-lisp :tangle no
;;; -*- lexical-binding: t -*-

(defun outer-function ()
  (let ((x 10))
    (message "Outer: x is %d" x)
    (inner-function)
    (message "Outer: x is %d" x)))

(defun inner-function ()
  (let ((x 20))
    (message "Inner: x is %d" x)))

(outer-function)
#+end_src

** Load custom file
#+begin_src elisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (and (file-exists-p custom-file) (file-readable-p custom-file))
  (load custom-file :no-error :no-message))
#+end_src

** Def
#+begin_src emacs-lisp
(defconst eat/macp (eq system-type 'darwin))
(defconst eat/linuxp (eq system-type 'gnu/linux))
(defconst eat/winp (eq system-type 'windows-nt))

(defvar eat/user-full-name "Liu Bo")
(defvar eat/user-mail-address "liubolovelife@gmail.com")

(defvar eat/module-list `(+icon +blog +telega +note-taking))
(defvar eat/module--hash-table
  ((lambda ()
     (setq hash--table (make-hash-table))
     (dolist (m eat/module-list)
       (puthash m t hash--table))
     hash--table)))
(defun eat/modulep (module)
  (gethash module eat/module--hash-table))
#+end_src
** Some useful functions
*** Delete things(don’t send to kill ring
#+begin_src emacs-lisp
(defun eat/delete-to-the-begining ()
  (interactive)
  (delete-region (point-min) (point)))

(defun eat/delete-to-the-end ()
  (interactive)
  (delete-region (point) (point-max)))

(defun eat/delete-whole-buffer ()
  (interactive)
  (delete-region (point-min) (point-max)))

(defun eat/delete-this-file ()
  "Delete the current file, and kill the buffer."
  (interactive)
  (unless (buffer-file-name)
    (error "No file is currently being edited"))
  (when (yes-or-no-p (format "Really delete '%s'?"
                             (file-name-nondirectory buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-this-buffer)))
#+end_src
*** Convert timestamp
#+begin_src emacs-lisp
(defun eat/timestamp (begin end)
  "Convert the selected region (a timestamp in seconds) to a formatted time string."
  (interactive "r")
  (let* ((timestamp-str (buffer-substring-no-properties begin end))
         (timestamp (string-to-number timestamp-str))
         (formatted-time (format-time-string "%Y-%m-%d %H:%M:%S" (seconds-to-time timestamp))))
    (message "%s" formatted-time)))
#+end_src
*** Adjust opacity
#+begin_src emacs-lisp
(defun eat/adjust-opacity (frame incr)
  "Adjust the background opacity of FRAME by increment INCR."
  (unless (display-graphic-p frame)
    (error "Cannot adjust opacity of this frame"))
  (let* ((oldalpha (or (frame-parameter frame 'alpha-background) 100))
         (oldalpha (if (listp oldalpha) (car oldalpha) oldalpha))
         (newalpha (+ incr oldalpha)))
    (when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
      (modify-frame-parameters frame (list (cons 'alpha-background newalpha))))))
(global-set-key (kbd "M-C-8") (lambda () (interactive) (eat/adjust-opacity nil -2)))
(global-set-key (kbd "M-C-9") (lambda () (interactive) (eat/adjust-opacity nil 2)))
(global-set-key (kbd "M-C-7") (lambda () (interactive) (modify-frame-parameters nil `((alpha-background . 100)))))
#+end_src
*** Window
#+begin_src emacs-lisp
;; When splitting window, show (other-buffer) in the new window

(defun split-window-func-with-other-buffer (split-function)
  (lambda (&optional arg)
    "Split this window and switch to the new window unless ARG is provided."
    (interactive "P")
    (funcall split-function)
    (let ((target-window (next-window)))
      (set-window-buffer target-window (other-buffer))
      (unless arg
        (select-window target-window)))))

(keymap-global-set "C-x 2" (split-window-func-with-other-buffer 'split-window-vertically))
(keymap-global-set "C-x 3" (split-window-func-with-other-buffer 'split-window-horizontally))

(defun sanityinc/toggle-delete-other-windows ()
  "Delete other windows in frame if any, or restore previous window config."
  (interactive)
  (if (and winner-mode
           (equal (selected-window) (next-window)))
      (winner-undo)
    (delete-other-windows)))

(keymap-global-set "C-x 1" 'sanityinc/toggle-delete-other-windows)

(defun split-window-horizontally-instead ()
  "Kill any other windows and re-split such that the current window is on the top half of the frame."
  (interactive)
  (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
    (delete-other-windows)
    (split-window-horizontally)
    (when other-buffer
      (set-window-buffer (next-window) other-buffer))))

(defun split-window-vertically-instead ()
  "Kill any other windows and re-split such that the current window is on the left half of the frame."
  (interactive)
  (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
    (delete-other-windows)
    (split-window-vertically)
    (when other-buffer
      (set-window-buffer (next-window) other-buffer))))

(keymap-global-set "C-x |" 'split-window-horizontally-instead)
(keymap-global-set "C-x _" 'split-window-vertically-instead)
#+end_src
*** Load PATH
#+begin_src elisp
;;; Setup PATH
;; https://emacs-china.org/t/emacs-mac-port-profile/2895/29?u=rua
;; NOTE: When PATH is changed, run the following command
;; $ sh -c 'printf "%s" "$PATH"' > ~/.path
;; then add this to custom.el
;; (add-hook 'after-init-hook #'eat/getenv-path)
(defun eat/getenv-path()
  (interactive)
  (condition-case err
      (let ((path (with-temp-buffer
                    (insert-file-contents-literally "~/.path")
                    (buffer-string))))
        (setenv "PATH" path)
        (setq exec-path (append (parse-colon-path path) (list exec-directory))))
    (error (warn "%s" (error-message-string err)))))

(if (file-exists-p "~/.path")
    (add-hook 'after-init-hook #'eat/getenv-path)
  (message "%s" "Didn't find path file, run '$ sh -c 'printf \"%s\" \"$PATH\"' > ~/.path' in your terminal and then M-x eat/getenv-path or restart emacs."))
#+end_src

*** Misc
#+begin_src emacs-lisp
(defun get-string-from-file (filePath)
  "Return file content as string."
  (with-temp-buffer
    (insert-file-contents filePath)
    (buffer-string)))

(defun eat/quit ()
  "Delete current window switch to prevous buffer."
  (interactive)
  (if (> (seq-length (window-list (selected-frame))) 1)
      (delete-window)
    (previous-buffer)))

;; http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))
(global-set-key [remap move-beginning-of-line] #'smarter-move-beginning-of-line)
#+end_src
** Speed up startup time
*** Custom hook
#+begin_src emacs-lisp
;; Hooks split from doom-emacs
(defvar on-first-input-hook nil
  "Transient hooks run before the first user input.")
(put 'on-first-input-hook 'permanent-local t)

(defvar on-first-file-hook nil
  "Transient hooks run before the first interactively opened file.")
(put 'on-first-file-hook 'permanent-local t)

(defvar on-first-buffer-hook nil
  "Transient hooks run before the first interactively opened buffer.")
(put 'on-first-buffer-hook 'permanent-local t)

(defvar on-init-ui-hook nil
  "List of hooks to run when the UI has been initialized.")

(defun on-run-hook-on (hook-var trigger-hooks)
  "Configure HOOK-VAR to be invoked exactly once when any of the TRIGGER-HOOKS
are invoked *after* Emacs has initialized (to reduce false positives). Once
HOOK-VAR is triggered, it is reset to nil.

HOOK-VAR is a quoted hook.
TRIGGER-HOOK is a list of quoted hooks and/or sharp-quoted functions."
  (dolist (hook trigger-hooks)
    (let ((fn (intern (format "%s-init-on-%s-h" hook-var hook))))
      (fset
       fn (lambda (&rest _)
            ;; Only trigger this after Emacs has initialized.
            (when (and after-init-time
                       (or (daemonp)
                           ;; In some cases, hooks may be lexically unset to
                           ;; inhibit them during expensive batch operations on
                           ;; buffers (such as when processing buffers
                           ;; internally). In these cases we should assume this
                           ;; hook wasn't invoked interactively.
                           (and (boundp hook)
                                (symbol-value hook))))
              (run-hooks hook-var)
              (set hook-var nil))))
      (cond ((daemonp)
             ;; In a daemon session we don't need all these lazy loading
             ;; shenanigans. Just load everything immediately.
             (add-hook 'after-init-hook fn 'append))
            ((eq hook 'find-file-hook)
             ;; Advise `after-find-file' instead of using `find-file-hook'
             ;; because the latter is triggered too late (after the file has
             ;; opened and modes are all set up).
             (advice-add 'after-find-file :before fn '((depth . -101))))
            ((add-hook hook fn -101)))
      fn)))

(defun on-init-ui-h (&optional _)
  "Initialize user interface by applying its hooks.

These should be done as late as possible, as to avoid/minimize prematurely
triggering hooks during startup."
  (run-hooks 'on-init-ui-hook)

  ;; Add trigger hooks to `on-first-buffer-hook'.
  (on-run-hook-on 'on-first-buffer-hook '(window-buffer-change-functions server-visit-hook))

  ;; Only execute this function once.
  (remove-hook 'window-buffer-change-functions #'on-init-ui-h))

;; Initialize UI as late as possible. `window-buffer-change-functions' runs
;; once, when the scratch/dashboard buffer is first displayed.
(add-hook 'window-buffer-change-functions #'on-init-ui-h -100)

(unless noninteractive
  (on-run-hook-on 'on-first-buffer-hook '(find-file-hook on-switch-buffer-hook))
  (on-run-hook-on 'on-first-file-hook   '(find-file-hook dired-initial-position-hook))
  (on-run-hook-on 'on-first-input-hook  '(pre-command-hook)))
#+end_src
*** Show startup time
#+begin_src emacs-lisp
(defun eat/show-startup-time ()
  "Print startup time."
  (message
   "Emacs loaded in %s with %d garbage collections."
   (format
    "%.2f seconds"
    (float-time
     (time-subtract after-init-time before-init-time)))
   gcs-done))
(add-hook 'emacs-startup-hook #'eat/show-startup-time)
#+end_src
*** Misc
#+begin_src emacs-lisp
;; Don't pass case-insensitive to `auto-mode-alist'
(setq auto-mode-case-fold nil)

;; file-remote-p relies on an entry in file-name-handler-alist
;; (autoloaded by tramp.el) to detect remote paths, which causes tramp
;; to be loaded.
;; sets file-name-handler-alist to nil at startup for a noteable boost
;; in startup performance and restore after startup or tramp won't
;; loaded and project won't remember remote projects.
(unless (or (daemonp) noninteractive init-file-debug)
  ;; Suppress file handlers operations at startup
  ;; `file-name-handler-alist' is consulted on each call to `require' and `load'
  (let ((old-value file-name-handler-alist))
    (setq file-name-handler-alist nil)
    (set-default-toplevel-value 'file-name-handler-alist file-name-handler-alist)
    (add-hook 'emacs-startup-hook
              (lambda ()
                "Recover file name handlers."
                (setq file-name-handler-alist
                      (delete-dups (append file-name-handler-alist old-value))))
              101)))

;; Don't ping things that look like domain names.
(setq ffap-machine-p-known 'reject)
#+end_src
** Better default
*** Config
#+begin_src emacs-lisp
(keymap-global-set "C-h K" #'describe-keymap)
;; this will stuck emacs
(keymap-global-unset "C-h h")

(when (display-graphic-p)
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z")))

;; Contrary to what many Emacs users have in their configs, you don't need
;; more than this to make UTF-8 the default coding system:
(set-language-environment "UTF-8")

;; Do not show cursor in nonselected windows
(setq-default cursor-in-non-selected-windows nil)

;; Suppress GUI features and more
(setq inhibit-splash-screen t ;; 这个和 `inhibit-startup-screen' 有什么区别吗
      inhibit-x-resources t
      inhibit-default-init t
      inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-buffer-menu t)

(setq redisplay-skip-fontification-on-input t)

;; Pixelwise resize
(setq ;; window-resize-pixelwise nil ;; NOTE this cause lsp-bridge-ref buffer didn't show
 frame-resize-pixelwise t)

;; Shut up!
(defun display-startup-echo-area-message()
  (message nil))

;; indent with whitespace by default
(setq-default
 tab-width 4
 indent-tabs-mode nil)

;; Disable default auto backup and save file
(setq-default
 create-lockfiles nil                               ; Don't create lockfiles
 make-backup-files nil                              ; Disable auto save and backup
 auto-save-default nil
 auto-save-list-file-prefix nil)

(setq
 initial-scratch-message (concat ";; Happy hacking, " user-login-name " - Emacs ♥ you!\n\n")
 initial-major-mode 'fundamental-mode               ; Don't use prog-mode an stratup
 ring-bell-function 'ignore
 read-process-output-max (* 4 1024 1024)
 suggest-key-bindings nil                           ; Disable "You can run the command balabala..."
 word-wrap-by-category t                            ; Emacs 之光！
 use-short-answers t                                ; yse-or-no -> y-or-n
 suggest-key-bindings nil
 enable-recursive-minibuffers t
 )

(setq-default
 inhibit-compacting-font-caches t                   ; Don’t compact font caches during GC.
 require-final-newline t                            ; add final newline
 visible-cursor t
 bidi-inhibit-bpa t                                 ; Improve long line display performance
 bidi-paragraph-direction 'left-to-right
 echo-keystrokes 0.01                               ; don't wait for keystrokes display
 warning-suppress-log-types '((comp))               ; Don't display compile warnings
 truncate-partial-width-windows 65                  ; Don't truncate lines in a window narrower than 65 chars.
 vc-follow-symlinks t                               ; always follow link
 server-client-instructions nil                     ; no client startup messages
 )

(when (executable-find "ugrep")
  ;; https://github.com/Genivia/ugrep#using-ugrep-within-emacs
  (setq-default grep-template "ugrep -0Iinr -e <R>"))

;; coding-system
(prefer-coding-system 'utf-8)
(setq-default buffer-file-coding-system 'utf-8)

(add-hook 'on-first-file-hook #'global-goto-address-mode)
(add-hook 'on-first-file-hook #'global-auto-revert-mode)
(add-hook 'on-first-file-hook #'save-place-mode)
(add-hook 'on-first-file-hook #'global-so-long-mode)

(setq
 completion-styles '(basic partial-completion)
 completion-category-overrides '((file (styles basic partial-completion)))
 completion-cycle-threshold t
 minibuffer-depth-indicate-mode t
 minibuffer-eldef-shorten-default t
 minibuffer-electric-default-mode t)
;; Quit that fucking minibuffer!
(keymap-set minibuffer-local-map "C-g" #'keyboard-quit)
#+end_src
*** Large file
*** MacOS
#+begin_src elisp
(when eat/macp
  (add-hook 'after-init-hook #'eat/getenv-path)

  (setq mac-option-modifier 'meta
        mac-command-modifier 'super)
  (global-set-key [(super a)] #'mark-whole-buffer)
  (global-set-key [(super v)] #'yank)
  (global-set-key [(super c)] #'kill-ring-save)
  (global-set-key [(super s)] #'save-buffer)
  (global-set-key [(super l)] #'goto-line)
  (global-set-key [(super w)] #'delete-frame)
  (global-set-key [(super z)] #'undo)
  ;; `save-buffers-kill-emacs' will shutdown emacs daemon
  (global-set-key [(super q)] #'save-buffers-kill-terminal)

  (setq ns-use-native-fullscreen nil
        ;; Render thinner fonts
        ns-use-thin-smoothing t
        ;; Don't open a file in a new frame
        ns-pop-up-frames nil)
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (set-frame-parameter nil 'fullscreen 'maximized))
#+end_src

*** Linux
#+begin_src elisp
(when eat/linuxp
  (setq x-underline-at-descent-line t)
  (setq-default
   ;; Don't use Fcitx5 in Emacs in PGTK build
   pgtk-use-im-context-on-new-connection nil
   x-gtk-resize-child-frames nil)

  ;; Don't use GTK+ tooltip
  (when (boundp 'x-gtk-use-system-tooltips)
    (setq x-gtk-use-system-tooltips nil)))
#+end_src
** Built-in packages
*** package
#+begin_src emacs-lisp
(setq package-archives '(("gnu"          . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
			             ("nongnu"       . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
                         ("melpa"        . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/"))
      package-quickstart t)
(package-activate-all)

(defmacro eat/pkg (package &optional vc)
  `(unless (package-installed-p ',package)
     (unless (memq ',package package-archive-contents)
       (package-refresh-contents))
     (if ,vc (package-vc-install ,vc)
       (package-install ',package))))
#+end_src
*** auto save
#+begin_src emacs-lisp
;; most of time I will do save manually
(setq auto-save-visited-interval 10)
(add-hook 'on-first-file-hook #'auto-save-visited-mode)
#+end_src
*** dired
#+begin_src emacs-lisp
(setq dired-mouse-drag-files t
      mouse-drag-and-drop-region t
      mouse-drag-and-drop-region-cross-program t)
#+end_src
*** blink cursor
#+begin_src emacs-lisp
(add-hook 'after-init-hook (lambda () (blink-cursor-mode -1)))
#+end_src
*** line number
#+begin_src emacs-lisp
(setq display-line-numbers-width 3)
#+end_src
*** whitespace
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'whitespace-mode)
(add-hook 'conf-mode-hook #'whitespace-mode)
(setq whitespace-style '(face trailing))
#+end_src
*** savehist
#+begin_src emacs-lisp
;;; savehist
(add-hook 'after-init-hook #'savehist-mode)
;; Restore histories and registers after saving
(setq history-length 1000)
#+end_src
*** recentf
#+begin_src emacs-lisp
(add-hook 'on-first-input-hook #'recentf-mode)
(setq recentf-max-saved-items 1000
      recentf-exclude `(,tramp-file-name-regexp
                        "COMMIT_EDITMSG"))
(keymap-global-set "C-x C-r" #'recentf-open-files)
#+end_src

*** webjump
#+begin_src emacs-lisp
(keymap-global-set "C-x C-/" #'webjump)
(setq webjump-sites
      '(("Emacs Wiki" . [simple-query "www.emacswiki.org" "www.emacswiki.org/cgi-bin/wiki/" #1=""])
        ("Emacs China" . "emacs-china.org")
        ("Emacs Reddit" . "www.reddit.com/r/emacs/")
        ("Emacs News" . "sachachua.com/blog/category/emacs-news/")
        ("Github" . [simple-query "github.com" "github.com/search?q=" #1#])
        ("Google" . [simple-query "google.com" "google.com/search?q=" #1#])
        ("Youtube" . [simple-query "youtube.com" "youtube.com/results?search_query=" #1#])
        ("Google Groups" . [simple-query "groups.google.com" "groups.google.com/groups?q=" #1#])
        ("stackoverflow" . [simple-query "stackoverflow.com" "stackoverflow.com/search?q=" #1#])
        ("Wikipedia" . [simple-query "wikipedia.org" "wikipedia.org/wiki/" #1#])))
#+end_src

*** winner
#+begin_src emacs-lisp
(add-hook 'on-first-buffer-hook #'winner-mode)
(setq winner-dont-bind-my-keys t)
#+end_src
*** repeat
#+begin_src emacs-lisp
(setq repeat-mode t
      repeat-keep-prefix t
      repeat-exit-timeout 3
      repeat-exit-key (kbd "RET"))
#+end_src

*** context-menu

#+begin_src emacs-lisp
(add-hook 'on-init-ui-hook #'context-menu-mode)
#+end_src

*** eww
#+begin_src emacs-lisp
;; Install: npm install -g readability-cli
(when (executable-find "readable")
  (setq eww-retrieve-command '("readable")))
#+end_src

*** vc
#+begin_src emacs-lisp
(setq-default vc-handled-backends '(Git))
#+end_src

*** project
#+begin_src elisp
(with-eval-after-load 'project
  ;; go to the end of buffer after `project-compile'
  (add-hook 'compilation-start-hook #'end-of-buffer)
  ;; use fd in `project-find-file'
  (defun eat/project-files-in-directory (dir)
    "Use `fd' to list files in DIR."
    (let* ((default-directory dir)
           (localdir (file-local-name (expand-file-name dir)))
           (command (format "fd -c never -H -t f -0 . %s" localdir)))
      (project--remote-file-names
       (sort (split-string (shell-command-to-string command) "\0" t)
             #'string<))))
  (when (executable-find "fd")
    (cl-defmethod project-files ((project (head local)) &optional dirs)
      "Override `project-files' to use `fd' in local projects."
      (mapcan #'eat/project-files-in-directory
              (or dirs (list (project-root project))))))
  (setq project-vc-ignores '("target/" "bin/" "obj/")
        project-vc-extra-root-markers '(".project"
                                        "go.mod"
                                        "Cargo.toml"
                                        "project.clj"
                                        "pom.xml"
                                        "package.json"
                                        "Makefile"
                                        "README.org"
                                        "README.md")))
#+end_src

*** xref
Must set before consult.
Use control-left-click to jump to defintions.
Need ugrep installed(check external program).

Set cursor pos to mouse pos if they are not in same pos.
#+begin_src elisp
(add-hook 'xref-after-return-hook #'recenter)
(add-hook 'xref-after-jump-hook #'recenter)

(keymap-global-unset "C-<down-mouse-1>")
(keymap-global-set "C-<mouse-1>" #'xref-find-definitions-at-mouse)

(setq xref-prompt-for-identifier nil
      ;; Commands such as `project-find-regexp' that rely on Xref can now leverage the power of ugrep.
      xref-search-program 'ugrep
      xref-show-xrefs-function #'xref-show-definitions-completing-read
      xref-show-definitions-function #'xref-show-definitions-completing-read
      ;; fix massed xref cross multiple project
      xref-history-storage 'xref-window-local-history)
#+end_src

*** tramp
#+begin_src elisp
(setq
 remote-file-name-inhibit-locks t
 tramp-verbose 1 ;; only show error message
 tramp-completion-reread-directory-timeout nil ;;  speed up complete
 tramp-auto-save-directory temporary-file-directory
 ;; Always use file cache when using tramp
 remote-file-name-inhibit-cache nil
 ;; C-x C-f /ssh:
 tramp-default-method "ssh"
 ;; NOTE this will make project didn't regconize and save remote
 ;; project, and eglot also didn't work under project, only works for
 ;; single buffer
 ;; vc-ignore-dir-regexp (format "\\(%s\\)\\|\\(%s\\)"
 ;;                              vc-ignore-dir-regexp
 ;;                              tramp-file-name-regexp)
 )

(defun eat/reopen-file-with-sudo ()
  (interactive)
  (find-alternate-file (format "/sudo::%s" (buffer-file-name))))
(keymap-global-set "C-x C-z" #'eat/reopen-file-with-sudo)

(with-eval-after-load 'tramp
  ;; ‘Private Directories’ are the settings of the $PATH environment,
  ;; as given in your ‘~/.profile’.  This entry is represented in
  ;; the list by the special value ‘tramp-own-remote-path’.
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

*** browse-url
#+begin_src emacs-lisp
(setq browse-url-generic-program
      (or (executable-find "firefox")
          (when eat/macp "open")
          (when eat/linuxp "xdg-open")))
#+end_src

*** isearch
#+begin_src emacs-lisp
(setq
 ;; Match count next to the minibuffer prompt
 isearch-lazy-count t
 ;; Don't be stingy with history; default is to keep just 16 entries
 search-ring-max 200
 regexp-search-ring-max 200
 ;; htighlighted all matching
 isearch-lazy-highlight t
 lazy-highlight-buffer t
 ;; show search count, TODO not work in isearch-mb-mode
 lazy-count-prefix-format nil
 lazy-count-suffix-format " [%s/%s]"
 ;; Record isearch in minibuffer history, so C-x ESC ESC can repeat it.
 isearch-resume-in-command-history t
 ;; M-< and M-> move to the first/last occurrence of the current search string.
 isearch-allow-motion t
 isearch-motion-changes-direction t
 ;; space matches any sequence of characters in a line.
 isearch-regexp-lax-whitespace t
 search-whitespace-regexp ".*?")

(with-eval-after-load 'isearch
  (define-advice isearch-occur (:after (_regexp &optional _nlines))
    (isearch-exit)))

(keymap-global-set "C-s" #'isearch-forward-regexp)
(keymap-global-set "C-r" #'isearch-backward-regexp)
(keymap-set isearch-mode-map "C-c C-o" #'isearch-occur)
(keymap-substitute isearch-mode-map #'isearch-delete-chac #'isearch-del-chac)
;; TODO
(define-key isearch-mode-map [escape] #'isearch-cancel)

;; GC automatically while unfocusing the frame
(add-function :after after-focus-change-function
              (lambda ()
                (unless (frame-focus-state)
                  (garbage-collect))))
#+end_src
*** ediff
#+begin_src elisp
(defvar local-ediff-saved-window-conf nil)
(defun eat/ediff-save-window-conf ()
  (setq local-ediff-saved-window-conf (current-window-configuration)))

(defun eat/ediff-restore-window-conf ()
  (when (window-configuration-p local-ediff-saved-window-conf)
    (set-window-configuration local-ediff-saved-window-conf)))

(setq ediff-window-setup-function #'ediff-setup-windows-plain
      ediff-highlight-all-diffs t
      ediff-split-window-function 'split-window-horizontally
      ediff-merge-split-window-function 'split-window-horizontally)
(with-eval-after-load 'ediff
  ;; Restore window config after quitting ediff
  (add-hook 'ediff-before-setup-hook #'eat/ediff-save-window-conf)
  (add-hook 'ediff-quit-hook #'eat/ediff-restore-window-conf))
#+end_src
*** hl-line
#+begin_src emacs-lisp
(setq hl-line-sticky-flag nil)

;; (when (display-graphic-p)
;;   (add-hook 'prog-mode-hook #'hl-line-mode)
;;   (add-hook 'conf-mode-hook #'hl-line-mode))

(defun eat/hl-line-setup ()
  "Disable `hl-line-mode' if region is active."
  (when (and (bound-and-true-p hl-line-mode)
             (region-active-p))
    (hl-line-unhighlight)))

(with-eval-after-load 'hl-line
  (add-hook 'post-command-hook #'eat/hl-line-setup))
#+end_src

*** pulse
#+begin_src elisp
(custom-set-faces
 '(pulse-highlight-start-face ((t (:inherit region))))
 '(pulse-highlight-face ((t (:inherit region)))))

(defun eat/pulse-momentary-line (&rest _)
  "Pulse the current line."
  (pulse-momentary-highlight-one-line (point)))

(defun eat/pulse-momentary (&rest _)
  "Pulse the region or the current line."
  (if (fboundp 'xref-pulse-momentarily)
      (xref-pulse-momentarily)
    (eat/pulse-momentary-line)))

(defun eat/recenter-and-pulse(&rest _)
  "Recenter and pulse the region or the current line."
  (recenter)
  (eat/pulse-momentary))

(defun eat/recenter-and-pulse-line (&rest _)
  "Recenter and pulse the current line."
  (recenter)
  (eat/pulse-momentary-line))

(dolist (cmd '(recenter-top-bottom
               other-window windmove-do-window-select
               pager-page-down pager-page-up))
  (advice-add cmd :after #'eat/pulse-momentary-line))

(dolist (cmd '(pop-to-mark-command
               pop-global-mark
               compile-goto-error
               goto-last-change))
  (advice-add cmd :after #'eat/recenter-and-pulse))

(add-hook 'imenu-after-jump-hook #'eat/recenter-and-pulse)
(add-hook 'isearch-update-post-hook #'eat/recenter-and-pulse)

(add-hook 'bookmark-after-jump-hook #'eat/recenter-and-pulse-line)
(add-hook 'next-error #'eat/recenter-and-pulse-line)
#+end_src

*** outline
#+begin_src emacs-lisp
(setq outline-minor-mode-cycle t
      outline-minor-mode-highlight t)
#+end_src

*** simple
#+begin_src emacs-lisp
(add-hook 'before-save-hook #'delete-trailing-whitespace)
(setq visual-line-fringe-indicators '(nil nil)
      ;; List only applicable commands.
      read-extended-command-predicate #'command-completion-default-include-p
      fill-column 72)
#+end_src
*** subword
#+begin_src elisp
(add-hook 'prog-mode-hook #'subword-mode)
#+end_src
*** elec-pair
#+begin_src elisp
(add-hook 'prog-mode-hook #'electric-pair-local-mode)
(setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
#+end_src
*** paren
#+begin_src elisp
(setq show-paren-when-point-in-periphery t
      show-paren-context-when-offscreen 'overlay
      show-paren-when-point-inside-paren t
      show-paren-context-when-offscreen t)
#+end_src
*** smerge
#+begin_src elisp
(add-hook 'find-file-hook #'(lambda ()
                              (save-excursion
                                (goto-char (point-min))
                                (when (re-search-forward "^<<<<<<< " nil t)
                                  (smerge-mode 1)))))

(with-eval-after-load 'smerge-mode
  (bind smerge-mode-map
        "C-c r" #'smerge-refine
        "C-c c" #'smerge-keep-current
        "C-c a" #'smerge-keep-all
        "C-c n" #'smerge-next
        "C-c p" #'smerge-prev
        "C-c l" #'smerge-keep-lower
        "C-c u" #'smerge-keep-upper))
#+end_src
*** eldoc
#+begin_src elisp
(setq eldoc-idle-delay 1)
#+end_src
*** autofill
#+begin_src elisp
(add-hook 'prog-mode-hook
          #'(lambda ()
              (setq-local comment-auto-fill-only-comments t)
              (turn-on-auto-fill)))
#+end_src
*** TODO hideshow
- Seems have error message.
- And to context-menu-mode.
#+begin_src elisp
(add-hook 'prog-mode-hook #'hs-minor-mode)

;; FIXME
(defconst hideshow-folded-face '((t (:inherit 'font-lock-comment-face :box t))))

(defface hideshow-border-face
  '((((background light))
     :background "rosy brown" :extend t)
    (t
     :background "sandy brown" :extend t))
  "Face used for hideshow fringe."
  :group 'hideshow)

(define-fringe-bitmap 'hideshow-folded-fringe
  (vector #b00000000
          #b00000000
          #b00000000
          #b11000011
          #b11100111
          #b01111110
          #b00111100
          #b00011000))

(defun hideshow-folded-overlay-fn (ov)
  "Display a folded region indicator with the number of folded lines."
  (when (eq 'code (overlay-get ov 'hs))
    (let* ((nlines (count-lines (overlay-start ov) (overlay-end ov)))
           (info (format " (%d)..." nlines)))
      ;; fringe indicator
      (overlay-put ov 'before-string (propertize " "
                                                 'display '(left-fringe hideshow-folded-fringe
                                                                        hideshow-border-face)))
      ;; folding indicator
      (overlay-put ov 'display (propertize info 'face hideshow-folded-face)))))

(setq hs-set-up-overlay #'hideshow-folded-overlay-fn)
#+end_src
*** flymake

#+begin_src elisp
(add-hook 'prog-mode-hook #'flymake-mode)
(add-hook 'emacs-lisp-mode-hook #'(lambda ()
                                    (flymake-mode -1)))

(setq flymake-diagnostic-functions nil
      ;; flymake-show-diagnostics-at-end-of-line t
      ;; 过低的延时在使用 tramp 编辑文件时会导致 eglot 报错不准确
      flymake-no-changes-timeout 0.5)

(defvar sekiro-flymake-mode-line-format `(:eval (sekiro-flymake-mode-line-format)))
(put 'sekiro-flymake-mode-line-format 'risky-local-variable t)
(defun sekiro-flymake-mode-line-format ()
  (let* ((counter (string-to-number
                   (nth 1
                        (cadr
                         (flymake--mode-line-counter :error t)))))
         (sekiro-flymake (when (> counter 0)
                           'compilation-error)))
    (propertize
     "危"
     'face
     sekiro-flymake)))

(with-eval-after-load 'flymake
  (add-to-list 'mode-line-misc-info
               `(flymake-mode (" [" sekiro-flymake-mode-line-format "] "))))
#+end_src
** Next version
#+begin_src emacs-lisp
(when (>= emacs-major-version 30)
  (add-to-list 'help-fns-describe-function-functions #'shortdoc-help-fns-examples-function))
#+end_src
* lib
#+begin_src emacs-lisp
(eat/pkg bind)
(eat/pkg elpa-mirror)
(setq elpamr-default-output-directory "~/Sync/myelpa")

(eat/pkg fullframe)
(eat/pkg hide-mode-line)
(eat/pkg pinyinlib)
(autoload #'pinyinlib-build-regexp-string "pinyinlib")

(eat/pkg gcmh)
(add-hook 'after-init-hook #'gcmh-mode)
(setq gcmh-idle-delay 5
      gcmh-high-cons-threshold #x6400000)
#+end_src
* TODO Frame

Some config need these hooks to work in emacsclient, like code or theme.

#+begin_src elisp
(defvar eat/after-make-console-frame-hooks '()
  "Hooks to run after creating a new TTY frame")
(defvar eat/after-make-window-system-frame-hooks '()
  "Hooks to run after creating a new window-system frame")

(defun eat/run-after-make-frame-hooks (frame)
  "Run configured hooks in response to the newly-created FRAME.
Selectively runs either `eat/after-make-console-frame-hooks' or
`eat/after-make-window-system-frame-hooks'"
  (with-selected-frame frame
    (run-hooks (if window-system
                   'eat/after-make-window-system-frame-hooks
                 'eat/after-make-console-frame-hooks))))

;; FIXME font and theme not work
;; (add-hook 'server-after-make-frame-hook 'eat/run-after-make-frame-hooks)

(defconst eat/initial-frame (selected-frame)
  "The frame (if any) active during Emacs initialization.")

(add-hook 'after-init-hook
          (lambda () (when eat/initial-frame
                       (eat/run-after-make-frame-hooks eat/initial-frame))))
#+end_src

* Window
** TODO tab-bar
#+begin_src elisp
(defun eat/tab-bar-tab-name-format-function (tab i)
  (let ((current-p (eq (car tab) 'current-tab)))
    (concat
     (propertize (concat
                  " "
                  (alist-get 'name tab)
                  " ")
                 'face
                 (funcall tab-bar-tab-face-function tab))
     " ")))

(defun eat/tab-bar-switch-project ()
  "Switch to project in a new tab, project name will be used as tab name.

No tab will created if the command is cancelled."
  (interactive)
  (let (succ)
    (unwind-protect
        (progn
          (tab-bar-new-tab)
          (call-interactively #'project-switch-project)
          (when-let ((proj (project-root (project-current))))
            (tab-bar-rename-tab
             (format "%s" (file-name-nondirectory (directory-file-name proj))))
            (setq succ t)))
      (unless succ
        (tab-bar-close-tab)))))

(with-eval-after-load 'tab-bar
  ;; (setq
  ;;  tab-bar-tab-hints t
  ;;  tab-bar-close-button-show nil
  ;;  tab-bar-format '(tab-bar-tabs tab-bar-separator)
  ;;  tab-bar-border nil
  ;;  tab-bar-tab-name-format-function 'eat/tab-bar-tab-name-format-function)

  ;; NOTE do not bind `tab-bar-switch-to-prev-tab' and
  ;; `tab-bar-switch-to-next-tab' to M-[ or M-], it will make emacs
  ;; have some bug to auto insert characters after you type everytime
  (keymap-set tab-prefix-map "." #'tab-bar-switch-to-recent-tab)
  (keymap-set tab-prefix-map "," #'tab-bar-rename-tab)
  (keymap-set tab-prefix-map "l" #'eat/tab-bar-switch-project))
#+end_src

** ace-window
#+begin_src elisp
(eat/pkg ace-window)

(keymap-global-set "M-o" 'ace-window)

(setq aw-keys '(?a ?o ?e ?u ?i)
      aw-scope 'frame
      aw-dispatch-alist
      '((?d aw-delete-window "Ace - Delete Window")
        (?s aw-swap-window "Ace - Swap Window")
        (?p aw-flip-window)
        (?v aw-split-window-vert "Ace - Split Vert Window")
        (?h aw-split-window-horz "Ace - Split Horz Window")
        (?m delete-other-windows "Ace - Maximize Window")
        (?g delete-other-windows)
        (?b balance-windows)
        (?u (lambda ()
              (progn
                (winner-undo)
                (setq this-command 'winner-undo))))
        (?r winner-redo)))
(with-eval-after-load 'ace-window
  (dolist (cmd '(ace-window
                 aw--select-window))
    (advice-add cmd :after #'eat/pulse-momentary-line)))
#+end_src
** popper
#+begin_src elisp
(eat/pkg popper)

(add-hook 'on-first-buffer-hook #'popper-mode)

(setq popper-reference-buffers
      '("\\*Messages\\*"
        "Output\\*$"
        "\\*Async Shell Command\\*"
        "\\*Compile-Log\\*"
        "\\*Completions\\*"
        "\\*Warnings\\*"

        "^\\*eshell.*\\*$" eshell-mode  ;eshell as a popup
        "^\\*shell.*\\*$"  shell-mode   ;shell as a popup
        "^\\*term.*\\*$"   term-mode    ;term as a popup
        "^\\*vterm.*\\*$"  vterm-mode   ;vterm as a popup
        "^\\*eat.*\\*$"    eat-mode     ;eat as a popup

        ;; help & message
        help-mode
        ghelp-page-mode
        compilation-mode))

(with-eval-after-load 'project
  (setq popper-group-function 'popper-group-by-project))

(with-eval-after-load 'popper
  (keymap-global-set "C-M-`" #'popper-toggle-type)
  (defun my-popper-fit-window-height (win)
    "Determine the height of popup window WIN by fitting it to the buffer's content."
    (fit-window-to-buffer
     win
     (floor (frame-height) 3)
     (floor (frame-height) 3)))
  (setq popper-window-height #'my-popper-fit-window-height))
#+end_src
** window-numbering
#+begin_src emacs-lisp
(eat/pkg window-numbering)
(add-hook 'after-init-hook #'window-numbering-mode)
#+end_src
** switch-window

#+begin_src elisp
(eat/pkg switchy-window)

(add-hook 'on-first-file-hook #'switchy-window-minor-mode)

;; (keymap-set switchy-window-minor-mode-map "<remap> <other-window>" #'switchy-window)
#+end_src
* Buffer
** Ibuffer
#+begin_src elisp
(eat/pkg ibuffer-vc)
(fset 'list-buffers 'ibuffer)
(setq-default ibuffer-show-empty-filter-groups nil)
(keymap-global-set "C-x B" 'ibuffer)
;; Modify the default ibuffer-formats (toggle with `)
(setq ibuffer-formats
      '((mark modified read-only vc-status-mini " "
              (name 22 22 :left :elide)
              " "
              (size-h 9 -1 :right)
              " "
              (mode 12 12 :left :elide)
              " "
              vc-relative-file)
        (mark modified read-only vc-status-mini " "
              (name 22 22 :left :elide)
              " "
              (size-h 9 -1 :right)
              " "
              (mode 14 14 :left :elide)
              " "
              (vc-status 12 12 :left)
              " "
              vc-relative-file)))
(with-eval-after-load 'ibuffer
  (setq ibuffer-filter-group-name-face 'font-lock-doc-face)
  (with-eval-after-load 'fullframe
    (fullframe ibuffer ibuffer-quit))
  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (file-size-human-readable (buffer-size))))

;; Ibuffer-vc
(add-hook 'ibuffer-hook #'ibuffer-set-up-preferred-filters)

(defun ibuffer-set-up-preferred-filters ()
  (ibuffer-vc-set-filter-groups-by-vc-root)
  (unless (eq ibuffer-sorting-mode 'filename/process)
    (ibuffer-do-sort-by-filename/process)))
#+end_src
** Isearch
#+begin_src elisp
(eat/pkg isearch-mb)

(add-hook 'isearch-mode-hook #'isearch-mb-mode)

(with-eval-after-load 'isearch-mb
  (define-advice isearch-mb--update-prompt (:around (fn &rest _) show-case-fold-info)
    "Show case fold info in the prompt."
    (cl-letf* ((isearch--describe-regexp-mode-orig
                (symbol-function 'isearch--describe-regexp-mode))
               ((symbol-function 'isearch--describe-regexp-mode)
                (lambda (regexp-function &optional space-before)
                  (concat (if isearch-case-fold-search "[Case Fold] " "")
                          (funcall isearch--describe-regexp-mode-orig
                                   regexp-function space-before)))))
      (funcall fn _))))
#+end_src

* Vertico
#+begin_src elisp
;;; vertico
(eat/pkg vertico)

(add-hook 'after-init-hook #'vertico-mode)
(add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)

;; Use `consult-completion-in-region' if Vertico is enabled.
;; Otherwise use the default `completion--in-region' function.
(setq completion-in-region-function
      (lambda (&rest args)
        (apply (if vertico-mode
                   #'consult-completion-in-region
                 #'completion--in-region)
               args)))

(with-eval-after-load 'vertico
  (keymap-set vertico-map "DEL" #'vertico-directory-delete-char)
  (keymap-set vertico-map "M-DEL" #'vertico-directory-delete-word)
  (keymap-set vertico-map "RET" #'vertico-directory-enter))

(setq vertico-resize nil
      vertico-count 17)
#+end_src
** marginalia
#+begin_src emacs-lisp
(eat/pkg marginalia)
(add-hook 'after-init-hook #'marginalia-mode)
#+end_src
** orderless
#+begin_src emacs-lisp
(eat/pkg orderless)

(defun sanityinc/use-orderless-in-minibuffer ()
  (setq-local completion-styles '(substring orderless)))

(add-hook 'minibuffer-setup-hook #'sanityinc/use-orderless-in-minibuffer)

(with-eval-after-load 'orderless
  (defun completion--regex-pinyin (str)
    (orderless-regexp (pinyinlib-build-regexp-string str)))
  (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))
#+end_src

** consult
#+begin_src emacs-lisp
;;; consult
(eat/pkg consult)
(eat/pkg consult-todo "https://github.com/liuyinz/consult-todo")

(advice-add #'multi-occur :override #'consult-multi-occur)
;; (global-set-key (kbd "C-s") #'consult-line)
(global-set-key [remap apropos] #'consult-apropos)
(global-set-key [remap bookmark-jump] #'consult-bookmark)
(global-set-key [remap goto-line] #'consult-goto-line)
(global-set-key [remap imenu] #'consult-imenu)
(global-set-key [remap locate] #'consult-locate)
(global-set-key [remap man] #'consult-man)
(global-set-key [remap recentf-open-files] #'consult-recent-file)
(global-set-key [remap switch-to-buffer] #'consult-buffer)
(global-set-key [remap switch-to-buffer-other-window] #'consult-buffer-other-window)
(global-set-key [remap switch-to-buffer-other-frame] #'consult-buffer-other-frame)
(global-set-key [remap yank-pop] #'consult-yank-pop)
(global-set-key [remap project-find-regexp] #'consult-grep)

(setq consult-project-root-function  (lambda ()
                                       (when-let (project (project-current))
                                         (car (project-roots project))))
      consult-narrow-key             "<"
      consult-line-numbers-widen     t
      consult-async-min-input        2
      consult-async-refresh-delay    0.15
      consult-async-input-throttle   0.2
      consult-async-input-debounce   0.1
      xref-show-xrefs-function       #'consult-xref
      xref-show-definitions-function #'consult-xref)

(with-eval-after-load 'consult
  (consult-customize consult-ripgrep consult-git-grep consult-grep
                     consult-bookmark consult-recent-file consult-xref
                     :preview-key nil))
;;; consult-dir
(eat/pkg consult-dir)
(global-set-key [remap list-directory] #'consult-dir)
(with-eval-after-load 'vertico
  (keymap-set vertico-map "C-x C-d" #'consult-dir)
  (keymap-set vertico-map "C-x C-j" #'consult-dir-jump-file))

;;; consult-eglot
(eat/pkg consult-eglot)
#+end_src

** embark
#+begin_src emacs-lisp
(eat/pkg embark)
(eat/pkg embark-consult)

(bind (global-map
       "C-." #'embark-act)
      (minibuffer-local-map
       "C-c C-o" #'embark-export))

(with-eval-after-load 'embark
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  (with-eval-after-load 'consult
    (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode)))
#+end_src

* UI
** Windows/frames
#+begin_src emacs-lisp
(eat/pkg breadcrumb)

(setq-default frame-title-format
              '((:eval (breadcrumb-project-crumbs))
                " : "
                (:eval (breadcrumb-imenu-crumbs))))

(setq use-dialog-box nil
      ;; Monitors are trending toward wide, rather than tall.
      split-width-threshold 160
      split-height-threshold nil)
#+end_src
** Scrolling
#+begin_src emacs-lisp
(setq hscroll-step 1
      hscroll-margin 2
      ;; The nano style for truncated long lines.
      auto-hscroll-mode 'current-line
      scroll-margin 0
      scroll-conservatively 101
      scroll-preserve-screen-position t
      auto-window-vscroll nil
      ;; Use shift + mouse wheel to scrll horizontally.
      mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
      mouse-wheel-scroll-amount-horizontal 2)

(when (fboundp 'pixel-scroll-precision-mode)
  (add-hook 'after-init-hook (lambda () (pixel-scroll-precision-mode)))

  (setq pixel-scroll-precision-interpolate-page t)
  (defun +pixel-scroll-interpolate-down (&optional lines)
    (interactive)
    (if lines
        (pixel-scroll-precision-interpolate (* -1 lines (pixel-line-height)))
      (pixel-scroll-interpolate-down)))

  (defun +pixel-scroll-interpolate-up (&optional lines)
    (interactive)
    (if lines
        (pixel-scroll-precision-interpolate (* lines (pixel-line-height))))
    (pixel-scroll-interpolate-up))

  (defalias 'scroll-up-command '+pixel-scroll-interpolate-down)
  (defalias 'scroll-down-command '+pixel-scroll-interpolate-up))
#+end_src
** Font
#+begin_src elisp
(defun font-installed-p (font-list)
  (let ((font-installed nil))
    (catch 'foo
      (dolist (font font-list)
        (when (find-font (font-spec :name font))
          (setq font-installed font)
          (throw 'foo t))))
    font-installed))

(defvar eat/fonts-default        '("Monaco" "Cascadia Code" "Menlo" "Source Code Pro"))
(defvar eat/fonts-variable-pitch '("Bookerly" "Cardo" "Times New Roman" "DejaVu Sans"))
(defvar eat/fonts-cjk            '("LXGW WenKai" "WenQuanYi Micro Hei" "Microsoft Yahei"))
(defvar eat/fonts-unicode        '("Symbola"))
(defvar eat/fonts-emoji          '("Apple Color Emoji" "Segoe UI Symbol" "Noto Color Emoji"))
(defvar eat/font-size-default   13)
(defvar eat/font-default        (font-installed-p eat/fonts-default))
(defvar eat/font-variable-pitch (font-installed-p eat/fonts-variable-pitch))
(defvar eat/font-cjk            (font-installed-p eat/fonts-cjk))
(defvar eat/font-unicode        (font-installed-p eat/fonts-unicode))
(defvar eat/font-emoji          (font-installed-p eat/fonts-emoji))

(defvar eat/font-rescale-alist
  `((,eat/font-cjk     . 0.85)
    (,eat/font-emoji   . 0.85)
    (,eat/font-unicode . 0.85))
  "A list of font names that should be rescaled.")

(defun eat/rescale-font ()
  (interactive)
  (dolist (setting eat/font-rescale-alist)
    (when (car setting)
      (setf (alist-get (car setting)
                       face-font-rescale-alist nil nil #'equal)
		    (cdr setting)))))

(defun eat/fixed-pitch-setup ()
  (interactive)
  (setq buffer-face-mode-face '(:family "等距更纱黑体 SC"))
  (buffer-face-mode +1))

(defun eat/setup-mode-line-font ()
  (set-face-attribute 'mode-line nil :inherit 'variable-pitch)
  (set-face-attribute 'mode-line-inactive nil :inherit 'variable-pitch))

(defun eat/setup-font ()
  (interactive)
  (set-face-attribute 'default     nil :height (* 10 eat/font-size-default))
  (when eat/font-default
    (set-face-attribute 'default     nil :family eat/font-default)
    (set-face-attribute 'fixed-pitch nil :font eat/font-default))
  ;; variable-pitch
  (when eat/font-variable-pitch (set-face-font 'variable-pitch eat/font-variable-pitch))
  ;; unicode
  (when eat/font-unicode
    (set-fontset-font t 'unicode eat/font-unicode))
  ;;  emoji
  (when eat/font-emoji
    (set-fontset-font t 'emoji   eat/font-emoji))
  ;; Chinese font, NOTE must set after unicode
  (when eat/font-cjk
    (set-fontset-font t 'kana     eat/font-cjk)
    (set-fontset-font t 'han      eat/font-cjk)
    (set-fontset-font t 'cjk-misc eat/font-cjk))
  (eat/setup-mode-line-font))

(add-hook 'eat/after-make-window-system-frame-hooks #'eat/setup-font)
(add-hook 'eat/after-make-window-system-frame-hooks #'eat/rescale-font)
#+end_src
** Theme
#+begin_src elisp
(setq modus-themes-fringes nil)

(defvar eat/theme 'modus-operandi
  "Default theme.")

(defvar eat/theme-tui 'wombat
  "Default TUI theme.")

(defvar eat/theme-system-light 'modus-operandi
  "Default light theme after system appearance changed.")

(defvar eat/theme-system-dark 'wombat
  "Default dark theme after system appearance changed.")

(defvar load-theme-hook nil
  "Hooks that run after `load-theme'.")

(defun eat/load-theme (f theme &optional no-confirm no-enable &rest args)
  (interactive
   (list
    (intern (completing-read "Theme: "
                             (mapcar #'symbol-name
				                     (custom-available-themes))))))
  (dolist (theme custom-enabled-themes)
    (disable-theme theme))
  (if (featurep (intern (format "%s-theme" theme)))
      (enable-theme theme)
    (apply f theme t no-enable args))
  (run-hooks 'load-theme-hook))
(advice-add 'load-theme :around #'eat/load-theme)

(defun eat/tui-load-theme ()
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
  (when eat/theme-tui
    (load-theme eat/theme-tui)))

(defun eat/gui-load-theme ()
  (when eat/theme
    (load-theme eat/theme))
  ;; For MacOS, load theme after system appearance changed.
  (when (boundp 'ns-system-appearance)
    (add-to-list 'ns-system-appearance-change-functions
                 (lambda (l?d)
                   (if (eq l?d 'light)
                       (progn
                         (set-frame-parameter nil 'ns-appearance 'light)
                         (load-theme eat/theme-system-light))
                     (set-frame-parameter nil 'ns-appearance 'dark)
                     (load-theme eat/theme-system-dark))))))

(add-hook 'eat/after-make-console-frame-hooks       #'eat/tui-load-theme)
(add-hook 'eat/after-make-window-system-frame-hooks #'eat/gui-load-theme)
(add-hook 'load-theme-hook #'eat/setup-mode-line-font)

(eat/pkg gruber-darker-theme)

(eat/pkg nano-theme "https://github.com/404cn/nano-theme.el")
(add-to-list 'custom-theme-load-path (expand-file-name "elpa/nano-theme" user-emacs-directory))

(eat/pkg carbon-theme "https://github.com/DogLooksGood/carbon-theme")
(add-to-list 'custom-theme-load-path (expand-file-name "elpa/carbon-theme" user-emacs-directory))
#+end_src
** solaire mode

#+begin_src emacs-lisp
(eat/pkg solaire-mode)

(add-hook 'after-init-hook #'solaire-global-mode)
#+end_src

** Text Scale
#+begin_src elisp
(eat/pkg default-text-scale)
(keymap-global-set "C-x C-=" #'default-text-scale-increase)
(keymap-global-set "C-x C--" #'default-text-scale-decrease)
#+end_src
** hide minor modes on mode line
#+begin_src emacs-lisp
(eat/pkg minions)

(add-hook 'after-init-hook 'minions-mode)
#+end_src
** indent bars
#+begin_src emacs-lisp
(eat/pkg indent-bars "https://github.com/jdtsmith/indent-bars.git")

(add-hook 'python-base-mode-hook #'indent-bars-mode)
(add-hook 'yaml-mode-hook #'indent-bars-mode)
(add-hook 'yaml-ts-mode-hook #'indent-bars-mode)

(setq
 indent-bars-color '(highlight :face-bg t :blend 0.15)
 indent-bars-pattern "."
 indent-bars-width-frac 0.1
 indent-bars-pad-frac 0.1
 indent-bars-zigzag nil
 indent-bars-color-by-depth nil
 indent-bars-display-on-blank-lines nil)

(setq indent-bars-treesit-support (treesit-available-p)
      ;; indent-bars-prefer-character "│"
      indent-bars-highlight-current-depth '(:face default :blend 0.3)
      ;; https://github.com/jdtsmith/indent-bars#configuring-tree-sitter
      indent-bars-treesit-ignore-blank-lines-types '("module")
      indent-bars-treesit-wrap '((python argument_list parameters
				                         list list_comprehension
				                         dictionary dictionary_comprehension
				                         parenthesized_expression subscript)))
#+end_src
* Editing
** Meow
*** Setup
#+begin_src elisp
(defun meow-setup-dvorak ()
  (interactive)
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-dvorak)

  (meow-motion-overwrite-define-key
   '("<escape>" . mode-line-other-buffer)
   '("'" . repeat)
   '(")" . tab-bar-switch-to-prev-tab)
   '("}" . tab-bar-switch-to-next-tab)
   )

  ;; NOTE key defined in leader same as bind to C-c
  ;; so make sure it didn't conflict with keybindings
  ;; defined in other files or bulitin that start with C-c
  ;; or use this to make it start with C-c m
  (defalias 'meow-leader-command-prefix (make-sparse-keymap))
  (defvar meow-leader-map (symbol-function 'meow-leader-command-prefix)
    "Keymap for characters following C-c m.")
  (keymap-global-set "C-c m" 'meow-leader-command-prefix)
  (add-to-list 'meow-keymap-alist (cons 'leader 'meow-leader-command-prefix))

  (meow-leader-define-key
   '("a" . execute-extended-command)
   '("e" . "C-x C-e")
   '(";" . comment-dwim)
   '("-" . negative-argument)

   ;; file
   '("f" . find-file)
   '("F" . find-file-other-window)

   ;; buffer
   '("b" . switch-to-buffer)
   '("B" . switch-to-buffer-other-window)
   '("k" . kill-this-buffer)

   ;; window
   '("w" . ace-select-window)
   '("W" . ace-swap-window)
   '("o" . "C-x 1")
   '("O" . ace-delete-window)
   '("q" . delete-window)
   '("-" . "C-x 2")
   '("s" . "C-x 3")

   ;; xref
   '("." . "M-.")
   '("," . "M-,")
   '("?" . "M-?")

   ;; project, bind to keymap
   (cons "p" project-prefix-map)
   ;; smerge
   ;; (cons "=" smerge-basic-map)

   ;; tab-bar
   (cons "t" tab-prefix-map)

   ;; app
   '("d" . dired)
   '("v" . magit)
   '("C" . xeft)

   ;; toggles
   '("$" . load-theme)
   '("L" . display-line-numbers-mode)
   '("A" . org-agenda-list)
   '("T" . telega)
   )

  (meow-normal-define-key
   '("?" . meow-cheatsheet)
   '("<escape>" . mode-line-other-buffer)
   '(";" . meow-reverse)
   '("g" . meow-cancel-selection)
   '("q" . eat/quit)
   '("\\" . comment-dwim)

   ;; expand by numbers
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)

   ;; movement, like hjkl
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("t" . meow-right)
   '("T" . meow-right-expand)
   '("n" . meow-next)
   '("N" . meow-next-expand)
   '("p" . meow-prev)
   '("P" . meow-prev-expand)

   ;; insert above/below
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("A" . meow-open-below)
   '("a" . meow-append)

   ;; move/mark by word/symbol
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("w" . meow-next-word)
   '("W" . meow-next-symbol)
   '("m" . meow-mark-word)
   '("M" . meow-mark-symbol)

   ;; kill/delete/change/replace
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("k" . meow-kill)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("c" . meow-change)

   ;; line operation
   '("j" . meow-join)
   '("e" . meow-line) ;; NOTE F3 or insert/append/change in grab to enable "every n line" grab
   '("E" . meow-goto-line)
   '("o" . meow-block)
   '("O" . meow-to-block)

   ;; yank/pop
   '("x" . meow-save)
   '("X" . meow-sync-grab)
   '("y" . meow-yank)

   ;; grab
   '("G" . meow-grab)
   '("z" . meow-pop-selection)

   ;; query replace
   '("&" . meow-query-replace)
   '("%" . meow-query-replace-regexp)

   ;; thing
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("<" . meow-beginning-of-thing)
   '(">" . meow-end-of-thing)

   ;; find/till/visit, most used in beacon mode
   '("/" . meow-search)
   '("F" . meow-find)
   '("L" . meow-till)
   '("l" . meow-visit)

   ;; undo
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)


   ;;
   '(":" . execute-extended-command)

   ;; scroll
   '("v" . scroll-up-command)
   '("V" . scroll-down-command)

   ;; buffer
   '("S" . save-buffer)

   ;; window
   '("s" . ace-select-window)

   ;; wrap && unwrap
   '("\"" . insert-pair)
   '("[" . insert-pair)
   '("{" . insert-pair)
   '("(" . insert-pair)
   '("]" . delete-pair) ;; NOTE maybe custom `delete-pair-blink-delay'

   ;; flymake
   '("Q" . flymake-goto-prev-error)
   '("J" . flymake-goto-next-error)

   ;; tab-bar
   '(")" . tab-bar-switch-to-prev-tab)
   '("}" . tab-bar-switch-to-next-tab)

   ;; misc
   '("'" . repeat)
   '("-" . avy-goto-char-timer)
   '("f" . project-find-file)
   '("K" . kill-this-buffer)
   ))
#+end_src
*** Config
#+begin_src elisp
(eat/pkg meow)

(require 'meow)
(setq meow-visit-sanitize-completion nil
      meow-esc-delay 0.001
      meow-keypad-describe-delay 1.0
      meow-replace-state-name-list
      '((normal . "N")
        (motion . "M")
        (keypad . "K")
        (insert . "I")
        (beacon . "B")))
;; specific font so that line won't break TODO chang to variable
;; (advice-add 'meow-cheatsheet :after (lambda ()
;;                                       (interactive)
;;                                       (setq buffer-face-mode-face '(:family "Menlo"))
;;                                       (buffer-face-mode +1)))
;; normal mode list
(dolist (mode '(go-dot-mod-mode
                diff-mode))
  (add-to-list 'meow-mode-state-list `(,mode . normal)))
;; motion mode list
(dolist (mode '(lsp-bridge-ref-mode
                Info-mode
                ghelp-page-mode
                notmuch-hello-mode
                notmuch-search-mode
                notmuch-tree-mode))
  (add-to-list 'meow-mode-state-list `(,mode . motion)))
(dolist (mode '(xeft-mode
                gud-mode))
  (add-to-list 'meow-mode-state-list `(,mode . insert)))

(meow-setup-dvorak)
(meow-setup-indicator)
(meow-global-mode 1)
#+end_src
** Separedit
#+begin_src emacs-lisp
(eat/pkg separedit)
(keymap-global-set "C-c '" #'separedit)
#+end_src

** Undo
*** vundo
#+begin_src emacs-lisp
(eat/pkg vundo)
#+end_src

*** undo-hl
#+begin_src emacs-lisp
(eat/pkg undo-hl "https://github.com/casouri/undo-hl.git")
(add-hook 'prog-mode-hook #'undo-hl-mode)
(add-hook 'conf-mode-hook #'undo-hl-mode)
#+end_src

** rime for Chinese Input
If install emacs with nix:
Set =rime-emacs-module-header-root= to =emacs/include=.
set  to =librime=.

#+begin_src elisp
;; curl -L -O https://github.com/rime/librime/releases/download/1.7.2/rime-1.7.2-osx.zip
;; unzip rime-1.7.2-osx.zip -d ~/.config/emacs/librime
;; rm -rf rime-1.7.2-osx.zip
(eat/pkg rime)

(if eat/macp
    (setq rime-librime-root (expand-file-name "librime/dist" user-emacs-directory))
  (setq  rime-share-data-dir "~/.local/share/fcitx5/rime"))
(setq
 rime-disable-predicates '(meow-normal-mode-p
                           ;; meow-motion-mode-p
                           meow-keypad-mode-p
                           meow-beacon-mode-p)
 rime-inline-predicates '(rime-predicate-space-after-cc-p
                          rime-predicate-current-uppercase-letter-p)
 rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g" "C-v" "M-v")
 rime-inline-ascii-holder ?a
 default-input-method "rime"
 rime-cursor "|"
 rime-show-candidate 'minibuffer)
(with-eval-after-load 'rime
  (set-face-attribute 'rime-indicator-face nil :height 0.9)
  (set-face-attribute 'rime-indicator-dim-face nil :height 0.9)
  (define-key rime-active-mode-map [tab] 'rime-inline-ascii)
  (keymap-set rime-mode-map "M-j" 'rime-force-enable))
#+end_src
*** Search with rime and regex
Only work for orderless for now.

#+begin_src elisp
(unless (package-installed-p 'rime-regexp)
  (package-vc-install "https://github.com/colawithsauce/rime-regexp.el"))

(with-eval-after-load "rime"
  (rime-regexp-mode))
#+end_src

** Hl Todo
#+begin_src emacs-lisp
(eat/pkg hl-todo)
(add-hook 'dired-mode-hook #'hl-todo-mode)
(add-hook 'prog-mode-hook #'hl-todo-mode)
(add-hook 'conf-mode-hook #'hl-todo-mode)
#+end_src
** Ligature
#+begin_src emacs-lisp
(eat/pkg ligature)

(add-hook 'prog-mode-hook #'(lambda () (ligature-mode t)))

(autoload #'global-ligature-mode "ligature")

(with-eval-after-load 'ligature
  ;; https://htmlpreview.github.io/?https://github.com/kiliman/operator-mono-lig/blob/master/images/preview/normal/index.html
  (ligature-set-ligatures 'prog-mode
                          '("&&" "||" "|>" ":=" "==" "===" "==>" "=>"
                            "=<<" "!=" "!==" ">=" ">=>" ">>=" "->" "--"
                            "-->" "<|" "<=" "<==" "<=>" "<=<" "<!--" "<-"
                            "<->" "<--" "</" "+=" "++" "??" "/>" "__" "WWW")))
#+end_src
** Avy
#+begin_src elisp
(eat/pkg avy)
(with-eval-after-load 'avy
  (setq avy-background t
        avy-style 'pre))
#+end_src
* Completion
** company for in buffer completion

- use C-p/C-n to select prev/next
- use tab to do complete
- free ret, popup will no longer interrupt typing

#+begin_src emacs-lisp
(eat/pkg company)

(add-hook 'prog-mode-hook 'company-mode)

(defun my-company-capf--candidates (func &rest args)
  "Try default completion styles."
  (let ((completion-styles '(basic partial-completion)))
    (apply func args)))
(advice-add 'company-capf--candidates :around 'my-company-capf--candidates)

(setq company-minimum-prefix-length 2
      company-idle-delay 0.1 ;; time for snippet expand
      company-require-match nil)

;; Frontends
;; don't need preview frontends with copilot
;; use C-h to show doc(maybe use eldoc-box) instead echo- frontend
;; so only config tooltip frontend
(setq company-frontends '(company-pseudo-tooltip-frontend)
      company-tooltip-align-annotations t
      ;; no matter if a tooltip is shown above or below point, the
      ;; candidates are always listed starting near point.
      company-tooltip-width-grow-only t
      ;; icon in front of a candidate, make it looks like Atom
      company-format-margin-function #'company-text-icons-margin
      company-text-icons-add-background t)

;; Backends
(setq company-backends '(company-capf
                         company-files
                         (;;searching for completion candidates inside the contents of the open buffer(s)
                          company-dabbrev-code
                          ;; provides completions from programming language keywords
                          company-keywords)
                         company-dabbrev)
      company-files-exclusions '(".git/" ".DS_Store")
      ;; search from the buffers with the same majar mode
      company-dabbrev-other-buffers t
      company-dabbrev-ignore-case nil
      company-dabbrev-downcase nil
      company-dabbrev-code-ignore-case nil
      company-dabbrev-code-everywhere t)

(with-eval-after-load "company"
  ;; use tab to do complete and free ret
  (bind company-active-map
        [tab] #'company-complete-selection
        "TAB" #'company-complete-selection
        [remap completion-at-point] #'company-complete-selection
        "C-s" #'company-filter-candidates
        ;; Free SPC and RET, popup will no longer interrupt typing.
        [escape] nil
        [return] nil
        "RET" nil
        "SPC" nil))
#+end_src
** yasnippet
#+begin_src elisp
(eat/pkg yasnippet)

(add-hook 'prog-mode-hook #'yas-minor-mode)
(add-hook 'conf-mode-hook #'yas-minor-mode)

(with-eval-after-load 'yasnippet
  (let ((inhibit-message t))
    (yas-reload-all)))
#+end_src
** copilot

#+begin_src emacs-lisp
(eat/pkg copilot "https://github.com/zerolfx/copilot.el")

;; disable warning about didn't found mode-specific indentation offest
(setq copilot-indent-warning-suppress t)

(when (executable-find "node")
  (add-hook 'prog-mode-hook 'copilot-mode))

(with-eval-after-load 'copilot
  (add-to-list 'copilot-major-mode-alist '("go" . "go"))
  (add-to-list 'copilot-major-mode-alist '("go-ts" . "go"))
  (bind copilot-completion-map
        "C-g" #'copilot-clear-overlay
        "C-f" #'copilot-accept-completion
        "C-e" #'copilot-accept-completion-by-line
        "M-f" #'copilot-accept-completion-by-word
        "M-p" #'copilot-previous-completion
        "M-n" #'copilot-next-completion)
  ;; only enable copilot in meow insert mode
  (with-eval-after-load 'meow
    (add-to-list 'copilot-enable-predicates 'meow-insert-mode-p)))
#+end_src

* Programming
** Tools
*** Devdocs
#+begin_src elisp
(eat/pkg devdocs)
#+end_src

*** Imenu List
#+begin_src emacs-lisp
(eat/pkg imenu-list)

(setq imenu-list-auto-resize t
      imenu-list-mode-line-format nil)

(defun eat/imenu-list-setup ()
  (setq-local header-line-format nil)
  (face-remap-add-relative 'default :height 0.8))

(add-hook 'imenu-list-major-mode-hook #'eat/imenu-list-setup)
#+end_src
*** Paredit
#+begin_src emacs-lisp
(eat/pkg paredit)

(add-hook 'emacs-lisp-mode-hook #'paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'paredit-mode)
(add-hook 'scheme-mode-hook #'paredit-mode)
(add-hook 'lisp-mode-hook #'paredit-mode)
#+end_src
*** Puni
#+begin_src emacs-lisp
(eat/pkg puni)
;; (:with-hook (emacs-lisp-mode-hook scheme-mode-hook clojure-mode-hook)
;;   (:hook puni-mode))
;; (:bind
;;  "M-r" 'puni-splice
;;  "C-(" 'puni-slurp-backward
;;  "C-)" 'puni-slurp-forward
;;  "C-{" 'puni-barf-backward
;;  "C-}" 'puni-barf-forward)
#+end_src
*** Dumb Jump
#+begin_src elisp
(eat/pkg dumb-jump)

(setq dumb-jump-quiet t
      dumb-jump-aggressive t
      dumb-jump-selector 'completing-read)

(when (executable-find "ugrep")
  (setq dumb-jump-grep-cmd "ugrep"
        dumb-jump-grep-args "-G -U -Y -. --sort -Dread -dread"))

;; NOTE use `dumb-jump' as default xref backend
;; you can run `eglot' or `eat/citre-enable' to reset this
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
#+end_src
*** Apheleia
#+begin_src elisp
(eat/pkg apheleia)

(setq apheleia-remote-algorithm 'local)

(add-hook 'go-mode-hook #'apheleia-mode)

(with-eval-after-load 'apheleia
  (push '(go-ts-mode . gofmt) apheleia-mode-alist)
  (setf (alist-get 'gofmt apheleia-formatters)
        '("goimports")))
#+end_src
*** Clue
#+begin_src emacs-lisp
(eat/pkg clue "https://github.com/AmaiKinono/clue")
#+end_src
** Lsp
*** lsp-bridge                                                       :deps:
Need a lot...

~pypy3 -m ensurepip && pypy3 -m pip install epc sexpdata six paramiko~

#+begin_src elisp
(eat/pkg lsp-bridge "https://github.com/manateelazycat/lsp-bridge")
(eat/pkg flymake-bridge "https://github.com/liuyinz/flymake-bridge")
;; (eat/pkg popon "https://codeberg.org/akib/emacs-popon.git")
;; (eat/pkg acm-terminal "https://github.com/twlz0ne/acm-terminal")

(setq lsp-bridge-c-lsp-server "ccls"
      ;; install lsp server and run lsp_bridge.py on remote server
      lsp-bridge-enable-with-tramp t)

(defun eat/lsp-bridge-mode-setup ()
  (interactive)
  (flymake-bridge-setup)
  ;; Disable corfu since lsp-bridge use acm.
  (ignore-errors
    (company-mode -1))
  ;; Use tab to jump to next field but do complete when there's acm complete.
  (with-eval-after-load 'yasnippet
    (define-key yas-keymap (kbd "<tab>") 'acm-complete-or-expand-yas-snippet)
    (define-key yas-keymap (kbd "TAB") 'acm-complete-or-expand-yas-snippet))
  ;; Use acm in terminal.
  ;; (unless (display-graphic-p)
  ;;   (with-eval-after-load 'acm
  ;;     (require 'acm-terminal)))
  )

(with-eval-after-load 'lsp-bridge
  (add-hook 'lsp-bridge-mode-hook #'eat/lsp-bridge-mode-setup)

  (bind
   (lsp-bridge-mode-map
    "M-."     #'lsp-bridge-find-def
    "C-x 4 ." #'lsp-bridge-find-def-other-window
    "M-,"     #'lsp-bridge-find-def-return
    "M-?"     #'lsp-bridge-find-references
    "M-'"     #'lsp-bridge-find-impl
    "C-c r"   #'lsp-bridge-rename
    "M-RET"   #'lsp-bridge-code-action)
   (lsp-bridge-ref-mode-map
    "j" nil
    "k" nil
    "h" nil
    "l" nil
    "p" #'lsp-bridge-ref-jump-prev-file
    "h" #'lsp-bridge-ref-jump-prev-keyword
    "t" #'lsp-bridge-ref-jump-next-keyword
    "n" #'lsp-bridge-ref-jump-next-file)))
#+end_src

*** eglot
#+begin_src elisp
(eat/pkg eldoc-box)

(setq eglot-events-buffer-size 0
      eglot-sync-connect nil       ;; don't block of LSP connection attempts
      eglot-extend-to-xref t       ;; make eglot manage file out of project by `xref-find-definitions'
      eglot-stay-out-of '(company) ;; I will set up company myself for specific backends
      eglot-ignored-server-capabilites
      '(:documentHighlightProvider
        :documentFormattingProvider
        :documentRangeFormattingProvider))

;; TODO config :stubPath for python's lsp server
;; https://www.reddit.com/r/emacs/comments/17ry3vr/comment/k8p6j36/?context=3
(setq-default eglot-workspace-configuration
              '((:gopls
                 (:ui.completion.usePlaceholders . t)
                 (:ui.diagnostic.staticcheck . t)
                 ;; for I have to edit wire.go even ignore it in build time
                 (:build.buildFlags . ["-tags" "wireinject"]))))

(when (executable-find "ltex-ls")
  (add-hook 'message-mode-hook #'eglot-ensure))

(with-eval-after-load 'eglot
  (bind eglot-mode-map
        "M-RET"  #'eglot-code-actions
        "C-c r" #'eglot-rename
        "M-'" #'eglot-find-implementation)

  (add-to-list 'eglot-server-programs '(rust-mode "rust-analyzer"))
  (add-to-list 'eglot-server-programs '(sql-mode . ("sqls" "-config" "~/.config/sqls/config.yaml")))
  (add-to-list 'eglot-server-programs '(nix-mode . ("nixd")))
  (add-to-list 'eglot-server-programs '(message-mode . ("ltex-ls"))))

(add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode)


(eat/pkg eglot-hierarchy "https://github.com/dolmens/eglot-hierarchy")
#+end_src
** Citre
#+begin_src elisp
(eat/pkg citre)

(keymap-global-set "C-x c j" #'citre-jump)
(keymap-global-set "C-x c u" #'citre-update-this-tags-file)
(keymap-global-set "C-x c p" #'citre-peek)
(keymap-global-set "C-x c U" #'citre-global-update-database)
(keymap-global-set "C-x c r" #'citre-jump-to-reference)

(with-eval-after-load 'citre
  (keymap-global-set "C-x c J" #'citre-jump-back)
  ;; NOTE
  ;; Notice that GTAGSOBJDIRPREFIX must exist for gtags to use it. So you need to run:
  ;; $ mkdir -p ~/.cache/gtags/
  (keymap-global-set "C-x c P" #'citre-ace-peek-references)
  (setq citre-default-create-tags-file-location 'global-cache
        citre-use-project-root-when-creating-tags t
        citre-prompt-language-for-ctags-command t
        citre-auto-enable-citre-mode-modes '(prog-mode))
  (with-eval-after-load 'cc-mode (require 'citre-lang-c))
  (with-eval-after-load 'dired (require 'citre-lang-fileref))
  (with-eval-after-load 'verilog-mode (require 'citre-lang-verilog)))

(with-eval-after-load 'citre-global
  (setenv "GTAGSOBJDIRPREFIX" (concat (getenv "HOME") "/.cache/gtags"))
  (setenv "GTAGSCONF" (concat (getenv "HOME") "/.globalrc"))
  (setenv "GTAGSLABEL" "native-pygments"))

(with-eval-after-load 'citre-peek
  (keymap-set citre-peek-keymap "M-l r" 'citre-peek-through-references))
#+end_src
** Lang
*** Lisp
#+begin_src elisp
(eat/pkg aggressive-indent)

(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
(add-hook 'lisp-interaction-mode-hook #'aggressive-indent-mode)
(add-hook 'scheme-mode-hook #'aggressive-indent-mode)
(add-hook 'lisp-mode-hook #'aggressive-indent-mode)
#+end_src
*** Go
#+begin_src emacs-lisp
(eat/pkg go-mode)
(eat/pkg flymake-go-staticcheck)
(eat/pkg go-gen-test)
(eat/pkg go-tag)
(eat/pkg go-dlv)
(eat/pkg go-fill-struct)
(eat/pkg go-impl)
(eat/pkg gotest)

;; Install or update tools
(defvar go--tools '("golang.org/x/tools/gopls"
                    "golang.org/x/tools/cmd/goimports"
                    "honnef.co/go/tools/cmd/staticcheck"
                    "github.com/go-delve/delve/cmd/dlv"
                    "github.com/zmb3/gogetdoc"
                    "github.com/josharian/impl"
                    "github.com/cweill/gotests/..."
                    "github.com/fatih/gomodifytags"
                    "github.com/davidrjenni/reftools/cmd/fillstruct"
                    "github.com/rogpeppe/godef"
                    "github.com/traefik/yaegi/cmd/yaegi")
  "All necessary go tools.")

(defun go-update-tools ()
  "Install or update go tools."
  (interactive)
  (unless (executable-find "go")
    (user-error "Unable to find `go' in `exec-path'!"))

  (message "Installing go tools...")
  (dolist (pkg go--tools)
    (set-process-sentinel
     (start-process "go-tools" "*Go Tools*" "go" "install" "-v" "-x" (concat pkg "@latest"))
     (lambda (proc _)
       (let ((status (process-exit-status proc)))
         (if (= 0 status)
             (message "Installed %s" pkg)
           (message "Failed to install %s: %d" pkg status)))))))
(setq gofmt-command "goimports"
      gofmt-show-errors nil)
(add-hook 'go-test-mode-hook #'visual-line-mode)

;; Go-test
(setq go-test-verbose t
      ;; Do not cache test result.
      go-test-args "-count=1")
;; Go-tag
(setq go-tag-args (list "-transform" "camelcase"))
;; Bind
(with-eval-after-load 'go-mode
  (keymap-set go-mode-map "C-c t g" #'go-gen-test-dwim)
  (keymap-set go-mode-map "C-c t t" #'go-test-current-test)
  (keymap-set go-mode-map "C-c t a" #'go-tag-add)
  (keymap-set go-mode-map "C-c t r" #'go-tag-remove))
#+end_src
*** Nix
Install =rnix-lsp= and =nixfmt=.
#+begin_src emacs-lisp
(eat/pkg nix-mode)
#+end_src

*** Clojure
#+begin_src elisp
(eat/pkg clojure-mode)
(eat/pkg cider)
(eat/pkg clj-refactor)

(add-hook 'clojure-mode-hook #'puni-mode)

(setq cider-repl-display-help-banner nil)

(with-eval-after-load 'clojure-mode
  ;; better indentation for compojure
  ;; https://github.com/weavejester/compojure/wiki/Emacs-indentation
  (define-clojure-indent
   (defroutes 'defun)
   (GET 2)
   (POST 2)
   (PUT 2)
   (DELETE 2)
   (HEAD 2)
   (ANY 2)
   (OPTIONS 2)
   (PATCH 2)
   (rfn 2)
   (let-routes 1)
   (context 2)))
#+end_src
*** C
#+begin_src elisp
(setq c-default-style "linux"
      c-basic-offset 4)
#+end_src
*** Python
#+begin_src elisp
(setq python-indent-offset 4
      python-shell-completion-native-enable nil
      python-indent-guess-indent-offset nil)


(eat/pkg pet)
;; Emacs 29+
;; This will turn on `pet-mode' on `python-mode' and `python-ts-mode'
(add-hook 'python-base-mode-hook 'pet-mode -10)
#+end_src
*** Sql
#+begin_src elisp
(setq sql-mysql-login-params '(user password server database port))
#+end_src
*** Javascript
#+begin_src emacs-lisp
;; NOTE js-ts-mode and tsx-ts-mode have bug to stuck emacs
(setq-default js-indent-level 2)
#+end_src
** Tree-sitter
1. Install =tree-sitter= on system.
2. Build emacs with tree sitter =--with-tree-sitter=.
3. Install language definitions to =/usr/local/lib= or =~/.config/emacs/tree-sitter= or =treesit-extra-load-path=.
4. On windows, copy dll files to Emacs’s bin directory.

Also check:
[[https://git.savannah.gnu.org/cgit/emacs.git/tree/admin/notes/tree-sitter/starter-guide?h=emacs-29][Emacs tree sitter start guide.]]
[[https://github.com/casouri/tree-sitter-module][Tree sitter language definitions build script.]]
~treesit-language-source-alist~
~treesit-install-language-grammar~

#+begin_src emacs-lisp
(setq
 ;; 没有在 tree-sitter 组织下的 parser
 treesit-language-source-alist
 '((gomod . ("https://github.com/camdencheek/tree-sitter-gomod.git"))
   (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))))
#+end_src

*** TODO go

Why treesit-check-indent still use 8 as indent offset as I alreay set
go-ts-mode-indent-offset to 4?
And electric-indent-mode make enter after ) } indent 8 space too.

#+begin_src emacs-lisp
(with-eval-after-load 'go-ts-mode
  (require 'go-mode)

  (setq go-ts-mode-hook go-mode-hook
        go-ts-mode-indent-offset 4)

  (set-keymap-parent go-ts-mode-map go-mode-map))
#+end_src

*** Remap major mode
#+begin_src emacs-lisp
(when (treesit-available-p)
  (push '(python-mode . python-ts-mode) major-mode-remap-alist)
  (push '(go-mode . go-ts-mode) major-mode-remap-alist)

  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.toml\\'" . toml-ts-mode)))
#+end_src
*** Folding
#+begin_src emacs-lisp
(defun treesit-fold-toggle (arg)
  "Toggle folding for the defun at point.

The first and last line of the defun are preserved, the rest are
folded.

If called interactively with argument (ARG), toggle the top-level
defun. Top-level folding and non-top-level folding are on
separate channels, meaning top-level toggle wouldn’t unfold
non-top-level folding, and vice versa.

What constitutes as a defun is determined by the major mode.
This command only works in a tree-sitter major mode."
  (interactive "p")
  (let* ((tactic (if (eq arg 4) 'top-level 'nested))
         (node (let ((treesit-defun-tactic tactic))
                 (treesit-defun-at-point))))
    (if (null node)
        (user-error "No defun at point")
      (let ((indent (save-excursion
                      (goto-char (treesit-node-start node))
                      (current-indentation)))
            ;; We leave the first and last line visible.
            (beg (save-excursion
                   (goto-char (treesit-node-start node))
                   (forward-line 1)
                   (point)))
            (end (save-excursion
                   (goto-char (treesit-node-end node))
                   (forward-line -1)
                   (line-end-position)))
            (has-fold nil))
        ;; If there are existing overlays, this defun must have been
        ;; folded, then unfold it. But if the folding overlay has
        ;; different tactic than the one we are using now, leave it.
        (dolist (ov (overlays-in beg end))
          (when (and (overlay-get ov 'treesit-fold)
                     (eq (overlay-get ov 'treesit-fold-tactic)
                         tactic))
            (setq has-fold t)
            (delete-overlay ov)))

        ;; If there aren’t existing overlay with the same tactic, add
        ;; new folding.
        (when (null has-fold)
          (let ((ov (make-overlay beg end nil t nil)))
            (overlay-put ov 'treesit-fold t)
            (overlay-put ov 'treesit-fold-tactic tactic)
            (overlay-put ov 'display (concat (make-string indent ?\s)
                                             "..."))))))))
#+end_src
** dape DAP Debugger
#+begin_src emacs-lisp
(eat/pkg dape "https://github.com/svaante/dape")

(setq dape-configs
      '((delve
         modes (go-mode go-ts-mode)
         command "dlv"
         command-args ("dap" "--listen" "127.0.0.1:55878")
         command-cwd dape-cwd-fn
         host "127.0.0.1"
         port 55878
         :type "debug"
         :request "launch"
         :cwd dape-cwd-fn
         :program dape-cwd-fn)))

(autoload #'dape-toggle-breakpoint "dape" nil t)
#+end_src
** drepl
#+begin_src emacs-lisp
(eat/pkg drepl)
#+end_src
* Tools
** Visual Fill Column
Center current window.
#+begin_src emacs-lisp
(eat/pkg visual-fill-column)

(add-hook 'visual-fill-column-mode-hook #'visual-line-mode)

(setq visual-fill-column-center-text t)
#+end_src
** Grep
#+begin_src elisp
(eat/pkg wgrep)
(eat/pkg urgrep)

(with-eval-after-load 'urgrep
  (require 'urgrep-wgrep))
#+end_src
** Translate
#+begin_src elisp
(eat/pkg go-translate)

(setq gts-translate-list '(("en" "zh")))

(eat/pkg fanyi)

(defvar gts-deepl-auth-key nil
  "Free auto key to access deepl api.")

(defun eat/translate ()
  (interactive)
  (if (use-region-p)
      (gts-do-translate)
    (fanyi-dwim2)))

(keymap-global-set "C-c y" #'eat/translate)

(with-eval-after-load 'go-translate
  (setq gts-default-translator
        (gts-translator
         :picker
         (gts-noprompt-picker)

         :engines
         (list
          (gts-google-rpc-engine)
          (gts-bing-engine)
          (when gts-deepl-auth-key
            (gts-deepl-engine :auth-key gts-deepl-auth-key :pro nil)))

         :render
         (gts-buffer-render))))

(defun eat/context-translate (menu click)
  "My context MENU to translate text."
  (define-key-after menu [dictionary-lookup]
    '(menu-item "Translate" eat/translate))
  menu)

;; hook into context menu
(add-hook 'context-menu-functions #'eat/context-translate)
#+end_src
** Ghelp
#+begin_src elisp
(eat/pkg ghelp "https://github.com/casouri/ghelp.git")

(autoload #'ghelp-describe          "ghelp")
(autoload #'ghelp-describe-function "ghelp")
(autoload #'ghelp-describe-variable "ghelp")
(autoload #'ghelp-describe-key      "ghelp")
(autoload #'ghelp-describe-elisp    "ghelp")

(bind global-map
      "C-h C-h" #'ghelp-describe
      "C-h f"   #'ghelp-describe-function
      "C-h v"   #'ghelp-describe-variable
      "C-h k"   #'ghelp-describe-key
      "C-h o"   #'ghelp-describe-elisp)
(with-eval-after-load 'ghelp
  (bind global-map "C-h r" #'ghelp-resume))
#+end_src

** Restclient
#+begin_src emacs-lisp
(eat/pkg restclient)
#+end_src

** leetcode
~pip3 install my_cookies~

Set cookie manually:
~(url-cookie-store "LEETCODE_SESSION" leetcode-session nil "leetcode.com" "/" t)~
~(url-cookie-store "csrftoken" leetcode-csrftoken nil "leetcode.com" "/" t)~

#+begin_src emacs-lisp
(eat/pkg leetcode)

(setq leetcode-prefer-language "golang")
(setq leetcode-save-solutions t)
(setq leetcode-directory "~/Dropbox/leetcode")
#+end_src
** Draw

- plantuml
- graphviz
- d2, written in go
- tikz
- exclidraw

*** d2

#+begin_src emacs-lisp
(eat/pkg d2-mode)
(eat/pkg ob-d2)

(add-to-list 'auto-mode-alist '("\\.d2" . d2-mode))
#+end_src
** direnv
#+begin_src emacs-lisp
(eat/pkg envrc)

(add-hook 'after-init-hook #'envrc-global-mode)
#+end_src
** pastebin service
#+begin_src emacs-lisp
(eat/pkg webpaste)

(setq webpaste-paste-confirmation t
      webpaste-add-to-killring t
      webpaste-provider-priority '("paste.mozilla.org")
      webpaste-open-in-browser nil)
#+end_src
** AI
*** Bing Chat

- Install the cookie editor extension for [[https://microsoftedge.microsoft.com/addons/detail/cookieeditor/neaplmfkghagebokkhpjpoebhdledlfi][Egde]]
- Go to bing.com
- Open the extension
- Click “Export” on the bottom right (This saves your cookies to clipboard)
- Paste your cookies into a file cookies.json
- Set =aichat-bingai-cookies-file= to your cookies.json path

For openai, set api key in auth file:
=machine platform.openai.com login aichat-openai password your-app-key=

#+begin_src elisp
(eat/pkg websocket)
(eat/pkg async-await)
(eat/pkg markdown-mode)
(eat/pkg emacs-aichat "https://github.com/xhcoding/emacs-aichat")
(setq aichat-bingai-cookies-file "~/Dropbox/.bingcookies.json"
      aichat-bingai-chat-file "~/Sync/aichat.md")
(autoload #'aichat-bingai-chat "aichat-bingai.el" nil t)
(autoload #'aichat-bingai-assistant "aichat-bingai.el" nil t)
(autoload #'aichat-openai-assistant "aichat-openai.el" nil t)
#+end_src
*** gptel

Custome =gptel-backend= as you need.

#+begin_src emacs-lisp
(eat/pkg gptel)

;; store gpt key in ~/.authinfo
;; machine api.openai.com login apikey password TOKEN
(setq gptel-default-mode 'org-mode)

(add-hook 'gptel-mode-hook #'visual-fill-column-mode)
#+end_src

* Markup Languages
** Align table
#+begin_src elisp
(eat/pkg valign)
(setq valign-fancy-bar t)
(when (display-graphic-p)
  (add-hook 'org-mode-hook #'valign-mode)
  (add-hook 'markdown-mode-hook #'valign-mode))
#+end_src

** Org
*** config
#+begin_src elisp
(defun eat/org-hook ()
  "Configuration for Org Mode."
  (org-indent-mode)
  (electric-pair-local-mode -1)
  (electric-quote-local-mode)
  (electric-indent-local-mode -1))

(add-hook 'org-mode-hook #'eat/org-hook)

;; https://nixos.wiki/wiki/TexLive
(setq org-latex-compiler "lualatex")
(setq org-preview-latex-default-process 'dvisvgm)

(setq org-directory (expand-file-name "~/Dropbox/org"))
(defvar load-language-list '((emacs-lisp . t)
                             (python . t)
                             (js . t)
                             (C . t)
                             (shell . t)
                             (plantuml . t)))
(setq org-plantuml-exec-mode 'plantuml)

(with-eval-after-load 'org
  (setq org-edit-src-content-indentation 0
        org-special-ctrl-a/e t
        org-special-ctrl-k t
        ;; comment after emacs merge noverly branch
        ;; org-src-fontify-natively nil ;; see it in `org-edit-special'
        org-src-window-setup 'current-window
        org-return-follows-link t
        org-confirm-babel-evaluate nil
        org-image-actual-width '(300)
        org-ellipsis " ▾ "
        ;; Faster loading
        org-modules nil
        org-log-done t)
  (require 'org-mouse) ;; mouse support
  (require 'org-tempo) ;; see `org-structure-template-alist'
  (require 'ob)
  (require 'ob-dot)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (org-babel-do-load-languages 'org-babel-load-languages load-language-list))
#+end_src
*** ob
**** restclient
#+begin_src elisp
(eat/pkg ob-restclient)
(cl-pushnew '(restclient . t) load-language-list)
(with-eval-after-load 'ob-restclient
  (add-to-list 'org-structure-template-alist '("rc" . "src restclient")))
#+end_src

**** go
#+begin_src elisp
(eat/pkg ob-go)

(cl-pushnew '(go .t) load-language-list)

(with-eval-after-load 'ob-go
  (add-to-list 'org-structure-template-alist '("go" . "src go")))
#+end_src

*** Copture
#+begin_src elisp
(keymap-global-set "C-c c" 'org-capture)

(defun eat/org-capture-inbox ()
  (interactive)
  (org-capture nil "i"))
(keymap-global-set "C-c I" #'eat/org-capture-inbox)

(setq org-default-notes-file (concat org-directory "/default-notes.org")
      org-capture-templates
      `(("i" "Inbox" entry (file "~/Dropbox/org/inbox.org")
         "* TODO %?\n:PROPERITIES:\n:Created: %T\n:END:")
        ("w" "Work" entry (file+olp+datetree "~/Dropbox/org/Work.org")
         "* %^{Title}\n:PROPERITIES:\n:Created: %T\n:END:" :tree-type week)
        ("n" "Note" entry (file "~/Dropbox/org/Notes.org")
         "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)))
#+end_src

*** Agenda
#+begin_src elisp
(setq org-agenda-files (list org-directory)
      org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
                                 (todo   . " ")
                                 (tags   . " %i %-12:c")
                                 (search . " %i %-12:c"))
      ;; hide any tag
      org-agenda-hide-tags-regexp "."
      org-agenda-current-time-string
      "⭠ now ─────────────────────────────────────────────────")

(keymap-global-set "C-c a" 'org-agenda)
#+end_src

*** org-present
#+begin_src emacs-lisp
(eat/pkg org-present)

(add-hook 'org-present-mode-hook
          #'(lambda ()
              (eat/prose-mode -1)
              ;; full frame
              (toggle-frame-fullscreen)
              ;; display header line so that we can use face-remapping
              ;; to create big enought blank space at the top
              (setq-local header-line-format " ")
              ;; incraease font size
              (setq-local
               face-remapping-alist
               '((default (:height 1.5) variable-pitch)
                 (header-line (:height 4.0) variable-pitch)
                 (org-document-title (:height 1.75) org-document-title)
                 (org-code (:height 1.55) org-code)
                 (org-verbatim (:height 0.7) org-verbatim)
                 (org-block (:height 1.25) org-block)
                 (org-block-begin-line (:height 0.7) org-block)))
              ;; from org-present, after font rescale
              (org-present-read-only)
              (org-present-hide-cursor)
              (org-display-inline-images)
              ;; center the screen
              (visual-fill-column-mode 1)
              (setq-local visual-fill-column-center-text t)
              (setq-local visual-fill-column-width 90)
              ;; hide mode line
              (hide-mode-line-mode 1)
              ;;
              (org-variable-pitch-minor-mode 1)))

(add-hook 'org-present-mode-quit-hook
          #'(lambda ()
              (toggle-frame-fullscreen)
              (hide-mode-line-mode -1)
              (kill-local-variable 'face-remapping-alist)
              (kill-local-variable 'header-line-format)
              (eat/prose-mode 1)
              ;; from org-present
              (org-present-show-cursor)
              (org-remove-inline-images)
              (org-present-read-write)))

(defun my/org-present-prepare-slide (buffer-name heading)
  ;; Show only top-level hedlines.
  (org-overview)
  ;; Unfold the current entry.
  (org-fold-show-entry)
  ;; Show only direct subheadings of the slide but don't expand them.
  (org-fold-show-children))

(add-hook 'org-present-after-navigate-functions #'my/org-present-prepare-slide)
#+end_src
*** UI
**** Chinese inline format
#+begin_src emacs-lisp
(defun eat/insert-zero-width-space ()
  (interactive)
  (insert-char ?\u200B)) ;; code for ZERO WIDTH SPACE
(keymap-global-set "C-x 8 0" #'eat/insert-zero-width-space)
#+end_src

**** Auto hide/display emphasis
#+begin_src emacs-lisp
(eat/pkg org-appear)
(setq org-hide-emphasis-markers t)
(add-hook 'org-mode-hook #'org-appear-mode)
#+end_src

**** Use variable pitch font
#+begin_src emacs-lisp
(eat/pkg org-variable-pitch)
#+end_src
**** Org Modern
#+begin_src emacs-lisp
(eat/pkg org-modern)
(eat/pkg org-modern-indent "https://github.com/jdtsmith/org-modern-indent")

(setq org-modern-star ["›"]
      org-modern-hide-stars nil
      ;; Enable this will break code block indentation.
      org-modern-block-fringe nil
      ;; Use valign instead
      org-modern-table nil)

(defun eat/setup-org-modern ()
  (setq-local line-spacing 0.15)
  (org-modern-mode))
(add-hook 'org-mode-hook 'eat/setup-org-modern)
(add-hook 'org-mode-hook 'org-modern-indent-mode 90)
#+end_src
*** Export

**** Html

***** Syntax highlighting
#+begin_src emacs-lisp
(eat/pkg htmlize)
#+end_src

***** TODO Inline image
For now use ~pandoc --embed-resources --standalone~.

#+begin_src emacs-lisp
(defun eat/org-export-to-html ()
  "Convert current org buffer to html with image embed.
Need pandoc installed."
  (interactive)
  (let* ((from (buffer-file-name))
         (to (concat (file-name-sans-extension from) ".html")))
    (shell-command (format "pandoc --embed-resources --standalone %s -o %s" from to))
    (find-file to)))
#+end_src

**** Markdown
#+begin_src emacs-lisp
(eat/pkg ox-gfm)
(with-eval-after-load 'ox-gfm
  (add-to-list 'org-export-backends 'md))
#+end_src
*** Writing
**** Table of content
#+begin_src elisp
(eat/pkg toc-org)
#+end_src

**** Cite
M-x ~org-cite-insert~

#+begin_src elisp
(eat/pkg citar)

(setq org-cite-global-bibliography '("~/Dropbox/bib/references.bib")
      org-cite-insert-processor 'citar
      org-cite-follow-processor 'citar
      org-cite-activate-processor 'citar
      citar-bibliography org-cite-global-bibliography)

#+end_src

**** Drag image
#+begin_src emacs-lisp
(eat/pkg org-download)

;; NOTE from doomemacs
(defmacro pushnew! (place &rest values)
  "Push VALUES sequentially into PLACE, if they aren't already present.
This is a variadic `cl-pushnew'."
  (let ((var (make-symbol "result")))
    `(dolist (,var (list ,@values) (with-no-warnings ,place))
       (cl-pushnew ,var ,place :test #'equal))))

;; HACK We add these manually so that org-download is truly lazy-loaded
(pushnew! dnd-protocol-alist
          '("^\\(?:https?\\|ftp\\|file\\|nfs\\):" . org-download-dnd)
          '("^data:" . org-download-dnd-base64))
(advice-add #'org-download-enable :override #'ignore)

(setq org-download-image-dir "img"
      org-download-image-org-width 800)
#+end_src
**** A minor mode
#+begin_src elisp
(defvar eat/prose-mode-map
  (let ((map (make-sparse-keymap)))
    (keymap-set map "C-a" #'beginning-of-visual-line)
    (keymap-set map "C-e" #'end-of-visual-line)
    map)
  "Mode map for ‘eat/prose-mode’.")

(define-minor-mode eat/prose-mode
  "A mode that optimizes for prose editing."
  :lighter " PROSE"
  :keymap eat/prose-mode-map
  (if eat/prose-mode
      (progn
        (org-variable-pitch-minor-mode 1)
        (visual-fill-column-mode 1)
        (setq-local cursor-type 'bar)
        (setq-local line-spacing 0.15)
        (setq-local whitespace-style '(tab-mark))
        (turn-off-auto-fill)
        (whitespace-mode))
    (org-variable-pitch-minor-mode -1)
    (visual-fill-column-mode -1)
    (whitespace-mode -1)
    (variable-pitch-mode -1)
    (kill-local-variable 'line-spacing)
    (kill-local-variable 'cursor-type)))
#+end_src

** Markdown
#+begin_src emacs-lisp
(eat/pkg markdown-mode)
(eat/pkg markdown-toc)

(setq markdown-enable-wiki-links t
      markdown-italic-underscore t
      markdown-asymmetric-header t
      markdown-make-gfm-checkboxes-buttons t
      markdown-gfm-uppercase-checkbox t
      markdown-fontify-code-blocks-natively t)

(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
#+end_src
* Application
** Magit
*** config
#+begin_src emacs-lisp
(eat/pkg git-modes)
(eat/pkg magit)

(add-hook 'magit-diff-visit-file #'my-recenter-and-pulse-line)

(with-eval-after-load 'magit
  (fullframe magit-status magit-mode-quit-window)
  (setq-default magit-diff-refine-hunk t))
#+end_src

*** magit-delta
#+begin_src emacs-lisp
(eat/pkg magit-delta)
(add-hook 'magit-mode-hook #'magit-delta-mode)
#+end_src

*** diff-hl
#+begin_src emacs-lisp
(eat/pkg diff-hl)

(add-hook 'prog-mode-hook #'diff-hl-mode)
(add-hook 'conf-mode-hook #'diff-hl-mode)
(add-hook 'dired-mode-hook #'diff-hl-dired-mode)

(setq diff-hl-draw-borders nil)

(with-eval-after-load 'diff-hl
  (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)
  ;; Highlight on-the-fly
  (diff-hl-flydiff-mode 1)
  (unless (display-graphic-p)
    ;; Fall back to the display margin since the fringe is unavailable in tty
    (diff-hl-margin-mode 1)
    ;; Avoid restoring `diff-hl-margin-mode'
    (with-eval-after-load 'desktop
      (add-to-list 'desktop-minor-mode-table
                   '(diff-hl-margin-mode nil)))))
#+end_src

** File Manager
*** dired
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook #'dired-hide-details-mode)

(setq dired-dwim-target t
      dired-kill-when-opening-new-dired-buffer t
      dired-auto-revert-buffer t)

(with-eval-after-load 'dired
  (setq dired-listing-switches
        "-l --almost-all --human-readable --time-style=long-iso --group-directories-first --no-group")
  (keymap-set dired-mode-map "C-c C-p" #'wdired-change-to-wdired-mode)
  (define-key dired-mode-map (kbd "h") #'dired-up-directory)
  (define-key dired-mode-map [mouse-2] #'dired-find-file))

#+end_src

*** dirvish
#+begin_src elisp
(eat/pkg dirvish)

(add-hook 'after-init-hook #'dirvish-override-dired-mode)

(setq dirvish-attributes '(vc-state subtree-state))

(when (eat/modulep '+icon)
  (add-to-list 'dirvish-attributes 'nerd-icons))

(keymap-global-set "C-c f" #'dirvish-fd)
(keymap-global-set "<f1>" #'dirvish-side)

(with-eval-after-load 'dirvish
  ;; (dirvish-side-follow-mode) ;; FIXME
  (bind dirvish-mode-map
        "TAB" #'dirvish-subtree-toggle
        "<tab>" #'dirvish-subtree-toggle
        "a" #'dirvish-quick-access
        "f" #'dirvish-file-info-menu
        "y" #'dirvish-yank-menu
        "N" #'dirvish-narrow
        "H" #'dirvish-history-jump
        "s" #'dirvish-quicksort
        "v" #'dirvish-vc-menu
        "M-f" #'dirvish-history-go-forward
        "M-b" #'dirvish-history-go-backward
        "M-l" #'dirvish-ls-switches
        "M-m" #'dirvish-mark-menu
        "M-t" #'dirvish-layout-toggle
        "M-s" #'dirvish-setup-menu
        "M-e" #'dirvish-emerge-menu
        "M-j" #'dirvish-fd-jump
        "<mouse-1>" #'dirvish-subtree-toggle-or-open
        "<mouse-2>" #'dired-mouse-find-file-other-window
        "<mouse-3>" #'dired-mouse-find-file))
#+end_src

** TODO Terminal
Use eat under linux and macos, use eshell under windows.
#+begin_src elisp
(eat/pkg eat)

(keymap-global-set "C-`" #'eat)

(with-eval-after-load 'eat
  (bind eat-mode-map "C-`" #'eat/quit))

(setq eat-kill-buffer-on-exit t)

(add-hook 'eshell-load-hook 'eat-eshell-mode)
(add-hook 'eshell-load-hook 'eat-eshell-visual-command-mode)

;; Quick editing in `describe-variable'
(with-eval-after-load 'help-fns
  (put 'help-fns-edit-variable 'disabled nil))
#+end_src

** gnus, Mail, News
#+begin_src elisp
;;; gnus
(setq
 gnus-use-cache t
 gnus-use-scoring nil
 gnus-suppress-duplicates t
 gnus-novice-user nil
 gnus-expert-user t
 gnus-interactive-exit 'quiet
 gnus-inhibit-startup-message t
 gnus-select-method '(nnnil "")
 gnus-secondary-select-methods
 `((nntp "gmane" (nntp-address "news.gmane.io"))
   (nntp "nntp.lore.kernel.org")
   (nnimap "Gmail"
           (nnimap-user ,eat/user-mail-address)
           (nnimap-inbox "INBOX")
           (nnimap-address "imap.gmail.com")
           (nnimap-stream ssl)
           (nnimap-expunge 'never)
           ;; @see http://www.gnu.org/software/emacs/manual/html_node/gnus/Expiring-Mail.html
           ;; press 'E' to expire email
           (nnmail-expiry-target "nnimap+Gmail:[Gmail]/Trash")
           (nnmail-expiry-wait 90)))
 ;; Startup functions
 gnus-save-killed-list nil
 gnus-check-new-newsgroups nil
 ;; No other newsreader is used.
 gnus-save-newsrc-file nil
 gnus-read-newsrc-file nil
 gnus-subscribe-newsgroup-method 'gnus-subscribe-interactively
 ;; Emacs 28 introduces a unified query lang
 gnus-search-use-parsed-queries t
 ;; Article mode for Gnus
 gnus-visible-headers (rx line-start (or "From"
                                         "Subject"
                                         "Mail-Followup-To"
                                         "Date"
                                         "To"
                                         "Cc"
                                         "Newsgroups"
                                         "User-Agent"
                                         "X-Mailer"
                                         "X-Newsreader")
                          ":")
 gnus-article-sort-functions '((not gnus-article-sort-by-number)
                               (not gnus-article-sort-by-date))
 gnus-article-browse-delete-temp t
 ;; Display more MINE stuff
 gnus-mime-display-multipart-related-as-mixed t
 ;; Asynchronous support for Gnus
 gnus-asynchronous t
 gnus-use-header-prefetch t
 ;; Cache interface for Gnus
 gnus-cache-enter-articles '(ticked dormant unread)
 gnus-cache-remove-articles '(read)
 gnus-cacheable-groups "^\\(nntp\\|nnimap\\)")

;; Group
(setq
 ;;          indentation ------------.
 ;;  #      process mark ----------. |
 ;;                level --------. | |
 ;;           subscribed ------. | | |
 ;;  %          new mail ----. | | | |
 ;;  *   marked articles --. | | | | |
 ;;                        | | | | | |  Ticked    New     Unread  open-status Group
 gnus-group-line-format "%M%m%S%L%p%P %1(%7i%) %3(%7U%) %3(%7y%) %4(%B%-45G%) %d\n"
 gnus-group-sort-function '(gnus-group-sort-by-level gnus-group-sort-by-alphabet))

(add-hook 'gnus-group-mode-hook #'gnus-topic-mode)

;; Summary
(setq
 ;; Pretty marks
 gnus-sum-thread-tree-root            "┌ "
 gnus-sum-thread-tree-false-root      "◌ "
 gnus-sum-thread-tree-single-indent   "◎ "
 gnus-sum-thread-tree-vertical        "│"
 gnus-sum-thread-tree-indent          "  "
 gnus-sum-thread-tree-leaf-with-other "├─►"
 gnus-sum-thread-tree-single-leaf     "╰─►"
 gnus-summary-line-format "%U%R %3d %[%-23,23f%] %B %s\n"
 ;; Threads!  I hate reading un-threaded email -- especially mailing
 ;; lists.  This helps a ton!
 gnus-summary-make-false-root 'adopt
 gnus-simplify-subject-functions '(gnus-simplify-subject-re gnus-simplify-whitespace)
 gnus-summary-thread-gathering-function 'gnus-gather-threads-by-subject
 ;; Filling in threads
 ;; 2 old articles are enough for memory
 gnus-fetch-old-headers 2
 gnus-fetch-old-ephemeral-headers 2
 gnus-build-sparse-threads 'some
 ;; More threading
 gnus-show-threads t
 gnus-thread-indent-level 2
 gnus-thread-hide-subtree nil
 ;; Sorting
 gnus-thread-sort-functions '(gnus-thread-sort-by-most-recent-date)
 gnus-subthread-sort-functions '(gnus-thread-sort-by-date)
 ;; Viewing
 gnus-view-pseudos 'automatic
 gnus-view-pseudos-separately t
 gnus-view-pseudo-asynchronously t
 ;; No auto select
 gnus-auto-select-first nil
 gnus-auto-select-next nil
 gnus-paging-select-next nil)

(add-hook 'gnus-select-group-hook #'gnus-group-set-timestamp)
(add-hook 'gnus-summary-mode-hook #'hl-line-mode)

;;; message
(add-hook 'message-mode-hook #'auto-fill-mode)
(setq message-kill-buffer-on-exit t
      message-mail-alias-type 'ecomplete
      ;; Personal Information
      user-full-name eat/user-full-name
      user-mail-address eat/user-mail-address
      message-signature user-full-name
      smtpmail-smtp-user user-mail-address
      ;; Send email through SMTP
      send-mail-function #'smtpmail-send-it
      message-send-mail-function #'message-use-send-mail-function
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)


;; read html mail
(eat/pkg w3m)
(setq mm-text-html-renderer 'w3m)
#+end_src

*** fontify patch
#+begin_src emacs-lisp
(eat/pkg fontify-patch "https://github.com/whame/fontify-patch")

(add-hook 'gnus-part-display-hook 'fontify-patch-buffer)
#+end_src

** TODO Rss
Use builtin newsticker with freshrss.

* Module
** Icon
#+begin_src elisp
(when (eat/modulep '+icon)
  ;; run `nerd-icons-install-fonts'
  (eat/pkg nerd-icons)

  ;; ttf-nerd-fonts-symbols-1000-em-mono
  (eat/pkg nerd-icons-ibuffer)
  (add-hook 'ibuffer-mode-hook #'nerd-icons-ibuffer-mode)

  (eat/pkg nerd-icons-completion)
  (add-hook 'minibuffer-setup-hook #'nerd-icons-completion-mode)
  )
#+end_src
** Telega
Need =telegram-tdlib=.
Run =docker pull zevlg/telega-server:latest=

#+begin_src elisp
(when (eat/modulep '+telega)
  (eat/pkg telega)
  (setq
   telega-avatar-workaround-gaps-for '(return t)
   telega-use-docker (executable-find "docker")
   telega-server-libs-prefix "/usr"
   telega-chat-fill-column 75
   telega-translate-to-language-by-default "zh"
   ;; send code in markdown format
   telega-chat-input-markups '("markdown2" "org")
   ;; use completing instead default ido
   telega-completing-read-function completing-read-function
   ;; 省略消息中过长的 url
   telega-url-shorten-regexps (list `(too-long-link
                                      :regexp "^\\(https?://\\)\\(.\\{55\\}\\).*?$"
                                      :symbol ""
                                      :replace "\\1\\2...")))

  (add-hook 'telega-root-mode-hook 'hl-line-mode)
  (add-hook 'telega-chat-mode-hook 'company-mode)

  (with-eval-after-load 'telega
    (add-hook 'telega-load-hook #'telega-notifications-mode)
    (add-hook 'telega-load-hook #'telega-appindicator-mode)

    (setq telega-chat-input-format "›"
          telega-animation-play-inline nil
          telega-video-play-inline nil
          ;; make sticker larger to read
          telega-sticker-size '(10 . 24)
          ;; change reply symbol
          telega-symbol-reply "↫"
          ;; set date format for old messages
          telega-old-date-format "%Y/%M/%D")

    ;; syntax highlighting in telega code
    (require 'telega-mnz)
    (global-telega-mnz-mode 1)))
#+end_src

** Blog (org-static-blog)
#+begin_src elisp
(when (eat/modulep '+blog)
  (eat/pkg org-static-blog)
  (setq org-static-blog-publish-title "404cn's blog"
        org-static-blog-publish-url "https://404cn.github.io/"
        org-static-blog-publish-directory "~/p/blog/"
        org-static-blog-posts-directory "~/p/blog/posts/"
        org-static-blog-drafts-directory "~/p/blog/drafts/"
        org-static-blog-enable-tags t
        org-static-blog-use-preview t
        org-static-blog-preview-ellipsis ""
        org-export-with-toc nil
        org-export-with-section-numbers nil)
  (with-eval-after-load 'org-static-blog
    (setq org-static-blog-page-header (get-string-from-file "~/p/blog/static/header.html")
          org-static-blog-page-preamble (get-string-from-file "~/p/blog/static/preamble.html")
          org-static-blog-page-postamble (get-string-from-file "~/p/blog/static/postamble.html"))))
#+end_src

** Note Taking (xeft)
Need =xapian-core=.

#+begin_src elisp
(when (eat/modulep '+note-taking)
  (eat/pkg xeft)
  (setq xeft-directory "~/Dropbox/org/roam"
        xeft-default-extension "org"
        xeft-database "~/.xeft/db")
  (with-eval-after-load 'xeft
    (require 'flique)
    (add-hook 'xeft-find-file-hook #'bklink-minor-mode)
    (add-hook 'bklink-minor-mode-hook #'auto-fill-mode)))
#+end_src
* Modes
#+begin_src elisp
(eat/pkg protobuf-mode)
(eat/pkg csv-mode)

(add-hook 'csv-mode-hook
          #'(lambda ()
              (setq-local auto-hscroll-mode t)))

(add-to-list 'auto-mode-alist
             (cons "/.dockerignore\\'" 'gitignore-mode))

(with-eval-after-load "protobuf-mode"
  (add-hook 'protobuf-mode-hook
            (lambda ()
              (setq imenu-generic-expression
                    '((nil "^[[:space:]]*\\(message\\|service\\|enum\\)[[:space:]]+\\([[:alnum:]]+\\)" 2))))))
#+end_src
* Site Lisp
** Load Path
#+begin_src elisp
(add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))
(add-to-list 'custom-theme-load-path (expand-file-name "themes" user-emacs-directory))
#+end_src
** Form Feed
#+begin_src elisp
(autoload #'form-feed-mode "form-feed")

(add-hook 'emacs-lisp-mode-hook #'form-feed-mode)
(add-hook 'text-mode-hook #'form-feed-mode)
(add-hook 'special-mode-hook #'form-feed-mode)
#+end_src

** Color Outline
#+begin_src elisp
(autoload #'color-outline-mode "color-outline")
(add-hook 'prog-mode-hook #'color-outline-mode)
#+end_src

** iimg
#+begin_src elisp
(autoload #'iimg-enable "iimg")
(add-hook 'text-mode-hook #'iimg-enable)
(setq iimg-prune-slices-p nil)
#+end_src
** bklink
#+begin_src elisp
(autoload #'bklink-minor-mode "bklink")
(with-eval-after-load 'bklink
  (keymap-set bklink-minor-mode-map "C-c l" #'bklink-show-back-link)
  (keymap-set bklink-minor-mode-map "C-c i" #'bklink-insert))
(setq bklink-summary-read-only-p nil
      bklink-prune-summary-p nil)
#+end_src

* Trash
** Corfu
#+begin_src elisp :tangle trash.el
(eat/pkg corfu)
(eat/pkg popon)
(eat/pkg corfu-terminal)

;; (add-hook 'after-init-hook #'(lambda () (global-corfu-mode 1)))
(add-hook 'corfu-mode-hook #'(lambda ()
                               (unless (display-graphic-p)
                                 (corfu-terminal-mode +1))
                               (corfu-popupinfo-mode)))

(setq corfu-preview-current nil
      corfu-auto-delay 0.2
      corfu-auto-prefix 2
      corfu-quit-no-match t
      corfu-quit-at-boundary t
      corfu-auto t)

(with-eval-after-load 'corfu
  ;; company can quit capf and insert mode without config
  (keymap-set corfu-map "<escape>" #'(lambda ()
                                       (interactive)
                                       (corfu-quit)
                                       (when (meow-insert-mode-p)
                                         (meow-insert-exit))))
  (keymap-set corfu-map "RET" nil))

(defun eat/yas-next-field-or-maybe-expand ()
  "Try complete current cond or `yas-next-field-or-maybe-expand'.

Sometime lsp client return a snippet and complete didn't work(TAB will jump to next field),
so try complete filst, if there nothing to complete then try to jump to next field or expand."
  (interactive)
  (or (corfu-insert) ;; NOTE this works
      (yas-next-field-or-maybe-expand)))
(with-eval-after-load 'yasnippet
  (keymap-set yas-keymap "<tab>" 'eat/yas-next-field-or-maybe-expand)
  (keymap-set yas-keymap "TAB" 'eat/yas-next-field-or-maybe-expand))
#+end_src
