#+STARTUP: fold
#+PROPERTY: header-args :tangle init.el :mkdirp yes

* Basic
** early-init.el
#+begin_src elisp :tangle early-init.el
(setq package-enable-at-startup nil
      ;; Resizing the Emacs frame can be a terribly expensive part of changing the
      ;; font. By inhibiting this, we easily halve startup times with fonts that are
      ;; larger than the system default.
      frame-inhibit-implied-resize t
      ;; After startup `gcmh' will reset this.
      gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6
      ;; Faster to disable these here (before they've been initialized)
      default-frame-alist '((scroll-bar-mode . 0)
                            (vertical-scroll-bars . nil)
                            (menu-bar-lines . 0)
                            (tool-bar-lines . 0)))
#+end_src
** Lexical Binding
#+begin_src elisp
;;; -*- lexical-binding: t -*-
#+end_src
** Variables
TODO shoult put with their packages
#+begin_src elisp
(defvar eat/user-full-name "Liu Bo")

(defvar eat/user-mail-address "liubolovelife@gmail.com")

(defvar eat/enable-icon t
  "Whether to enable `all-the-icons'.")

(defvar eat/enable-benchmark nil
  "Enable `benchmark-init', run `benchmark-init/show-durations-tree' to see result.")
#+end_src
** Consts
#+begin_src elisp
(defconst eat/macp
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst eat/linuxp
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")
#+end_src
** Functions
#+begin_src elisp
(defun eat/delete-to-the-begining ()
  (interactive)
  (delete-region (point-min) (point)))

(defun eat/delete-to-the-end ()
  (interactive)
  (delete-region (point) (point-max)))

(defun eat/delete-whole-buffer ()
  (interactive)
  (delete-region (point-min) (point-max)))

(defun eat/delete-this-file ()
  "Delete the current file, and kill the buffer."
  (interactive)
  (unless (buffer-file-name)
    (error "No file is currently being edited"))
  (when (yes-or-no-p (format "Really delete '%s'?"
                             (file-name-nondirectory buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-this-buffer)))

(defun eat/rename-this-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (unless filename
      (error "Buffer '%s' is not visiting a file!" name))
    (progn
      (when (file-exists-p filename)
        (rename-file filename new-name 1))
      (set-visited-file-name new-name)
      (rename-buffer new-name))))

(defun get-string-from-file (filePath)
  "Return file content as string."
  (with-temp-buffer
    (insert-file-contents filePath)
    (buffer-string)))
#+end_src
** Proxy
#+begin_src elisp
(defvar eat/proxy "127.0.0.1:7890"
  "Network proxy address.")

(defun eat/proxy-show ()
  "Show proxy."
  (interactive)
  (if (or url-proxy-services (bound-and-true-p socks-noproxy))
      (message "Current proxy is `%s'" eat/proxy)
    (message "No proxy")))

(defun eat/proxy-enable ()
  "Enable proxy."
  (interactive)
  (setq url-proxy-services
        `(("http" . ,eat/proxy)
          ("https" . ,eat/proxy)
          ("no_proxy" . "^\\(localhost\\|192.168.*\\|10.*\\)")))
  (require 'socks)
  (setq url-gateway-method 'socks
        socks-noproxy '("localhost"))
  (let* ((proxy (split-string eat/proxy ":"))
         (host (car proxy))
         (port (string-to-number (cadr proxy))))
    (setq socks-server `("Default server" ,host ,port 5)))
  (setenv "all_proxy" (concat "socks5://" eat/proxy))
  (eat/proxy-show))

(defun eat/proxy-disable ()
  "Disable proxy."
  (interactive)
  (setq url-proxy-services nil)
  (setq url-gateway-method 'native
        socks-noproxy nil
        socks-server nil)
  (setenv "all_proxy" "")
  (eat/proxy-show))

(defun eat/proxy-toggle ()
  "Toggle proxy."
  (interactive)
  (if (or (bound-and-true-p url-proxy-services) (bound-and-true-p socks-noproxy))
      (eat/proxy-disable)
    (eat/proxy-enable)))
#+end_src
** Load custom file
#+begin_src elisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (and (file-exists-p custom-file)
           (file-readable-p custom-file))
  (load custom-file :no-error :no-message))
#+end_src
** Frame
#+begin_src elisp
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

(defvar eat/after-make-console-frame-hooks '()
  "Hooks to run after creating a new TTY frame")
(defvar eat/after-make-window-system-frame-hooks '()
  "Hooks to run after creating a new window-system frame")

(defun eat/run-after-make-frame-hooks (frame)
  "Run configured hooks in response to the newly-created FRAME.
Selectively runs either `eat/after-make-console-frame-hooks' or
`eat/after-make-window-system-frame-hooks'"
  (with-selected-frame frame
    (run-hooks (if window-system
                   'eat/after-make-window-system-frame-hooks
                 'eat/after-make-console-frame-hooks))))

(add-hook 'after-make-frame-functions 'eat/run-after-make-frame-hooks)

(defconst eat/initial-frame (selected-frame)
  "The frame (if any) active during Emacs initialization.")

(add-hook 'after-init-hook
          (lambda () (when eat/initial-frame
                       (eat/run-after-make-frame-hooks eat/initial-frame))))
#+end_src
** Optimization
#+begin_src elisp
(setq package-enable-at-startup nil
      frame-inhibit-implied-resize t
      gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6
      default-frame-alist '((scroll-bar-mode . 0)
                            (vertical-scroll-bars . nil)
                            (menu-bar-lines . 0)
                            (tool-bar-lines . 0)))

(defun eat/show-startup-time ()
  "Print startup time."
  (message
   "Emacs loaded in %s with %d garbage collections."
   (format
    "%.2f seconds"
    (float-time
     (time-subtract after-init-time before-init-time)))
   gcs-done))
(add-hook 'emacs-startup-hook #'eat/show-startup-time)

;; GC automatically while unfocusing the frame
(add-function :after after-focus-change-function
              (lambda ()
                (unless (frame-focus-state)
                  (garbage-collect))))

;; Speed up startup
(setq auto-mode-case-fold nil)

;; Optimization
(setq idle-update-delay 1.0)

;; Don't ping things that look like domain names.
(setq ffap-machine-p-known 'reject)

;; The nano style for truncated long lines.
(setq auto-hscroll-mode 'current-line)

  ;; for mouse scroll
(setq dired-mouse-drag-files t
      mouse-drag-and-drop-region t
      mouse-drag-and-drop-region-cross-program t)
(add-hook 'after-init-hook (lambda () (pixel-scroll-precision-mode)))

;; scroll nand hscroll
(setq-default
 scroll-step 2
 scroll-margin 2
 hscroll-step 2                                     ; Horizontal Scroll
 hscroll-margin 2
 scroll-conservatively 101
 scroll-up-aggressively 0.01
 scroll-down-aggressively 0.01
 scroll-preserve-screen-position 'always
 auto-window-vscroll nil
 fast-but-imprecise-scrolling nil
 mouse-wheel-scroll-amount '(1 ((shift) . hscroll)) ; use shift + mouse wheel to scrll horizontally
 mouse-wheel-progressive-speed nil)

;; Contrary to what many Emacs users have in their configs, you don't need
;; more than this to make UTF-8 the default coding system:
(set-language-environment "UTF-8")

;; Disable cursor blink
(add-hook 'after-init-hook (lambda () (blink-cursor-mode -1)))

;; Do not show cursor in nonselected windows
(setq-default cursor-in-non-selected-windows nil)

;; Suppress GUI features and more
(setq use-file-dialog nil
      use-dialog-box nil
      inhibit-splash-screen t
      inhibit-x-resources t
      inhibit-default-init t
      inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-buffer-menu t)

(setq fast-but-imprecise-scrolling t)
(setq redisplay-skip-fontification-on-input t)

;; Pixelwise resize
(setq ;; window-resize-pixelwise nil ;; NOTE this cause lsp-bridge-ref buffer didn't show
 frame-resize-pixelwise t)

;; Shut up!
(defun display-startup-echo-area-message()
  (message nil))

;; indent with whitespace by default
(setq-default
 tab-width 4
 indent-tabs-mode nil)

;; Disable default auto backup and save file
(setq-default
 create-lockfiles nil                               ; Don't create lockfiles
 make-backup-files nil                              ; Disable auto save and backup
 auto-save-default nil
 auto-save-list-file-prefix nil)

(setq
 initial-scratch-message (concat ";; Happy hacking, " user-login-name " - Emacs ♥ you!\n\n")
 initial-major-mode 'fundamental-mode               ; Don't use prog-mode an stratup
 ring-bell-function 'ignore
 read-process-output-max (* 4 1024 1024)
 suggest-key-bindings nil                           ; Disable "You can run the command balabala..."
 word-wrap-by-category t                            ; Emacs 之光！
 use-short-answers t                                ; yse-or-no -> y-or-n
 suggest-key-bindings nil
 enable-recursive-minibuffers t
 )

(setq-default
 inhibit-compacting-font-caches t                   ; Don’t compact font caches during GC.
 require-final-newline t                            ; add final newline
 visible-cursor t
 bidi-inhibit-bpa t                                 ; Improve long line display performance
 bidi-paragraph-direction 'left-to-right
 echo-keystrokes 0.01                               ; don't wait for keystrokes display
 warning-suppress-log-types '((comp))               ; Don't display compile warnings
 truncate-partial-width-windows 65                  ; Don't truncate lines in a window narrower than 65 chars.
 vc-follow-symlinks t                               ; always follow link
 server-client-instructions nil                     ; no client startup messages
 split-height-threshold nil                         ; prefer horizental split
 split-width-threshold 120
 )
#+end_src

** Package wrapper
#+begin_src elisp
;;; eat-package
;;;; Commentary:

;; Base on luna-load-package.el

;;;; Code:

(require 'pcase)

;;;; Variables

(defvar eat-all-packages-daemon t
  "If it's value is t, all package in `eat-package' will be required in dameon.")

(defconst eat--all-packages-p
  (and eat-all-packages-daemon (daemonp))
  "")

;;;; Functions

(defun eat-package-split-command-args (args)
  "Split args into commands and args.
If ARGS is (:command args args args :command args),
return: ((:command . (args args args)) (:command . (args)))."
  (let (ret-list arg-list command)
    (dolist (token (append args '(:finish)))
      (if (keywordp token)
          ;; Finish previous command
          (progn (if command (push (cons command (reverse arg-list))
                                   ret-list))
                 (setq arg-list nil)
                 ;; Start new command
                 (setq command token))
        (push token arg-list)))
    (reverse ret-list)))

(defun eat-package--handle-hook (arg-list package)
  "Handle hook arguments.
Each ARG in ARG-LIST is a cons (HOOK . FUNCTION).
HOOK can be either a single hook or a list of hooks.
FUNCTION can also be either a single function or a list of them.
PACKAGE is the package we are configuring."
  (let (ret-list hook-list func-list)
    (dolist (arg arg-list)
      (let ((hook (car arg))
            (func (cdr arg)))
        ;; Normalize to lists.
        (setq hook-list
              (if (symbolp hook) (list hook) hook))
        (setq func-list
              (if (or (symbolp func)
                      ;; Handle lambda correctly.
                      (functionp func))
                  (list func) func)))
      ;; Produce add-hook forms.
      (dolist (func func-list)
        ;; If FUNC is a lambda function, we can't autoload it,
        ;; Make it load the package before execution.
        (let ((func (if (not (symbolp func))
                        ;; We don't want closure.
                        `(lambda () (require ',package) (funcall ,func))
                      func)))
          (dolist (hook hook-list)
            (push `(add-hook ',hook #',func) ret-list)))))
    (reverse ret-list)))

(defun eat-package--collect-autoload (arg-list package)
  "Collect functions that needs autoload from ARG-LIST.
PACKAGE is the package we are loading.
Return a list of (autoload ...) forms."
  (let ((autoload
          (mapcan (lambda (arg)
                    (let ((command (car arg))
                          (arg-list (cdr arg)))
                      (pcase command
                        ;; ARG is either (hook . fn) or
                        ;;               ((hook ...) . fn) or
                        ;;               (hook . (fn ...))
                        (:hook (mapcan (lambda (arg)
                                         (let ((fn (cdr arg)))
                                           (if (or (symbolp fn)
                                                   ;; Handle lambda.
                                                   (functionp fn))
                                               (list fn)
                                             fn)))
                                       arg-list))
                        ;; ARG is either ".xxx" or (".xxx" . mode)
                        (:mode (mapcar (lambda (arg)
                                         (if (stringp arg)
                                             package
                                           (cdr arg)))
                                       arg-list)))))
                  arg-list)))
    (mapcar (lambda (fn)
              (if (symbolp fn)
                  `(autoload #',fn ,(symbol-name package) nil t)))
            autoload)))

(defmacro eat-package (package &rest args)
  "Like ‘use-package’.
PACKAGE is the package you are loading.
Available COMMAND:

  :init         Run right away.
  :config       Run after package loads.
  :hook         Each arguments is (HOOK . FUNC)
                HOOK and FUNC can be a symbol or a list of symbols.
  :mode         Add (ARG . PACKAGE) to ‘auto-mode-alist’. If ARG is
                already a cons, add ARG to ‘auto-mode-alist’.
  :commands     Add autoload for this command.
  :after        Require after this package loads.
  :reqire       Require this package right now.
  :straight     Install package via straight

Each COMMAND can take zero or more ARG. Among these commands,
:hook, :commands, and :after expect literal arguments, :init,
:config expect s-expressions, which are evaluated after
expansion of the macro.

ARGS.

\(fn PACKAGE &rest [COMMAND [ARG ...]] ...)"
  (declare (indent 1))
  ;; Group commands and arguments together.
  (let* ((arg-list (eat-package-split-command-args args))
         ;; Translate commands & arguments to valid
         ;; config code.
         (body
          (mapcan
           (lambda (arg)
             (let ((command (car arg))
                   (arg-list (cdr arg)))
               (pcase command
                 (:straight `((if (listp ',@arg-list)
                                  (straight-use-package ',@arg-list)
                                (straight-use-package ',package))))
                 (:elpaca `((if (listp ',@arg-list)
                                (elpaca ,@arg-list)
                              (elpaca ,package))))
                 (:init arg-list)
                 (:config `((with-eval-after-load ',package
                              ,@arg-list)))
                 (:hook (eat-package--handle-hook arg-list package))
                 (:mode
                  ;; ARG is either ".xxx" or (".xxx" . mode)
                  (mapcar
                   (lambda (arg)
                     (let ((pattern (if (consp arg) (car arg) arg))
                           (mode-fn (if (consp arg) (cdr arg) package)))
                       `(add-to-list 'auto-mode-alist
                                     ',(cons pattern mode-fn))))
                   arg-list))
                 (:commands
                  (mapcar (lambda (cmd)
                            `(autoload ',cmd ,(symbol-name package) nil t))
                          arg-list))
                 (:after
                  (mapcar (lambda (pkg)
                            `(with-eval-after-load ',pkg
                               (require ',package)))
                          arg-list)))))
           arg-list))
         (autoload-list (eat-package--collect-autoload arg-list package))
         ;; Must :require explicitly if you want to require this package.
         (require-p (let ((commands (mapcar #'car arg-list)))
                      (or (memq :require commands)))))
    `(condition-case err
         (progn
           ,@autoload-list
           ,@body
           (if eat--all-packages-p
               (require ',package)
             ,(when require-p `(require ',package))))
       ((debug error) (warn "Error when loading %s: %s" ',package
                            (error-message-string err))))))
#+end_src

** PATH
#+begin_src elisp
;;; Setup PATH
;; https://emacs-china.org/t/emacs-mac-port-profile/2895/29?u=rua
;; NOTE: When PATH is changed, run the following command
;; $ sh -c 'printf "%s" "$PATH"' > ~/.path
(defun eat/getenv-path()
  (interactive)
  (condition-case err
      (let ((path (with-temp-buffer
                    (insert-file-contents-literally "~/.path")
                    (buffer-string))))
        (setenv "PATH" path)
        (setq exec-path (append (parse-colon-path path) (list exec-directory))))
    (error (warn "%s" (error-message-string err)))))
#+end_src

** For MacOS
#+begin_src elisp
(when eat/macp
  (setq mac-option-modifier 'meta
        mac-command-modifier 'super
        ;; Render thinner fonts
        ns-use-thin-smoothing t
        ;; Don't open a file in a new frame
        ns-pop-up-frames nil)

  (add-hook 'after-init-hook #'eat/getenv-path)

  (global-set-key [(super a)] #'mark-whole-buffer)
  (global-set-key [(super v)] #'yank)
  (global-set-key [(super c)] #'kill-ring-save)
  (global-set-key [(super s)] #'save-buffer)
  (global-set-key [(super l)] #'goto-line)
  (global-set-key [(super w)] #'delete-frame)
  (global-set-key [(super z)] #'undo)
  ;; `save-buffers-kill-emacs' will shutdown emacs daemon
  (global-set-key [(super q)] #'save-buffers-kill-terminal))
#+end_src

** For Linux
#+begin_src elisp
(when eat/linuxp
  (setq x-underline-at-descent-line t)
  (setq-default
   ;; Don't use Fcitx5 in Emacs in PGTK build
   pgtk-use-im-context-on-new-connection nil
   x-gtk-resize-child-frames nil)

  ;; Don't use GTK+ tooltip
  (when (boundp 'x-gtk-use-system-tooltips)
    (setq x-gtk-use-system-tooltips nil)))
#+end_src

** Dvorak
#+begin_src elisp
;; Make “C-t” act like “C-x”, so it's easier to type on Dvorak layout
(keyboard-translate ?\C-t ?\C-x)
(keyboard-translate ?\C-x ?\C-t)
;; use C-u to forward, the origin C-u map to C-c C-u
(global-set-key (kbd "C-u") #'forward-char)
(global-set-key (kbd "C-x C-u") #'universal-argument)
#+end_src

** Key bindings
#+begin_src elisp
;; bind `describe-keymap', added in emacs 28
(global-set-key (kbd "C-h C-k") #'describe-keymap)

;; this will stuck emacs
(global-unset-key (kbd "C-h h"))

;; http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))
(global-set-key [remap move-beginning-of-line] #'smarter-move-beginning-of-line)
#+end_src

** Built-in packages
#+begin_src elisp
(eat-package repeat
  :init
  (setq repeat-mode t
        repeat-keep-prefix t
        repeat-exit-timeout 3
        repeat-exit-key (kbd "RET")))

(eat-package mouse
    :hook (after-init-hook . context-menu-mode))

(eat-package simple
  :hook (before-save-hook . delete-trailing-whitespace)
  :init
  (setq visual-line-fringe-indicators '(nil right-curly-arrow)
        ;; List only applicable commands.
        read-extended-command-predicate #'command-completion-default-include-p
        fill-column 72))

(eat-package webjump
  :init
  (global-set-key (kbd "C-x C-/") #'webjump)
  (setq webjump-sites
        '(("Emacs Wiki" .
           [simple-query "www.emacswiki.org" "www.emacswiki.org/cgi-bin/wiki/" #1=""])
          ("Emacs China" . "emacs-china.org")
          ("Emacs Reddit" . "www.reddit.com/r/emacs/")
          ("Emacs News" . "sachachua.com/blog/category/emacs-news/")
          ("Github" .
           [simple-query "github.com" "github.com/search?q=" #1#])
          ("DuckDuckGo" .
           [simple-query "duckduckgo.com" "duckduckgo.com/?q=" #1#])
          ("Google" .
           [simple-query "google.com" "google.com/search?q=" #1#])
          ("Youtube" .
           [simple-query "youtube.com" "youtube.com/results?search_query=" #1#])
          ("Google Groups" .
           [simple-query "groups.google.com" "groups.google.com/groups?q=" #1#])
          ("stackoverflow" .
           [simple-query "stackoverflow.com" "stackoverflow.com/search?q=" #1#])
          ("Wikipedia" .
           [simple-query "wikipedia.org" "wikipedia.org/wiki/" #1#]))))

(eat-package outline
  :init
  (setq outline-minor-mode-cycle t
        outline-minor-mode-highlight t))

(eat-package recentf
  :hook (after-init-hook . recentf-mode)
  :init
  (setq
   recentf-max-saved-items 1000
   recentf-exclude `(,tramp-file-name-regexp
                     "COMMIT_EDITMSG"))
  (global-set-key (kbd "C-x C-r") #'recentf-open-files))

(eat-package goto-addr
  :hook (after-init-hook . global-goto-address-mode))
#+end_src

** Package Manager(straight.el)
#+begin_src elisp
;;; Bootstrap straight.el
;; https://www.reddit.com/r/emacs/comments/mtb05k/emacs_init_time_decreased_65_after_i_realized_the/
(setq straight-check-for-modifications '(check-on-save find-when-checking))
(setq straight-vc-git-default-clone-depth 1)

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))


(declare-function elpaca-generate-autoloads "elpaca")
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(when-let ((elpaca-repo (expand-file-name "repos/elpaca/" elpaca-directory))
           (elpaca-build (expand-file-name "elpaca/" elpaca-builds-directory))
           (elpaca-target (if (file-exists-p elpaca-build) elpaca-build elpaca-repo))
           (elpaca-url  "https://www.github.com/progfolio/elpaca.git")
           ((add-to-list 'load-path elpaca-target))
           ((not (file-exists-p elpaca-repo)))
           (buffer (get-buffer-create "*elpaca-bootstrap*")))
  (condition-case-unless-debug err
      (progn
        (unless (zerop (call-process "git" nil buffer t "clone" elpaca-url elpaca-repo))
          (error "%s" (list (with-current-buffer buffer (buffer-string)))))
        (byte-recompile-directory elpaca-repo 0 'force)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" elpaca-repo)
        (kill-buffer buffer))
    ((error)
     (delete-directory elpaca-directory 'recursive)
     (with-current-buffer buffer
       (goto-char (point-max))
       (insert (format "\n%S" err))
       (display-buffer buffer)))))
(require 'elpaca-autoloads)
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca (elpaca :host github :repo "progfolio/elpaca"))
#+end_src
** Performance
*** benchmark start up
#+begin_src elisp
(eat-package benchmark-init
  :staright t
  :init
  (when eat/enable-benchmark
    (benchmark-init/activate))
  :config
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
*** gc
#+begin_src elisp
(eat-package gcmh
  :straight t
  :hook (after-init-hook . gcmh-mode)
  :init
  (setq gcmh-idle-delay 5
        gcmh-high-cons-threshold #x6400000)) ;; 100 MB
#+end_src
** Lib
#+begin_src elisp
(eat-package all-the-icons :elpaca t)
(eat-package async :elpaca t)

;; 拼音搜索
(eat-package pinyinlib
  :elpaca t
  :commands
  pinyinlib-build-regexp-char
  pinyinlib-build-regexp-string)

(eat-package fullframe :elpaca t)
#+end_src
* UI
** Theme
*** better default
#+begin_src elisp
(defvar eat/theme 'modus-operandi
  "Default theme.")

(defvar eat/theme-tui 'default
  "Default theme used in tui.")

(defvar eat/theme-system-light 'modus-operandi
  "Default light theme after system appearance changed.")

(defvar eat/theme-system-dark 'modus-vivendi
  "Default dark theme after system appearance changed.")

(defvar luna-load-theme-hook nil)

;;;; Functions

(defun eat/load-theme (theme)
  (interactive
   (list
    (intern (completing-read "Theme: "
                             (mapcar #'symbol-name
				                     (custom-available-themes))))))
  (mapc #'disable-theme custom-enabled-themes)
  (if (featurep (intern (format "%s-theme" theme)))
      ;; We can save a lot of time by only enabling the theme.
      (enable-theme theme)
    (load-theme theme t))
  (run-hooks 'luna-load-theme-hook))
(global-set-key [remap load-theme] #'eat/load-theme)

(defun eat/adjust-opacity (frame incr)
  "Adjust the background opacity of FRAME by increment INCR."
  (unless (display-graphic-p frame)
    (error "Cannot adjust opacity of this frame"))
  (let* ((oldalpha (or (frame-parameter frame 'alpha-background) 100))
         (oldalpha (if (listp oldalpha) (car oldalpha) oldalpha))
         (newalpha (+ incr oldalpha)))
    (when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
      (modify-frame-parameters frame (list (cons 'alpha-background newalpha))))))
(global-set-key (kbd "M-C-8") (lambda () (interactive) (eat/adjust-opacity nil -2)))
(global-set-key (kbd "M-C-9") (lambda () (interactive) (eat/adjust-opacity nil 2)))
(global-set-key (kbd "M-C-7") (lambda () (interactive) (modify-frame-parameters nil `((alpha-background . 100)))))

;; for macos, load theme after system appearance changed
(when (boundp 'ns-system-appearance)
  (add-to-list 'ns-system-appearance-change-functions
               (lambda (l?d)
                 (if (eq l?d 'light)
                     (eat/load-theme eat/theme-system-light)
                   (eat/load-theme eat/theme-system-dark)))))

(add-hook 'eat/after-make-console-frame-hooks (lambda ()
                                                (when (fboundp 'menu-bar-mode)
                                                  (menu-bar-mode -1))
                                                (when eat/theme-tui
                                                  (eat/load-theme eat/theme-tui))))

(add-hook 'eat/after-make-window-system-frame-hooks (lambda ()
                                                      (eat/load-theme eat/theme)))
#+end_src

*** installed
#+begin_src elisp
(elpaca spacemacs-theme)
(elpaca kaolin-themes)
(elpaca (notink-theme :host github :repo "MetroWind/notink-theme"))
(elpaca (ef-themes :host github :repo "protesilaos/ef-themes"))
(elpaca (matrix-emacs-theme :host github :repo "monkeyjunglejuice/matrix-emacs-theme"))
(elpaca catppuccin-theme)

(setq
 spacemacs-theme-comment-italic t
 spacemacs-theme-keyword-italic t
 spacemacs-theme-org-agenda-height t
 spacemacs-theme-org-bold t
 spacemacs-theme-org-height t
 spacemacs-theme-org-highlight t
 spacemacs-theme-org-priority-bold t
 spacemacs-theme-org-bold t
 spacemacs-theme-underline-parens t)

(setq
 kaolin-themes-underline-wave nil
 kaolin-themes-modeline-border nil
 kaolin-themes-modeline-padded 4)

(with-eval-after-load 'kaolin-themes
  (with-eval-after-load 'treemacs
    (with-eval-after-load 'all-the-icons
      (kaolin-treemacs-theme))))
#+end_src

*** local
**** Load Path
#+begin_src elisp
(add-to-list 'custom-theme-load-path (expand-file-name "themes" user-emacs-directory))
#+end_src
**** nano
#+begin_src elisp :tangle themes/nano-theme.el
;;; nano-theme.el --- A theme split from nano-emacs  -*- lexical-binding: t; -*-

;; Copyright (C) 2021-2022 LiuBo

;; Author: LiuBo <https://github.com/404cn>
;; Created: May 30, 2021
;; Version: 1.0.0
;; Keywords: theme
;; Homepage: https://github.com/404cn/nano-theme.el
;; Package-Requires: ((emacs "28.0.50"))

;;
;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.


;;; Commentary:

;;; A theme split from nano-emacs.

;;; Code:

(deftheme nano "Theme split from nano-emacs")

(defgroup nano-theme nil
  "Options of nano theme."
  :group 'faces)

(defcustom nano-theme-light/dark 'light
  "Nano theme uses light theme or dark theme?"
  :type 'symbol
  :group 'nano-theme)

(defun nano-theme--light?dark (light dark)
  "Determine using the LIGHT or the DARK color of nano-theme."
  (if (eq nano-theme-light/dark 'light)
      light
    dark))
(defalias '--l?d #'nano-theme--light?dark)

(defun nano-theme-toggle ()
  "Toggle between light/dark nano theme"
  (interactive)
  (if (eq nano-theme-light/dark 'light)
      (setq nano-theme-light/dark 'dark)
    (setq nano-theme-light/dark 'light))
  (mapc #'disable-theme custom-enabled-themes)
  (load-theme 'nano))

(let ((foreground (--l?d "#37474F" "#ECEFF4"))
      (background (--l?d "#FFFFFF" "#2E3440"))
      (highlight  (--l?d "#FAFAFA" "#3B4252"))
      (critical   (--l?d "#FF6F00" "#EBCB8B"))
      (salient    (--l?d "#673AB7" "#81A1C1"))
      (strong     (--l?d "#263238" "#FFFFFF"))
      (popout     (--l?d "#FFAB91" "#D08770"))
      (subtle     (--l?d "#ECEFF1" "#434C5E"))
      (faded      (--l?d "#90A4AE" "#677691")))
  (custom-theme-set-faces
   `nano
   ;; Basic
   `(default                    ((((type tty)))
                                 (((type graphic)) :background ,background :foreground ,foreground)))
   `(shadow                     ((t (:foreground ,faded))))
   `(link                       ((t (:foreground ,salient))))
   `(link-visited               ((t (:foreground ,salient))))
   `(highlight                  ((t (:background ,highlight))))
   `(match                      ((t (:foreground ,popout))))
   `(isearch                    ((t (:background ,subtle :box (:line-width (-1 . -1))))))
   `(lazy-highlight             ((t (:background ,subtle :box (:line-width (-1 . -1))))))
   `(warning                    ((t (:foreground ,popout))))
   `(success                    ((t (:foreground ,faded))))
   `(cursor                     ((t (:background ,foreground))))
   `(fringe                     ((t (:foreground ,faded))))
   `(show-paren-match           ((t (:box (:line-width (-1 . -1))))))
   `(hl-line                    ((t (:background ,highlight))))
   `(region                     ((t (:background ,subtle))))
   `(line-number                ((t (:foreground ,faded))))
   `(line-number-current-line   ((t (:foreground ,strong))))
   `(minibuffer-prompt          ((t (:foreground ,strong))))
   `(vertical-border            ((t (:foreground ,subtle))))
   `(window-divider             ((t (:foreground ,subtle))))
   `(window-divider-first-pixel ((t (:foreground ,subtle))))
   `(window-divider-last-pixel  ((t (:foreground ,subtle))))
   `(fill-column-indicator      ((t (:foreground ,strong))))
   `(trailing-whitespace        ((t (:background ,subtle))))
   `(completions-common-part    ((t (:foreground ,faded))))
   `(secondary-selection        ((t (:background ,subtle))))
   `(header-line                ((t ( :background ,subtle :foreground ,strong
                                      :box (:line-width 2 :style released-button)))))

   ;; Font Locks
   `(font-lock-comment-face           ((t (:foreground ,faded))))
   `(font-lock-comment-delimiter-face ((t (:foreground ,faded))))
   `(font-lock-keyword-face           ((t (:foreground ,salient))))
   `(font-lock-string-face            ((t (:foreground ,popout))))
   `(font-lock-doc-face               ((t (:foreground ,faded))))
   `(font-lock-builtin-face           ((t ())))
   `(font-lock-type-face              ((t ())))
   `(font-lock-variable-name-face     ((t ())))
   `(font-lock-constant-face          ((t (:foreground ,salient))))
   `(font-lock-function-name-face     ((t (:foreground ,strong :underline t))))
   `(font-lock-warning-face           ((t ())))
   `(font-lock-preprocessor-face      ((t ())))

   ;; Eldoc
   `(eldoc-highlight-function-argument ((t (:foreground ,strong :bold t))))

   ;; Outline
   `(outline-1 ((t (:foreground ,foreground :bold t :slant italic))))
   `(outline-2 ((t (:inherit outline-1))))
   `(outline-3 ((t (:inherit outline-1))))
   `(outline-4 ((t (:inherit outline-1))))
   `(outline-5 ((t (:inherit outline-1))))
   `(outline-6 ((t (:inherit outline-1))))
   `(outline-7 ((t (:inherit outline-1))))
   `(outline-8 ((t (:inherit outline-1))))

   ;; magit
   `(magit-diff-hunk-heading ((t (:background ,subtle))))

   ;; Agenda
   `(org-agenda-calendar-event   ((t (:foreground ,foreground :background ,background))))
   `(org-agenda-calendar-sexp    ((t (:foreground ,salient))))
   `(org-agenda-clocking         ((t (:foreground ,faded))))
   `(org-agenda-column-dateline  ((t (:foreground ,faded))))
   `(org-agenda-current-time     ((t (:foreground ,foreground :bold t))))
   `(org-agenda-date             ((t (:foreground ,salient))))
   `(org-agenda-date-today       ((t (:foreground ,salient :bold t))))
   `(org-agenda-date-weekend     ((t (:foreground ,faded))))
   `(org-agenda-diary            ((t (:foreground ,faded))))
   `(org-agenda-dimmed-todo-face ((t (:foreground ,faded))))
   `(org-agenda-done             ((t (:foreground ,faded))))
   `(org-agenda-filter-category  ((t (:foreground ,faded))))
   `(org-agenda-filter-effort    ((t (:foreground ,faded))))
   `(org-agenda-filter-regexp    ((t (:foreground ,faded))))
   `(org-agenda-filter-tags      ((t (:foreground ,faded))))
   `(org-agenda-restriction-lock ((t (:foreground ,faded))))
   `(org-agenda-structure        ((t (:foreground ,foreground :bold t))))

   ;; Notmuch
   `(notmuch-tag-face             ((t (:foreground ,faded))))
   `(notmuch-search-date          ((t (:foreground ,faded))))
   `(notmuch-tag-deleted          ((t (:strike-through ,popout))))
   `(notmuch-tag-added            ((t (:underline ,popout))))
   `(notmuch-wash-cited-text      ((t (:foreground ,faded))))
   `(notmuch-message-summary-face ((t (:foreground ,strong :bold t :background ,subtle))))

   ;; Mode Line
   `(mode-line          ((t ( :background ,foreground :foreground ,background))))
   `(mode-line-inactive ((t ( :background ,faded :foreground ,background))))

   ;; tab-bar
   `(tab-bar                    ((t (:background ,background :foreground ,foreground))))
   `(tab-bar-tab-group-current  ((t ())))
   `(tab-bar-tab                ((t (:inverse-video t :bold t))))
   `(tab-bar-tab-group-inactive ((t ())))
   `(tab-bar-tab-inactive       ((t (:inherit shadow))))

   ;; solaire Mode
   `(solaire-default-face             ((t (:inherit default :background ,highlight))))

   ;; Orderless
   `(orderless-match-face-0           ((t (:foreground ,strong :bold t))))
   `(orderless-match-face-1           ((t (:foreground ,strong :bold t))))
   `(orderless-match-face-2           ((t (:foreground ,strong :bold t))))
   `(orderless-match-face-3           ((t (:foreground ,strong :bold t))))

   ;; Eshell
   `(eshell-prompt                    ((t (:foreground ,popout :bold t))))

   ;; telega
   `(telega-msg-inline-reply ((t (:foreground ,faded))))
   `(telega-msg-heading      ((t (:underline t))))

   ;; which-func
   `(which-func ((t (:foreground ,highlight))))

   ;; Imenu-ist
   `(imenu-list-entry-subalist-face-0 ((t (:foreground ,strong :weight bold :underline t))))
   `(imenu-list-entry-subalist-face-1 ((t (:foreground ,salient :weight bold :underline t))))
   `(imenu-list-entry-subalist-face-2 ((t (:foreground ,popout :weight bold :underline t))))
   `(imenu-list-entry-subalist-face-3 ((t (:foreground ,critical :weight bold :underline t))))
   `(imenu-list-entry-face-0          ((t (:foreground ,strong))))
   `(imenu-list-entry-face-1          ((t (:foreground ,salient))))
   `(imenu-list-entry-face-2          ((t (:foreground ,popout))))
   `(imenu-list-entry-face-3          ((t (:foreground ,critical))))))

;;;###autoload
(and load-file-name
     (boundp 'custom-theme-load-path)
     (add-to-list 'custom-theme-load-path
                  (file-name-as-directory
                   (file-name-directory load-file-name))))

(provide-theme 'nano)

;;; nano-theme.el ends here
#+end_src
**** carbon
#+begin_src elisp :tangle themes/carbon-theme.el
;;; carbon-theme.el --- A minimal dark theme  -*- lexical-binding: t; -*-

;; Author: Shi Tianshu
;; Keywords: theme
;; Package-Requires: ((emacs "28.0.50"))
;; Version: 1.0.2

;;
;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.


;;; Commentary:

;;; This is a minimal light theme.

;;; Code:

(deftheme carbon "A minimal light theme.")

(defvar carbon-theme-header-scales '(1.0 1.0 1.0 1.0 1.0 1.0 1.0)
  "Scales for headers.")

(let ((bg "#202020")
      (fg "#A0A0A0")
      (cm "#707070")
      (rg "#024347")
      (hl "#2A2A2A")
      (lh "#0DA59B")
      (ss "#353535")
      (kw "#EEEEEE")
      (fn "#bfaa6b")
      (st "#4b9e6b")
      (str "#4a95b5")
      (num "#9466a5")
      (doc "#cc725b")
      (cur "#EFEFEF")
      (pop "#272727")
      (tb "#000000"))
  (custom-theme-set-faces
   `carbon
   ;; We don't specify default foreground/background in TTY.
   `(default                        ((((type tty)))
                                     (((type graphic)) :background ,bg :foreground ,fg)))
   ;; Basics
   `(cursor                         ((t (:background ,cur))))
   `(region                         ((t (:background ,rg :extend nil))))
   `(hl-line                        ((t (:background ,hl))))
   `(fringe                         ((t (:background ,bg))))
   `(show-paren-match               ((t (:background ,hl :box (:line-width (-1 . -1) :style nil)))))
   `(highlight                      ((t (:inverse-video t))))
   `(button                         ((t (:box (:line-width (-1 . -1))))))
   `(vertical-border                ((t ())))
   `(window-divider                 ((t (:foreground ,cm))))
   `(window-divider-first-pixel     ((t (:foreground ,cm))))
   `(window-divider-last-pixel      ((t (:foreground ,cm))))
   `(line-number                    ((t (:foreground ,cm))))
   `(line-number-current-line       ((t (:foreground ,fn :background ,hl))))
   `(completions-common-part        ((t ())))
   `(minibuffer-prompt              ((t ())))
   `(lazy-highlight                 ((t (:foreground ,lh :underline t))))
   `(compilation-info               ((t ())))
   `(compilation-warning            ((t ())))
   `(warning                        ((t ())))
   `(match                          ((t (:inverse-video t))))
   `(secondary-selection            ((t (:background ,ss :extend nil))))
   `(help-key-binding               ((t (:bold t))))
   `(shadow                         ((t (:foreground ,cm))))

   ;; ISearch
   `(isearch                        ((t (:inverse-video t))))
   `(isearch-fail                   ((t (:inverse-video t))))

   ;; Font Locks
   `(font-lock-comment-face         ((t (:foreground ,doc))))
   `(font-lock-comment-delimiter-face  ((t (:inherit font-lock-comment-face))))
   `(font-lock-string-face          ((t (:foreground ,str))))
   `(font-lock-doc-face             ((t (:foreground ,doc))))
   `(font-lock-builtin-face         ((t ())))
   `(font-lock-type-face            ((t ())))
   `(font-lock-variable-name-face   ((t ())))
   `(font-lock-keyword-face         ((((type tty)) (:bold t))
                                     (((type graphic)) (:foreground ,kw))))
   `(font-lock-constant-face        ((t (:foreground ,st))))
   `(font-lock-function-name-face   ((t (:foreground ,fn))))
   `(font-lock-warning-face         ((t ())))
   `(font-lock-preprocessor-face    ((t ())))
   `(error                          ((t (:background "red" :foreground ,fn))))

   `(highlight-numbers-number       ((t (:foreground ,num))))

   ;; shell
   `(sh-quoted-exec                 ((t ())))

   ;; IMenu
   `(imenu-list-entry-face-0          ((t ())))
   `(imenu-list-entry-subalist-face-0 ((t (:bold t))))

   ;; Mode Line
   `(tab-line                       ((t ())))
   `(mode-line                      ((t (:background ,fg :foreground ,bg))))
   `(mode-line-inactive             ((t (:background ,cm :foreground ,hl))))
   `(header-line                    ((t ())))
   `(header-line-inactive           ((t ())))

   ;; Company
   `(company-tooltip-common         ((t ())))
   `(company-tooltip-common-selection ((t ())))
   `(company-tooltip                ((t (:background ,pop))))
   `(company-tooltip-search         ((t ())))
   `(company-tooltip-selection      ((t (:inverse-video t))))
   `(company-tooltip-annotation     ((t ())))
   `(company-scrollbar-bg           ((t (:background ,cm))))
   `(company-scrollbar-fg           ((t (:background ,fg))))
   `(company-template-field         ((t (:inherit yas-field-highlight-face))))

   ;; Yasnippet
   `(yas-field-highlight-face       ((t (:underline t))))

   ;; Meow
   `(meow-beacon-indicator          ((t (:bold t))))
   `(meow-keypad-indicator          ((t (:bold t))))
   `(meow-insert-indicator          ((t (:bold t))))
   `(meow-normal-indicator          ((t (:bold t))))
   `(meow-motion-indicator          ((t (:bold t))))
   `(meow-keypad-cursor             ((t (:background ,cur))))
   `(meow-insert-cursor             ((t (:background ,cur))))
   `(meow-normal-cursor             ((t (:background ,cur))))
   `(meow-motion-cursor             ((t (:background ,cur))))
   `(meow-unknown-cursor            ((t (:background ,cur))))
   `(meow-beacon-cursor             ((t (:background ,cur))))

   ;; colorful paren
   `(colorful-round           ((t ())))
   `(colorful-square          ((t (:foreground ,str))))
   `(colorful-curly           ((t (:foreground ,st))))
   `(colorful-semicolon       ((t (:foreground ,fn))))

   ;; Cider
   `(cider-result-overlay-face      ((t (:inverse-video t))))
   `(cider-repl-stderr-face         ((t ())))
   `(cider-repl-stdout-face         ((t (:foreground "gray60"))))
   `(cider-test-error-face          ((t (:foreground "yellow" :inverse-video t))))

   ;; Clojure
   `(clojure-character-face         ((t ())))

   ;; Magit
   `(magit-branch-local                ((t (:foreground ,st))))
   `(magit-branch-remote               ((t (:foreground ,fn))))
   `(magit-header-line                 ((t ())))
   `(magit-head                        ((t ())))
   `(magit-section-highlight           ((t (:background ,hl))))
   `(magit-section-heading             ((t ())))
   `(magit-section-selection           ((t ())))
   `(magit-diff-removed                ((t (:background "#311"))))
   `(magit-diff-removed-highlight      ((t (:background "#311"))))
   `(magit-diff-added                  ((t (:background "#131"))))
   `(magit-diff-added-highlight        ((t (:background "#131"))))
   `(magit-diff-context-highlight      ((t (:background ,hl :foreground ,fg))))

   ;; ;; SMerge
   ;; `(smerge-refined-added           ((t (:background "#253325"))))
   ;; `(smerge-lower                   ((t (:background "#173017"))))
   ;;
   ;; Diff-hl
   `(diff-hl-insert                 ((t (:foreground ,cm :background ,cm))))
   `(diff-hl-change                 ((t (:foreground ,hl :background ,hl))))
   `(diff-hl-delete                 ((t (:foreground ,fg :background ,fg))))

   `(eshell-prompt                  ((t (:bold t))))
   ;;
   ;; ;; Term
   ;; `(term-color-blue                ((t (:foreground ,blue :background ,blue))))
   ;; `(term-color-green               ((t (:foreground ,green :background ,green))))
   ;; `(term-color-red                 ((t (:foreground ,red :background ,red))))
   ;;
   ;; ;; Popup
   ;; `(popup-tip-face                 ((t (:background ,bg+4 :foreground ,fg))))
   ;; `(popup-isearch-match            ((t (:background "#CFA300" :foreground "black"))))
   ;;
   ;; `(tooltip                        ((t ())))
   ;; `(dired-directory                ((t (:foreground ,light-purple))))
   ;; `(web-mode-html-attr-name-face   ((t ())))
   ;; `(web-mode-html-tag-face         ((t ())))
   ;;
   ;; Emacs Rime
   `(rime-preedit-face              ((t (:underline t))))
   `(rime-cursor-face               ((t (:inherit font-lock-constant-face))))
   `(rime-indicator-face            ((t ())))
   `(rime-indicator-dim-face        ((t ())))
   `(rime-candidate-num-face        ((t ())))
   `(rime-comment-face              ((t ())))
   `(rime-code-face                 ((t (:bold t))))
   `(rime-default-face              ((t ())))
   `(rime-highlight-candidate-face  ((t ())))

   ;;
   ;; ;; Web Mode
   `(web-mode-function-call-face    ((t ())))
   `(web-mode-function-name-face    ((t ())))
   `(web-mode-html-tag-bracket-face ((t (:inherit parenthesis))))
   `(web-mode-symbol-face           ((t ())))
   `(css-selector                   ((t ())))
   ;;
   ;; Markdown
   `(markdown-header-face-1         ((t (:underline t :height ,(nth 0 carbon-theme-header-scales)))))
   `(markdown-header-face-2         ((t (:underline t :height ,(nth 1 carbon-theme-header-scales)))))
   `(markdown-header-face-3         ((t (:underline t :height ,(nth 2 carbon-theme-header-scales)))))
   `(markdown-header-face-4         ((t (:underline t :height ,(nth 3 carbon-theme-header-scales)))))
   `(markdown-header-face-5         ((t (:underline t :height ,(nth 4 carbon-theme-header-scales)))))
   `(markdown-header-face-6         ((t (:underline t :height ,(nth 5 carbon-theme-header-scales)))))
   `(markdown-header-face-7         ((t (:underline t :height ,(nth 6 carbon-theme-header-scales)))))
   ;;
   ;; ;; Telega
   `(telega-entity-type-code        ((t ())))
   `(telega-msg-heading             ((t ())))
   `(telega-msg-self-title          ((t (:foreground ,fn))))
   `(telega-unmuted-count           ((t ())))
   ;;
   ;; ;; Org-mode
   `(org-document-title             ((t (:bold t :height ,(nth 0 carbon-theme-header-scales)))))
   `(org-link                       ((t (:underline t))))
   `(org-document-title             ((t ())))
   `(org-code                       ((t (:inherit font-lock-constant-face))))
   `(org-level-1                    ((t (:inherit font-lock-string-face :height ,(nth 0 carbon-theme-header-scales)))))
   `(org-level-2                    ((t (:inherit font-lock-function-name-face :height ,(nth 1 carbon-theme-header-scales)))))
   `(org-level-3                    ((t (:inherit font-lock-keyword-face :height ,(nth 2 carbon-theme-header-scales)))))
   `(org-level-4                    ((t (:height ,(nth 3 carbon-theme-header-scales)))))
   `(org-level-5                    ((t (:height ,(nth 4 carbon-theme-header-scales)))))
   `(org-level-6                    ((t (:height ,(nth 5 carbon-theme-header-scales)))))
   `(org-level-7                    ((t (:height ,(nth 6 carbon-theme-header-scales)))))
   ;;
   ;; ;; Treemacs
   ;; `(treemacs-root-face             ((t (:inherit font-lock-function-name-face :height 1.4 :underline t))))
   `(fill-column-indicator          ((t (:foreground ,cm))))
   `(scroll-bar                     ((t (:foreground ,fg))))
   `(parenthesis                    ((t (:foreground ,cm))))
   `(eldoc-box-body                 ((t (:background ,pop :inherit variable-pitch))))

   `(flycheck-warning               ((t (:underline (:style wave :color ,cm)))))
   `(flycheck-error                 ((t (:underline (:style wave :color ,st)))))
   `(flymake-warning                ((t (:underline (:style wave :color ,st)))))
   `(flymake-error                  ((t (:underline (:style wave :color ,st)))))
   `(flymake-note                   ((t (:underline (:style wave :color ,cm)))))

   `(wgrep-face                     ((t (:underline ,st))))

   `(anzu-mode-line                 ((t (:foreground ,bg :background ,fg))))
   `(erc-nick-default-face          ((t (:inherit font-lock-keyword-face))))
   `(erc-input-face                 ((t (:inherit font-lock-function-name-face))))
   `(erc-timestamp-face             ((t (:inherit font-lock-constant-face))))
   `(erc-notice-face                ((t (:inherit font-lock-comment-face))))

   `(tab-bar                        ((t (:background ,fg :foreground ,bg))))
   `(tab-bar-tab                    ((t (:inverse-video t :bold t))))
   `(tab-bar-tab-inactive           ((t ())))

   `(ansi-color-blue                ((t (:foreground "#169edd"))))
   `(ansi-color-bright-blue         ((t (:foreground "#169edd"))))
   `(yascroll:thumb-fringe          ((t (:foreground ,cm :background ,cm))))
   `(yascroll:thumb-text-area       ((t (:foreground ,cm :background ,cm))))

   `(embark-keybinding              ((t (:inherit font-lock-constant-face))))))

(and load-file-name
     (boundp 'custom-theme-load-path)
     (add-to-list 'custom-theme-load-path
                  (file-name-as-directory
                   (file-name-directory load-file-name))))

(provide-theme 'carbon)

;;; carbon-theme.el ends here
#+end_src
**** default
#+begin_src elisp :tangle themes/default-theme.el
(deftheme default "Emacs default theme, better version.")

(custom-theme-set-faces
 `default
 ;; basic
 `(fringe ((t (:background ,(face-background 'default)))))
 `(cursor ((t (:background "black"))))

 ;; mode-line
 `(mode-line ((t (:foreground "black" :background "grey75" :box (:line-width 1 :style released-button)))))
 `(mode-line-inactive ((t (:foreground "grey20" :background "grey90" :weight light
                                       :box `(:line-width 1 :color "grey75" :style nil)))))
 )

(and load-file-name
     (boundp 'custom-theme-load-path)
     (add-to-list 'custom-theme-load-path
                  (file-name-as-directory
                   (file-name-directory load-file-name))))

(provide-theme 'default)
#+end_src
**** grayscale
#+begin_src elisp :tangle themes/grayscale-theme.el
;;; grayscale-theme.el --- A gray light theme  -*- lexical-binding: t; -*-

;; Author: Shi Tianshu
;; Keywords: theme
;; Package-Requires: ((emacs "28.0.50"))
;; Version: 1.0.2

;;
;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.


;;; Commentary:

;;; This is a minimal gray light theme.

;;; Code:

(deftheme grayscale "A minimal light theme.")

(defvar grayscale-theme-header-scales '(1.4 1.4 1.2 1.0 1.0 1.0 1.0)
  "Scales for headers.")

(setq awesome-tray-mode-line-active-color "#353535"
      awesome-tray-mode-line-inactive-color "#a9bdb5")

(let ((bg "#c4d3cd")
      (fg "#353535")
      (kw "#000000")
      (cm "#61726b")
      (ss "#96b0a5")
      (hl "#a9bdb5")
      (fn "#b6c6c0")
      (cur "#202020"))
  (custom-theme-set-faces
   `grayscale
   ;; We don't specify default foreground/background in TTY.
   `(default                        ((((type tty)))
                                     (((type graphic)) :background ,bg :foreground ,fg)))
   ;; Basics
   `(cursor                         ((t (:background ,cur))))
   `(region                         ((t (:background ,hl))))
   `(hl-line                        ((t)))
   `(fringe                         ((t (:background ,bg))))
   `(show-paren-match               ((t (:box (:line-width (-1 . -1))))))
   `(highlight                      ((t (:inverse-video t))))
   `(button                         ((t (:box (:line-width (-1 . -1))))))
   `(vertical-border                ((t ())))
   `(window-divider                 ((t (:foreground ,cm))))
   `(window-divider-first-pixel     ((t (:foreground ,cm))))
   `(window-divider-last-pixel      ((t (:foreground ,cm))))
   `(line-number                    ((t (:foreground ,cm))))
   `(line-number-current-line       ((t (:foreground ,fg))))
   `(parenthesis                    ((t (:foreground ,fg))))
   `(completions-common-part        ((t ())))
   `(minibuffer-prompt              ((t ())))
   `(lazy-highlight                 ((t (:foreground ,fg :box (:line-width (-1 . -1))))))
   `(compilation-info               ((t ())))
   `(compilation-warning            ((t ())))
   `(warning                        ((t ())))
   `(match                          ((t (:foreground ,fg :box (:line-width (-1 . -1))))))
   `(secondary-selection            ((t (:background ,ss))))
   `(help-key-binding               ((t ())))
   `(shadow                         ((t (:foreground ,cm))))

   ;; ISearch
   `(isearch                        ((t (:inverse-video t))))
   `(isearch-fail                   ((t (:inverse-video t))))

   ;; Font Locks
   `(font-lock-comment-face         ((t (:foreground ,cm :italic t))))
   `(font-lock-comment-delimiter-face         ((t (:foreground ,cm :italic t))))
   `(font-lock-string-face          ((t (:foreground ,cm))))
   `(font-lock-doc-face             ((t (:foreground ,cm))))
   `(font-lock-builtin-face         ((t ())))
   `(font-lock-type-face            ((t ())))
   `(font-lock-variable-name-face   ((t ())))
   `(font-lock-keyword-face         ((t (:bold t))))
   `(font-lock-constant-face        ((t (:italic t))))
   `(font-lock-function-name-face   ((t (:background ,fn))))
   `(font-lock-warning-face         ((t ())))
   `(font-lock-preprocessor-face    ((t ())))

   ;; shell
   `(sh-quoted-exec                 ((t ())))

   ;; IMenu
   `(imenu-list-entry-face-0          ((t ())))
   `(imenu-list-entry-subalist-face-0 ((t (:bold t))))

   ;; Mode Line
   `(tab-line                       ((t ())))
   `(mode-line                      ((t (:inverse-video t))))
   `(mode-line-inactive             ((t (:background ,hl))))
   `(header-line                    ((t ())))
   `(header-line-inactive           ((t ())))

   ;; Company
   `(company-tooltip-common         ((t ())))
   `(company-tooltip-common-selection ((t (:bold t))))
   `(company-tooltip                ((t (:background ,hl))))
   `(company-tooltip-search         ((t ())))
   `(company-tooltip-selection      ((t (:inverse-video t))))
   `(company-tooltip-annotation     ((t ())))
   `(company-scrollbar-bg           ((t (:background ,bg))))
   `(company-scrollbar-fg           ((t (:background ,fg))))
   `(company-template-field         ((t (:inherit yas-field-highlight-face))))

   ;; Yasnippet
   `(yas-field-highlight-face       ((t (:background ,hl))))

   ;; Meow
   `(meow-keypad-indicator          ((t (:bold t))))
   `(meow-insert-indicator          ((t (:bold t))))
   `(meow-normal-indicator          ((t (:bold t))))
   `(meow-motion-indicator          ((t (:bold t))))
   `(meow-beacon-indicator          ((t (:bold t))))
   `(meow-keypad-cursor             ((t ())))
   `(meow-insert-cursor             ((t ())))
   `(meow-normal-cursor             ((t ())))
   `(meow-motion-cursor             ((t ())))
   `(meow-beacon-cursor             ((t ())))

   ;; colorful paren
   `(colorful-round           ((t (:foreground ,cm))))
   `(colorful-square          ((t ())))
   `(colorful-curly           ((t ())))

   ;; Cider
   `(cider-result-overlay-face      ((t (:inverse-video t))))
   `(cider-repl-stderr-face         ((t (:bold t))))
   `(cider-repl-stdout-face         ((t ())))

   ;; Clojure
   `(clojure-character-face         ((t ())))

   ;; Magit
   ;; `(magit-diff-file-heading-highlight ((t (:background ,bg+1))))
   `(magit-branch-current              ((t (:box t :background ,hl))))
   `(magit-branch-local                ((t (:background ,hl))))
   `(magit-branch-remote               ((t (:background ,cm :foreground ,bg))))
   `(magit-branch-remote-head          ((t (:box t :background ,cm :foreground ,bg))))
   `(magit-header-line                 ((t (:bold t))))
   `(magit-head                        ((t ())))
   `(magit-section-highlight           ((t (:background ,hl))))
   `(magit-section-heading             ((t (:bold t))))
   `(magit-section-selection           ((t (:bold t))))
   `(magit-diff-hunk-heading-highlight ((t (:inverse-video t))))
   `(magit-diff-hunk-heading ((t (:foreground ,cm))))
   `(magit-diff-removed             ((t ())))
   `(magit-diff-added               ((t ())))
   `(magit-diff-removed-highlight   ((t (:background ,hl))))
   `(magit-diff-added-highlight     ((t (:background ,cm :foreground ,bg))))
   `(magit-diff-highlight           ((t ())))
   `(magit-diff-context-highlight   ((t ())))
   ;;
   ;; ;; SMerge
   ;; `(smerge-refined-added           ((t (:background "#253325"))))
   ;; `(smerge-lower                   ((t (:background "#173017"))))
   ;;
   ;; Diff-hl
   `(diff-hl-insert                 ((t (:foreground ,cm :background ,cm))))
   `(diff-hl-change                 ((t (:foreground ,hl :background ,hl))))
   `(diff-hl-delete                 ((t (:foreground ,fg :background ,fg))))

   `(eshell-prompt                  ((t (:bold t))))
   ;;
   ;; ;; Term
   ;; `(term-color-blue                ((t (:foreground ,blue :background ,blue))))
   ;; `(term-color-green               ((t (:foreground ,green :background ,green))))
   ;; `(term-color-red                 ((t (:foreground ,red :background ,red))))
   ;;
   ;; ;; Popup
   ;; `(popup-tip-face                 ((t (:background ,bg+4 :foreground ,fg))))
   ;; `(popup-isearch-match            ((t (:background "#CFA300" :foreground "black"))))
   ;;
   `(tooltip                        ((t ())))
   `(dired-directory                ((t (:bold t))))
   `(web-mode-html-attr-name-face   ((t ())))
   `(web-mode-html-tag-face         ((t ())))

   ;; Emacs Rime
   `(rime-preedit-face              ((t (:underline t))))
   `(rime-cursor-face               ((t (:inherit font-lock-constant-face))))
   `(rime-indicator-face            ((t ())))
   `(rime-indicator-dim-face        ((t ())))
   `(rime-candidate-num-face        ((t ())))
   `(rime-comment-face              ((t (:inherit font-lock-comment))))
   `(rime-code-face                 ((t (:bold t))))
   `(rime-default-face              ((t ())))
   `(rime-highlight-candidate-face  ((t ())))

   ;;
   ;; ;; Web Mode
   `(web-mode-function-call-face    ((t ())))
   `(web-mode-function-name-face    ((t ())))
   `(web-mode-html-tag-bracket-face ((t (:inherit parenthesis))))
   `(web-mode-symbol-face           ((t (:inherit font-lock-constant-face))))
   `(web-mode-doctype-face          ((t (:inherit shadow))))
   ;; `(css-selector                   ((t (:foreground ,purple))))
   ;;
   ;; ;; Markdown
   `(markdown-header-face-1         ((t (:bold t :height ,(nth 0 grayscale-theme-header-scales)))))
   `(markdown-header-face-2         ((t (:bold t :height ,(nth 1 grayscale-theme-header-scales)))))
   `(markdown-header-face-3         ((t (:bold t :height ,(nth 2 grayscale-theme-header-scales)))))
   `(markdown-header-face-4         ((t (:bold t :height ,(nth 3 grayscale-theme-header-scales)))))
   `(markdown-header-face-5         ((t (:bold t :height ,(nth 4 grayscale-theme-header-scales)))))
   `(markdown-header-face-6         ((t (:bold t :height ,(nth 5 grayscale-theme-header-scales)))))
   `(markdown-header-face-7         ((t (:bold t :height ,(nth 6 grayscale-theme-header-scales)))))
   ;;
   ;; ;; Telega
   `(telega-entity-type-code        ((t ())))
   `(telega-msg-heading             ((t ())))
   `(telega-unmuted-count           ((t ())))
   ;;
   ;; ;; Org-mode
   `(org-document-title             ((t (:bold t :height ,(nth 0 grayscale-theme-header-scales)))))
   `(org-link                       ((t (:underline t))))
   `(org-document-title             ((t ())))
   `(org-code                       ((t (:inherit font-lock-constant-face))))
   `(org-level-1                    ((t (:bold t :height ,(nth 0 grayscale-theme-header-scales)))))
   `(org-level-2                    ((t (:bold t :height ,(nth 1 grayscale-theme-header-scales)))))
   `(org-level-3                    ((t (:bold t :height ,(nth 2 grayscale-theme-header-scales)))))
   `(org-level-4                    ((t (:bold t :height ,(nth 3 grayscale-theme-header-scales)))))
   `(org-level-5                    ((t (:bold t :height ,(nth 4 grayscale-theme-header-scales)))))
   `(org-level-6                    ((t (:bold t :height ,(nth 5 grayscale-theme-header-scales)))))
   `(org-level-7                    ((t (:bold t :height ,(nth 6 grayscale-theme-header-scales)))))
   `(org-todo                       ((t (:bold t))))
   `(org-done                       ((t (:bold t :inherit shadow))))
   `(org-headline-done              ((t (:inherit shadow))))
   `(org-drawer                     ((t (:foreground ,cm))))

   ;; ;; Treemacs
   `(fill-column-indicator          ((t (:foreground ,cm))))
   `(scroll-bar                     ((t (:foreground ,fg))))
   `(sp-pair-overlay-face           ((t (:background ,hl))))
   `(sp-wrap-overlay-face           ((t (:background ,hl))))

   `(flycheck-warning ((t (:underline (:style wave :color ,cm)))))
   `(flycheck-error   ((t (:underline (:style wave :color ,fg)))))
   `(flymake-warning  ((t (:underline (:style wave :color ,cm)))))
   `(flymake-error    ((t (:underline (:style wave :color ,fg)))))
   `(flymake-note     ((t (:underline (:style wave :color ,hl)))))


   `(tab-bar                        ((t (:background ,hl))))
   `(tab-bar-tab-group-current      ((t ())))
   `(tab-bar-tab                    ((t (:bold t))))
   `(tab-bar-tab-group-inactive     ((t ())))
   `(tab-bar-tab-inactive           ((t (:bold nil :inherit shadow))))

   `(yascroll:thumb-fringe          ((t (:foreground ,cm :background ,cm))))
   `(yascroll:thumb-text-area       ((t (:foreground ,cm :background ,cm))))))

(and load-file-name
     (boundp 'custom-theme-load-path)
     (add-to-list 'custom-theme-load-path
                  (file-name-as-directory
                   (file-name-directory load-file-name))))

(provide-theme 'grayscale)

;;; grayscale-theme.el ends here
#+end_src
**** nasy
#+begin_src elisp :tangle themes/nasy-theme.el
  ;;; nasy-modeline.el --- Nasy's Emacs Configuration theme file.  -*- lexical-binding: t; -*-

;; Copyright (C) 2020  Nasy

;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

;; Nasy's Emacs UI theme.

  ;;; Code:

(defgroup nasy-theme nil
  "Options of Nasy's theme."
  :group 'faces)

(defcustom nasy-theme-light/dark 'light
  "Nasy theme uses light theme or dark theme?"
  :group 'nasy-theme
  :type 'symbol)

(defcustom nasy-theme-org-scale t
  "Nasy theme uses scale up in `org-mode' or not."
  :group 'nasy-theme
  :type 'boolean)

(defcustom nasy-theme-underlines-list '(comment)
  "Nasy theme uses underline on list.

  Should be one or more in `comment', `hl-line'."
  :group 'nasy-theme
  :type '(list symbol))

(defcustom nasy-theme-fixed-pitch-font "Recursive Mono Casual Static"
  "Nasy theme fixed pitch font."
  :group 'nasy-theme
  :type 'string)

(defcustom nasy-theme-variable-pitch-font "Cardo"
  "Nasy theme variable patch font."
  :group 'nasy-theme
  :type 'string)

(defcustom nasy-theme-fixed-pitch-font-scale 1.0
  "Nasy theme fixed pitch font scale."
  :group 'nasy-theme
  :type 'float)

(defcustom nasy-theme-variable-pitch-font-scale 1.3
  "Nasy theme variable pitch font scale."
  :group 'nasy-theme
  :type 'float)

(defcustom nasy-theme-rescale-f/v-pitch-font t
  "Nasy theme rescale f/v-pitch-font or not."
  :group 'nasy-theme
  :type 'boolean)

(defun nasy-theme--light?dark (light dark)
  "Determine using the LIGHT or the DARK color of nasy-theme."
  (if (eq nasy-theme-light/dark 'light)
      light
    dark))
(defalias '--l?d #'nasy-theme--light?dark)

(defun nasy-theme--scale? (scale)
  "Determine using `org-mode' SCALE or not."
  (if nasy-theme-org-scale
      scale
    1))
(defalias '--s? #'nasy-theme--scale?)

(defun nasy-theme--check-underline-list (sym)
  "Check if SYM in `nasy-theme-underlines-list' or not."
  (when (memq sym nasy-theme-underlines-list)
    t))
(defalias '--u? #'nasy-theme--check-underline-list)

(defun nasy-theme--rescale-font ()
  "Nasy theme rescale font."
  (when nasy-theme-rescale-f/v-pitch-font
    (setf (alist-get
           nasy-theme-fixed-pitch-font
           face-font-rescale-alist
           nasy-theme-fixed-pitch-font-scale nil 'string=)
          nasy-theme-fixed-pitch-font-scale)
    (setf (alist-get
           nasy-theme-variable-pitch-font
           face-font-rescale-alist
           nasy-theme-variable-pitch-font-scale nil 'string=)
          nasy-theme-variable-pitch-font-scale)))

(nasy-theme--rescale-font)

(deftheme nasy)

(let* ((class '((class color) (min-colors 89)))
       (n-丁香     "#CCA4E3")
       (n-品红     "#F00056")
       (n-墨       "#50616D")
       (n-墨灰     "#758A99")
       (n-富春紡   "#FEF4B4")
       (n-春緑     "#E3EFD1")
       (n-松绿     "#057748")
       (n-松花     "#BCE672")
       (n-水黄     "#DDEEC4")
       (n-龍泉靑瓷 "#C8E6C6")
       (n-湖蓝     "#30DFF3")
       (n-漆       "#161823")
       (n-火红     "#FF2D51")
       (n-牙       "#EEDEB0")
       (n-珈琲椶   "#705438")
       (n-米灰     "#D3CBAF")
       (n-紙棕     "#D2B38C")
       (n-素       "#E0F0E9")
       (n-紫扇貝   "#923A60")
       (n-缟       "#F2ECDE")
       (n-胡粉     "#FFFAE8")
       (n-芽灰     "#E3DBBF")
       (n-茶       "#B35C44")
       (n-荼       "#F3F9F1")
       (n-蠟白     "#FEF8DE")
       (n-長萅蕐   "#FF47D1")
       (n-霜       "#E9F1F6")
       (n-青莲     "#801DAE")
       (n-靛青     "#177CB0")
       (n-鱼肚     "#FCEFE8")
       (n-鸭黄     "#FAFF72")
       (n-鹅黄     "#FFF143")
       (n-黛       "#4A4266")
       (n/丁香青莲  (--l?d n-青莲 n-青莲))
       (n/墨墨灰    (--l?d n-墨 n-墨灰))
       (n/墨灰墨    (--l?d n-墨灰 n-墨))
       (n/墨灰素    (--l?d n-墨灰 n-素))
       (n/墨缟      (--l?d n-墨 n-缟))
       (n/湖蓝靛青  (--l?d n-湖蓝 n-靛青))
       (n/漆缟      (--l?d n-漆 n-缟))
       (n/牙墨      (--l?d n-牙 n-墨))
       (n/牙黛      (--l?d n-牙 n-黛))
       (n/素墨      (--l?d n-素 n-墨))
       (n/素墨灰    (--l?d n-素 n-墨灰))
       (n/缟墨      (--l?d n-缟 n-墨))
       (n/缟漆      (--l?d n-缟 n-漆))
       (n/缟黛      (--l?d n-缟 n-黛))
       (n/霜黛      (--l?d n-霜 n-黛))
       (n/青莲丁香  (--l?d n-青莲 n-丁香))
       (n/青莲牙    (--l?d n-青莲 n-牙))
       (n/靛青湖蓝  (--l?d n-靛青 n-湖蓝))
       (n/黛缟      (--l?d n-黛 n-缟))
       (n/黛霜      (--l?d n-黛 n-霜)))
  (custom-theme-set-faces
   'nasy
     ;;; essential styles
   `(default ((,class (:foreground ,n/墨缟 :background ,n/缟漆))))

     ;;; Basic
   `(bold ((,class (:weight bold))))
   `(button          ((,class (:box (:line-width 1) :underline t :weight bold))))
   `(cursor          ((,class (:background ,n/黛霜 :foreground ,n/霜黛))))
   `(error           ((,class (:background ,n-鱼肚 :foreground ,n-品红 :weight bold))))
   `(escape-glyph    ((,class (:foreground ,n-茶))))
   `(fixed-pitch
     ((,class (:family ,nasy-theme-fixed-pitch-font))))
   `(fringe          ((,class (:background ,n/缟漆 :foreground ,n/墨缟))))
   `(header-line     ((,class (:background ,n-荼
                                           :box (:line-width 2 :style released-button)
                                           :extend t
                                           :foreground ,n/靛青湖蓝))))
   `(highlight    ((,class (:background ,n/墨缟
                                        :distant-foreground ,n/霜黛))))
   `(internal-border ((,class (:background ,n/缟漆))))
   `(link         ((,class (:foreground ,n-靛青 :underline t))))
   `(link-visited ((,class (:foreground ,n-青莲 :underline t))))
   `(region       ((,class (:background ,n-龍泉靑瓷 :distant-foreground ,n/墨缟 :extend t))))
   `(secondary-selection ((,class (:background ,n-芽灰))))
   `(success      ((,class (:background ,n-鱼肚 :foreground ,n-靛青 :weight bold))))
   `(variable-pitch
     ((,class (:family ,nasy-theme-variable-pitch-font))))
   `(warning      ((,class (:background ,n-鱼肚 :foreground ,n-茶 :weight bold))))

     ;;; company
   `(company-box-scrollbar
     ((,class (:background ,n/黛缟
                           :box (:line-width 2 :style released-button)
                           :extend t
                           :foreground ,n/缟黛))))
   `(company-box-selection
     ((,class (:inherit company-box-scrollbar))))
   `(company-echo-common
     ((,class (:background ,n-茶 :foreground ,n-缟))))
   `(company-preview-common
     ((,class (:background ,n-荼 :foreground ,n-墨 :slant italic :weight bold))))
   `(company-scrollbar-bg
     ((,class (:background ,n-牙))))
   `(company-scrollbar-fg
     ((,class (:background ,n-茶 :foreground ,n-缟))))
   `(company-tooltip
     ((,class (:background ,n/霜黛 :foreground ,n/黛霜))))
   `(company-tooltip-common
     ((,class (:background ,n-素 :foreground ,n-松绿 :weight bold))))
   `(company-tooltip-common-selection
     ((,class (:background ,n/黛缟 :foreground ,n-松花 :inherit company-tooltip-common))))
   `(company-tooltip-selection
     ((,class (:background ,n/黛缟
                           :box (:style released-button)
                           :extend t
                           :foreground ,n/缟黛))))

     ;;; counsel & ivy
   `(all-the-icons-ivy-rich-icon-face
     ((t (:box (:line-width 2 :style released-button)
               :inherit default))))
   `(ivy-current-match
     ((,class (:background ,n/黛缟
                           :extend t
                           :foreground ,n/缟墨
                           :weight bold))))
   `(ivy-highlight-face
     ((,class (:inherit counsel-active-mode))))
   `(ivy-minibuffer-match-face-1
     ((,class (:background ,n-松花
                           :foreground ,n-墨
                           :weight bold))))
   `(ivy-minibuffer-match-face-2
     ((,class (:background ,n-鹅黄
                           :foreground ,n-墨
                           :weight bold))))
   `(ivy-minibuffer-match-face-3
     ((,class (:background ,n-丁香
                           :foreground ,n-墨
                           :weight bold))))
   `(ivy-minibuffer-match-face-4
     ((,class (:background ,n-火红
                           :foreground ,n-墨
                           :weight bold))))

     ;;; customize faces
   `(custom-button
     ((,class (:box (:line-width 2 :style released-button)
                    :foreground ,n/霜黛
                    :background ,n/黛霜))))
   `(custom-button-mouse
     ((,class (:box (:line-width 2 :style released-button)
                    :background ,n/霜黛
                    :foreground ,n/黛霜))))
   `(custom-button-pressed
     ((,class (:box (:line-width 2 :style pressed-button)
                    :inherit custom-button))))
   `(custom-button-pressed-unraised
     ((,class (:foreground ,n-青莲 :inherit custom-button-unraised))))
   `(custom-button-unraised
     ((,class (:underline t))))
   `(custom-comment
     ((,class (:background ,n/霜黛 :foreground ,n/黛霜))))
   `(custom-group-tag
     ((,class (:foreground ,n-靛青
                           :height 1.4
                           :slant normal
                           :weight bold
                           :inherit variable-pitch))))
   `(custom-group-subtitle
     ((,class (:foreground ,n/墨缟
                           :height 1.2
                           :underline t
                           :weight bold))))
   `(custom-variable-obsolete
     ((,class (:foreground ,n/黛霜
                           :strike-through t))))
   `(custom-variable-tag
     ((,class (:foreground ,n-靛青
                           :slant normal
                           :weight bold))))

     ;;; dashboard
   `(widget-button
     ((,class (:weight unspecified))))

     ;;; display-fill-column-indicator-mode
   `(fill-column-indicator ((,class (:background ,n-湖蓝 :foreground ,n-靛青))))

     ;;; font-lock faces
   `(font-lock-builtin-face
     ((,class (:background ,n-春緑 :foreground ,n-珈琲椶 :slant italic))))
   `(font-lock-comment-delimiter-face
     ((,class (:inherit font-lock-comment-face :weight bold))))
   `(font-lock-comment-face
     ((,class (:foreground ,n/墨灰素
                           :slant italic
                           :underline ,(--u? 'comment)))))
   `(font-lock-constant-face
     ((,class (:inherit font-lock-variable-name-face :weight bold))))
   `(font-lock-doc-face
     ((,class (:background ,n-水黄 :foreground ,n/靛青湖蓝 :extend t))))
   `(font-lock-function-name-face
     ((,class (:foreground ,n-松绿 :underline t))))
   `(font-lock-keyword-face
     ((,class (:foreground ,n/墨缟 :weight bold))))
   `(font-lock-negation-char-face
     ((,class (:foreground ,n-珈琲椶))))
   `(font-lock-string-face
     ((,class (:foreground ,n/靛青湖蓝))))
   `(font-lock-type-face
     ((,class (:foreground ,n-松绿 :slant italic :weight bold))))
   `(font-lock-variable-name-face
     ((,class (:foreground ,n-茶))))
   `(font-lock-warning-face
     ((,class (:background ,n-鸭黄 :foreground ,n-墨 :weight bold))))

     ;;; highlight
   ;; highlight-indents-guide
   `(highlight-indent-guides-even-face
     ((,class (:background ,n-水黄))))
   `(highlight-indent-guides-odd-face
     ((,class (:background ,n-春緑))))
   ;; hl-line
   `(hl-line ((,class (:background ,n-芽灰
                                   :distant-foreground ,n-墨
                                   :extend t
                                   :underline ,(--u? 'hl-line)
                                   :weight bold))))

     ;;; mode line
   `(doom-modeline-buffer-minor-mode
     ((,class (:inherit mode-line))))
   `(doom-modeline-buffer-modified
     ((,class (:foreground ,n-火红
                           :inherit mode-line
                           :weight bold))))
   `(doom-modeline-info
     ((,class (:foreground ,n-靛青
                           :inherit mode-line
                           :weight bold))))
   `(doom-modeline-lsp-error
     ((,class (:inherit doom-modeline-urgent))))
   `(doom-modeline-lsp-running
     ((,class (:inherit doom-modeline-warning))))
   `(doom-modeline-lsp-warning
     ((,class (:inherit doom-modeline-warning))))
   `(doom-modeline-urgent
     ((,class (:foreground ,n-品红
                           :inherit mode-line
                           :weight bold))))
   `(doom-modeline-warning
     ((,class (:foreground ,n-松花
                           :inherit mode-line
                           :weight bold))))
   `(mode-line          ((,class (:background ,n-胡粉))))
   `(mode-line-inactive ((,class (:background ,n-素))))

     ;;; org mode
   `(org-block
     ((,class (:background ,n-蠟白 :foreground ,n/墨缟 :extend t))))
   `(org-block-begin-line
     ((,class (:background ,n-水黄
                           :box (:line-width 1 :style released-button)
                           :extend t
                           :foreground ,n/墨缟
                           :weight bold
                           :slant italic))))
   `(org-code ((,class (:background ,n-米灰
                                    :foreground ,n-墨
                                    :inheit fixed-pitch))))
   `(org-document-title
     ((,class (:background ,n-富春紡
                           :extend nil
                           :foreground ,n/墨缟
                           :height ,(--s? 1.7)
                           :weight bold))))
   `(org-document-info
     ((,class (:background ,n/素墨
                           :extend t
                           :foreground ,n/墨缟
                           :height ,(--s? 1.2)
                           :slant italic))))
   `(org-document-info-keyword
     ((,class (:background ,n/素墨
                           :extend t
                           :foreground ,n/墨缟
                           :height ,(--s? 1.2)
                           :slant italic))))
   `(org-done
     ((,class (:box (:line-width 2 :style released-button)
                    :foreground ,n/墨缟))))
   `(org-headline-done
     ((,class (:underline (:color ,n-松花)))))
   `(org-level-1
     ((,class (:background ,n-蠟白
                           :extend t
                           :foreground ,n-靛青
                           :height ,(--s? 1.4)
                           :underline t
                           :weight bold))))
   `(org-level-2
     ((,class (:background ,n-蠟白
                           :extend t
                           :foreground ,n-紫扇貝
                           :height ,(--s? 1.2)
                           :weight bold))))
   `(org-level-3
     ((,class (:background ,n-蠟白
                           :extend t
                           :foreground ,n-松绿
                           :height ,(--s? 1.1)
                           :weight bold))))
   `(org-level-4
     ((,class (:background ,n-蠟白
                           :extend t
                           :foreground ,n/青莲丁香
                           :height ,(--s? 1.1)
                           :weight bold))))
   `(org-level-5
     ((,class (:extend t
                       :foreground ,n-靛青
                       :height ,(--s? 1.1)
                       :slant italic
                       :weight normal))))
   `(org-level-6
     ((,class (:extend t
                       :foreground ,n-茶
                       :height ,(--s? 1.1)
                       :slant italic
                       :weight normal))))
   `(org-level-7
     ((,class (:extend t
                       :foreground ,n-松绿
                       :height ,(--s? 1.1)
                       :slant italic
                       :weight normal))))
   `(org-level-8
     ((,class (:extend t
                       :foreground ,n/青莲丁香
                       :height ,(--s? 1.1)
                       :slant italic
                       :weight normal))))
   `(org-list-dt ((,class (:height ,(--s? 1.1) :weight bold))))
   `(org-meta-line
     ((,class (:inherit font-lock-comment-face
                        :underline nil))))
   `(org-roam-link
     ((,class (:inherit org-link
                        :overline  t
                        :underline t))))
   `(org-superstar-header-bullet ((,class (:background ,n-富春紡))))
   `(org-superstar-item ((,class (:foreground ,n-靛青))))
   `(org-tag
     ((,class (:background ,n/牙黛
                           :box t
                           :foreground ,n/墨缟
                           :slant normal
                           :underline nil
                           :weight bold))))
   `(org-verbatim ((,class (:background ,n-春緑
                                        :foreground ,n-墨
                                        :inheit fixed-pitch))))

     ;;; page break lines
   `(page-break-lines
     ((,class (:inherit font-lock-comment-face :slant normal :underline nil))))

     ;;; tab bar mode
   `(tab-bar                ((t (:inherit mode-line))))
   `(tab-bar-tab            ((t (:inherit mode-line))))
   `(tab-bar-tab-inactive   ((t (:inherit mode-line-inactive))))

     ;;; term
   `(term-color-black   ((,class (:background ,n-墨     :foreground ,n-墨))))
   `(term-color-blue    ((,class (:background ,n-靛青   :foreground ,n-靛青))))
   `(term-color-cyan    ((,class (:background ,n-湖蓝   :foreground ,n-湖蓝))))
   `(term-color-green   ((,class (:background ,n-松绿   :foreground ,n-松绿))))
   `(term-color-magenta ((,class (:background ,n-長萅蕐 :foreground ,n-長萅蕐))))
   `(term-color-red     ((,class (:background ,n-火红   :foreground ,n-火红))))
   `(term-color-white   ((,class (:background ,n-缟     :foreground ,n-缟))))
   `(term-color-yellow  ((,class (:background ,n-紙棕   :foreground ,n-紙棕))))
   `(vterm-color-inverse-video
     ((,class (:background ,n-墨))))

     ;;; tree sitter
   `(tree-sitter-hl-face:constructor
     ((,class (:inherit tree-sitter-hl-face:type :bold nil))))
   `(tree-sitter-hl-face:property
     ((,class (:inherit font-lock-constant-face :bold nil))))
   `(tree-sitter-hl-face:operator
     ((,class (:background ,n-蠟白 :bold t :inherit font-lock-negation-char-face))))))

  ;;;###autoload
(and load-file-name
     (boundp 'custom-theme-load-path)
     (add-to-list 'custom-theme-load-path
                  (file-name-as-directory
                   (file-name-directory load-file-name))))

(provide-theme 'nasy)

(provide 'nasy-theme)
  ;;; nasy-theme.el ends here
#+end_src
**** stein
#+begin_src elisp :tangle themes/stein-theme.el
;;; stein-theme.el --- stein Theme

;; Copyright 2015-present, All rights reserved
;;
;; Code licensed under the MIT license

;; Credits:
;; https://github.com/dracula/emacs

;; author
;; Aeghn

;;; Code:
(deftheme stein)

(let*
    ((stein-bg      "#fbf8ef")
     (stein-current "#FFFFFF")
     (stein-fg      "#050505")
     (stein-comment "#595959")
     (stein-cyan    "#335EA8")
     (stein-green   "#006400")
     (stein-orange  "#FD8008")
     (stein-magenta "#CE2F1A")
     (stein-purple  "#990099")
     (stein-red     "#AA0000")
     (stein-yellow  "#C18001")
     (stein-blue    "#000088")
     (stein-accent  "#655370")
     ;; Other colors
     (bg0 "#BDBDBD")
     (bg2 "#D8D8D8")
     (bg3 "#FFFFFF")
     (fg0 "#171717")
     (fg2 "#393939")
     (fg3 "#4A4A4A")
     )
  (custom-theme-set-faces
   'stein
   `(cursor ((t (:background ,fg3))))
   `(default ((t (:background ,stein-bg :foreground ,stein-fg))))
   `(default-italic ((t (:slant italic))))
   `(ffap ((t (:foreground ,fg0))))
   `(fringe ((t (:background ,stein-bg :foreground ,fg0))))
   `(highlight ((t (:foreground ,stein-yellow :background ,bg3))))
   `(hl-line ((t (:background ,stein-current))))
   `(info-quoted-name ((t (:foreground ,stein-blue))))
   `(info-string ((t (:foreground ,stein-yellow))))
   `(lazy-highlight ((t (:foreground ,fg2 :background ,bg3))))
   `(link ((t (:foreground ,stein-cyan :underline t))))
   `(linum ((t (:slant italic :foreground ,bg0 :background ,stein-bg))))
   `(line-number ((t (:slant italic :foreground ,stein-comment :background ,stein-bg ))))
   `(minibuffer-prompt ((t (:weight bold :foreground ,stein-blue))))
   `(region ((t (:background ,stein-yellow :foreground ,stein-bg :extend t))))
   `(trailing-whitespace ((t (:foreground nil :background ,stein-blue))))
   `(vertical-border ((t (:foreground ,stein-comment))))

   `(success ((t (:foreground ,stein-green))))
   `(warning ((t (:foreground ,stein-blue))))
   `(error ((t (:foreground ,stein-red))))
   `(header-line ((t (:background ,stein-bg))))
   `(secondary-selection ((t (:background ,bg3))))
   ;; syntax
   `(font-lock-builtin-face ((t (:foreground ,stein-blue))))
   `(font-lock-comment-face ((t (:foreground ,stein-comment))))
   `(font-lock-comment-delimiter-face ((t (:foreground ,stein-comment))))
   `(font-lock-constant-face ((t (:foreground ,stein-cyan))))
   `(font-lock-doc-face ((t (:foreground ,stein-comment))))
   `(font-lock-function-name-face ((t (:foreground ,stein-green :weight bold))))
   `(font-lock-keyword-face ((t (:weight bold :foreground ,stein-magenta))))
   `(font-lock-negation-char-face ((t (:foreground ,stein-cyan))))
   `(font-lock-preprocessor-face ((t (:foreground ,stein-blue))))
   `(font-lock-reference-face ((t (:foreground ,stein-cyan))))
   `(font-lock-regexp-grouping-backslash ((t (:foreground ,stein-cyan))))
   `(font-lock-regexp-grouping-construct ((t (:foreground ,stein-purple))))
   `(font-lock-string-face ((t (:foreground ,stein-yellow))))
   `(font-lock-type-face ((t (:slant italic :foreground ,stein-purple))))
   `(font-lock-variable-name-face ((t (:foreground ,stein-fg
                                                   :weight bold))))
   `(font-lock-warning-face ((t (:foreground ,stein-blue :background ,bg2))))
   ;; auto-complete
   `(ac-completion-face ((t (:underline t :foreground ,stein-magenta))))
   ;; avy
   `(avy-lead-face ((t (:foreground "#ffffff" :background ,stein-red))))
   `(avy-lead-face-0 ((t (:foreground "#ffffff" :background ,stein-yellow))))
   `(avy-lead-face-1 ((t (:foreground "#ffffff" :background ,stein-blue))))
   `(avy-lead-face-2 ((t (:foreground "#ffffff" :background ,stein-purple))))
   ;; company
   `(company-echo-common ((t (:foreground ,stein-bg :background ,stein-fg))))
   `(company-preview ((t (:background ,stein-bg :foreground ,stein-orange))))
   `(company-preview-common ((t (:foreground ,bg2 :foreground ,fg3))))
   `(company-preview-search ((t (:foreground ,stein-purple :background ,stein-bg))))
   `(company-scrollbar-bg ((t (:background ,bg3))))
   `(company-scrollbar-fg ((t (:foreground ,stein-magenta))))
   `(company-template-field ((t (:inherit region))))
   `(company-tooltip ((t (:foreground ,fg2 :background ,stein-bg :weight bold))))
   `(company-tooltip-annotation ((t (:foreground ,stein-cyan))))
   `(company-tooltip-common ((t (:foreground ,fg3))))
   `(company-tooltip-common-selection ((t (:foreground ,stein-yellow))))
   `(company-tooltip-mouse ((t (:inherit highlight))))
   `(company-tooltip-selection ((t (:background ,bg3 :foreground ,fg3))))
   ;; diff-hl
   `(diff-hl-change ((t (:foreground ,stein-blue :background ,stein-blue))))
   `(diff-hl-delete ((t (:foreground ,stein-red :background ,stein-red))))
   `(diff-hl-insert ((t (:foreground ,stein-green :background ,stein-green))))
   ;; dired
   `(dired-directory ((t (:foreground ,stein-green :weight normal))))
   `(dired-flagged ((t (:foreground ,stein-magenta))))
   `(dired-header ((t (:foreground ,fg3 :background ,stein-bg))))
   `(dired-ignored ((t (:inherit shadow))))
   `(dired-mark ((t (:foreground ,stein-fg :weight bold))))
   `(dired-marked ((t (:foreground ,stein-blue :weight bold))))
   `(dired-perm-write ((t (:foreground ,fg3 :underline t))))
   `(dired-symlink ((t (:foreground ,stein-yellow :weight normal :slant italic))))
   `(dired-warning ((t (:foreground ,stein-blue :underline t))))
   `(diredp-compressed-file-name ((t (:foreground ,fg3))))
   `(diredp-compressed-file-suffix ((t (:foreground ,fg0))))
   `(diredp-date-time ((t (:foreground ,stein-fg))))
   `(diredp-deletion-file-name ((t (:foreground ,stein-magenta :background ,stein-current))))
   `(diredp-deletion ((t (:foreground ,stein-magenta :weight bold))))
   `(diredp-dir-heading ((t (:foreground ,fg2 :background ,bg0))))
   `(diredp-dir-name ((t (:inherit dired-directory))))
   `(diredp-dir-priv ((t (:inherit dired-directory))))
   `(diredp-executable-tag ((t (:foreground ,stein-blue))))
   `(diredp-file-name ((t (:foreground ,stein-fg))))
   `(diredp-file-suffix ((t (:foreground ,fg0))))
   `(diredp-flag-mark-line ((t (:foreground ,fg2 :slant italic :background ,stein-current))))
   `(diredp-flag-mark ((t (:foreground ,fg2 :weight bold :background ,stein-current))))
   `(diredp-ignored-file-name ((t (:foreground ,stein-fg))))
   `(diredp-mode-line-flagged ((t (:foreground ,stein-blue))))
   `(diredp-mode-line-marked ((t (:foreground ,stein-blue))))
   `(diredp-no-priv ((t (:foreground ,stein-fg))))
   `(diredp-number ((t (:foreground ,stein-cyan))))
   `(diredp-other-priv ((t (:foreground ,stein-blue))))
   `(diredp-rare-priv ((t (:foreground ,stein-blue))))
   `(diredp-read-priv ((t (:foreground ,stein-purple))))
   `(diredp-write-priv ((t (:foreground ,stein-magenta))))
   `(diredp-exec-priv ((t (:foreground ,stein-yellow))))
   `(diredp-symlink ((t (:foreground ,stein-blue))))
   `(diredp-link-priv ((t (:foreground ,stein-blue))))
   `(diredp-autofile-name ((t (:foreground ,stein-yellow))))
   `(diredp-tagged-autofile-name ((t (:foreground ,stein-yellow))))
   ;; enh-ruby
   `(enh-ruby-heredoc-delimiter-face ((t (:foreground ,stein-yellow))))
   `(enh-ruby-op-face ((t (:foreground ,stein-magenta))))
   `(enh-ruby-regexp-delimiter-face ((t (:foreground ,stein-yellow))))
   `(enh-ruby-string-delimiter-face ((t (:foreground ,stein-yellow))))
   ;; font-latex
   `(font-latex-bold-face ((t (:foreground ,stein-purple))))
   `(font-latex-italic-face ((t (:foreground ,stein-magenta :slant italic))))
   `(font-latex-match-reference-keywords ((t (:foreground ,stein-cyan))))
   `(font-latex-match-variable-keywords ((t (:foreground ,stein-fg))))
   `(font-latex-string-face ((t (:foreground ,stein-yellow))))
   ;; gnus-group
   `(gnus-group-mail-1 ((t (:foreground ,stein-magenta :weight bold))))
   `(gnus-group-mail-1-empty ((t (:inherit gnus-group-mail-1 :weight normal))))
   `(gnus-group-mail-2 ((t (:foreground ,stein-cyan :weight bold))))
   `(gnus-group-mail-2-empty ((t (:inherit gnus-group-mail-2 :weight normal))))
   `(gnus-group-mail-3 ((t (:foreground ,stein-comment :weight bold))))
   `(gnus-group-mail-3-empty ((t (:inherit gnus-group-mail-3 :weight normal))))
   `(gnus-group-mail-low ((t (:foreground ,stein-current :weight bold))))
   `(gnus-group-mail-low-empty ((t (:inherit gnus-group-mail-low :weight normal))))
   `(gnus-group-news-1 ((t (:foreground ,stein-magenta :weight bold))))
   `(gnus-group-news-1-empty ((t (:inherit gnus-group-news-1 :weight normal))))
   `(gnus-group-news-2 ((t (:foreground ,stein-cyan :weight bold))))
   `(gnus-group-news-2-empty ((t (:inherit gnus-group-news-2 :weight normal))))
   `(gnus-group-news-3 ((t (:foreground ,stein-comment :weight bold))))
   `(gnus-group-news-3-empty ((t (:inherit gnus-group-news-3 :weight normal))))
   `(gnus-group-news-4 ((t (:inherit gnus-group-news-low))))
   `(gnus-group-news-4-empty ((t (:inherit gnus-group-news-low-empty))))
   `(gnus-group-news-5 ((t (:inherit gnus-group-news-low))))
   `(gnus-group-news-5-empty ((t (:inherit gnus-group-news-low-empty))))
   `(gnus-group-news-6 ((t (:inherit gnus-group-news-low))))
   `(gnus-group-news-6-empty ((t (:inherit gnus-group-news-low-empty))))
   `(gnus-group-news-low ((t (:foreground ,stein-current :weight bold))))
   `(gnus-group-news-low-empty ((t (:inherit gnus-group-news-low :weight normal))))
   `(gnus-header-content ((t (:foreground ,stein-magenta))))
   `(gnus-header-from ((t (:foreground ,stein-fg))))
   `(gnus-header-name ((t (:foreground ,stein-purple))))
   `(gnus-header-subject ((t (:foreground ,stein-green :weight bold))))
   `(gnus-summary-markup-face ((t (:foreground ,stein-cyan))))
   `(gnus-summary-high-unread ((t (:foreground ,stein-magenta :weight bold))))
   `(gnus-summary-high-read ((t (:inherit gnus-summary-high-unread :weight normal))))
   `(gnus-summary-high-ancient ((t (:inherit gnus-summary-high-read))))
   `(gnus-summary-high-ticked ((t (:inherit gnus-summary-high-read :underline t))))
   `(gnus-summary-normal-unread ((t (:foreground ,stein-orange :weight bold))))
   `(gnus-summary-normal-read ((t (:inherit gnus-summary-normal-unread :weight normal))))
   `(gnus-summary-normal-ancient ((t (:inherit gnus-summary-normal-read))))
   `(gnus-summary-normal-ticked ((t (:inherit gnus-summary-normal-read :underline t))))
   `(gnus-summary-low-unread ((t (:foreground ,stein-comment :weight bold))))
   `(gnus-summary-low-read ((t (:inherit gnus-summary-low-unread :weight normal))))
   `(gnus-summary-low-ancient ((t (:inherit gnus-summary-low-read))))
   `(gnus-summary-low-ticked ((t (:inherit gnus-summary-low-read :underline t))))
   `(gnus-summary-selected ((t (:inverse-video t))))
   ;; haskell-mode
   `(haskell-operator-face ((t (:foreground ,stein-magenta))))
   `(haskell-constructor-face ((t (:foreground ,stein-purple))))
   ;; helm
   `(helm-bookmark-w3m ((t (:foreground ,stein-purple))))
   `(helm-buffer-not-saved ((t (:foreground ,stein-purple :background ,stein-bg))))
   `(helm-buffer-process ((t (:foreground ,stein-blue :background ,stein-bg))))
   `(helm-buffer-saved-out ((t (:foreground ,stein-fg :background ,stein-bg))))
   `(helm-buffer-size ((t (:foreground ,stein-fg :background ,stein-bg))))
   `(helm-candidate-number ((t (:foreground ,stein-bg :background ,stein-fg))))
   `(helm-ff-directory ((t (:foreground ,stein-green :background ,stein-bg :weight bold))))
   `(helm-ff-executable ((t (:foreground ,stein-orange :background ,stein-bg :weight normal))))
   `(helm-ff-file ((t (:foreground ,stein-fg :background ,stein-bg :weight normal))))
   `(helm-ff-invalid-symlink ((t (:foreground ,stein-magenta :background ,stein-bg :weight bold))))
   `(helm-ff-prefix ((t (:foreground ,stein-bg :background ,stein-magenta :weight normal))))
   `(helm-ff-symlink ((t (:foreground ,stein-magenta :background ,stein-bg :weight bold))))
   `(helm-grep-cmd-line ((t (:foreground ,stein-fg :background ,stein-bg))))
   `(helm-grep-file ((t (:foreground ,stein-fg :background ,stein-bg))))
   `(helm-grep-finish ((t (:foreground ,fg2 :background ,stein-bg))))
   `(helm-grep-lineno ((t (:foreground ,stein-fg :background ,stein-bg))))
   `(helm-grep-match ((t (:foreground nil :background nil :inherit helm-match))))
   `(helm-grep-running ((t (:foreground ,stein-green :background ,stein-bg))))
   `(helm-header ((t (:foreground ,fg2 :background ,stein-bg :underline nil :box nil))))
   `(helm-moccur-buffer ((t (:foreground ,stein-green :background ,stein-bg))))
   `(helm-selection ((t (:background ,bg2 :underline nil))))
   `(helm-selection-line ((t (:background ,bg2))))
   `(helm-separator ((t (:foreground ,stein-purple :background ,stein-bg))))
   `(helm-source-go-package-godoc-description ((t (:foreground ,stein-yellow))))
   `(helm-source-header ((t (:foreground ,stein-magenta :background ,stein-bg :underline nil :weight bold))))
   `(helm-time-zone-current ((t (:foreground ,stein-blue :background ,stein-bg))))
   `(helm-time-zone-home ((t (:foreground ,stein-purple :background ,stein-bg))))
   `(helm-visible-mark ((t (:foreground ,stein-bg :background ,bg3))))
   ;; highlight-indentation minor mode
   `(highlight-indentation-face ((t (:background ,bg2))))
   ;; icicle
   `(icicle-whitespace-highlight ((t (:background ,stein-fg))))
   `(icicle-special-candidate ((t (:foreground ,fg2))))
   `(icicle-extra-candidate ((t (:foreground ,fg2))))
   `(icicle-search-main-regexp-others ((t (:foreground ,stein-fg))))
   `(icicle-search-current-input ((t (:foreground ,stein-magenta))))
   `(icicle-search-context-level-8 ((t (:foreground ,stein-blue))))
   `(icicle-search-context-level-7 ((t (:foreground ,stein-blue))))
   `(icicle-search-context-level-6 ((t (:foreground ,stein-blue))))
   `(icicle-search-context-level-5 ((t (:foreground ,stein-blue))))
   `(icicle-search-context-level-4 ((t (:foreground ,stein-blue))))
   `(icicle-search-context-level-3 ((t (:foreground ,stein-blue))))
   `(icicle-search-context-level-2 ((t (:foreground ,stein-blue))))
   `(icicle-search-context-level-1 ((t (:foreground ,stein-blue))))
   `(icicle-search-main-regexp-current ((t (:foreground ,stein-fg))))
   `(icicle-saved-candidate ((t (:foreground ,stein-fg))))
   `(icicle-proxy-candidate ((t (:foreground ,stein-fg))))
   `(icicle-mustmatch-completion ((t (:foreground ,stein-purple))))
   `(icicle-multi-command-completion ((t (:foreground ,fg2 :background ,bg2))))
   `(icicle-msg-emphasis ((t (:foreground ,stein-green))))
   `(icicle-mode-line-help ((t (:foreground ,fg0))))
   `(icicle-match-highlight-minibuffer ((t (:foreground ,stein-blue))))
   `(icicle-match-highlight-Completions ((t (:foreground ,stein-green))))
   `(icicle-key-complete-menu-local ((t (:foreground ,stein-fg))))
   `(icicle-key-complete-menu ((t (:foreground ,stein-fg))))
   `(icicle-input-completion-fail-lax ((t (:foreground ,stein-magenta))))
   `(icicle-input-completion-fail ((t (:foreground ,stein-magenta))))
   `(icicle-historical-candidate-other ((t (:foreground ,stein-fg))))
   `(icicle-historical-candidate ((t (:foreground ,stein-fg))))
   `(icicle-current-candidate-highlight ((t (:foreground ,stein-blue :background ,bg3))))
   `(icicle-Completions-instruction-2 ((t (:foreground ,fg0))))
   `(icicle-Completions-instruction-1 ((t (:foreground ,fg0))))
   `(icicle-completion ((t (:foreground ,stein-fg))))
   `(icicle-complete-input ((t (:foreground ,stein-blue))))
   `(icicle-common-match-highlight-Completions ((t (:foreground ,stein-purple))))
   `(icicle-candidate-part ((t (:foreground ,stein-fg))))
   `(icicle-annotation ((t (:foreground ,fg0))))
   ;; icomplete
   `(icompletep-determined ((t (:foreground ,stein-blue))))
   ;; ido
   `(ido-first-match ((t (:foreground ,stein-magenta :weight bold))))
   `(ido-only-match ((t (:foreground ,stein-blue))))
   `(ido-subdir ((t (:foreground ,stein-blue))))
   `(ido-virtual ((t (:foreground ,stein-cyan))))
   `(ido-incomplete-regexp ((t (:inherit font-lock-warning-face))))
   `(ido-indicator ((t (:foreground ,stein-fg :background ,stein-magenta))))
   ;; isearch
   `(isearch ((t (:weight bold :foreground ,stein-blue :background ,bg3))))
   `(isearch-fail ((t (:foreground ,stein-bg :background ,stein-blue))))
   ;; jde-java
   `(jde-java-font-lock-constant-face ((t (:foreground ,stein-cyan))))
   `(jde-java-font-lock-modifier-face ((t (:foreground ,stein-magenta))))
   `(jde-java-font-lock-number-face ((t (:foreground ,stein-fg))))
   `(jde-java-font-lock-package-face ((t (:foreground ,stein-fg))))
   `(jde-java-font-lock-private-face ((t (:foreground ,stein-magenta))))
   `(jde-java-font-lock-public-face ((t (:foreground ,stein-magenta))))
   ;; js2-mode
   `(js2-external-variable ((t (:foreground ,stein-purple))))
   `(js2-function-param ((t (:foreground ,stein-cyan))))
   `(js2-jsdoc-html-tag-delimiter ((t (:foreground ,stein-yellow))))
   `(js2-jsdoc-html-tag-name ((t (:foreground ,stein-orange))))
   `(js2-jsdoc-value ((t (:foreground ,stein-yellow))))
   `(js2-private-function-call ((t (:foreground ,stein-cyan))))
   `(js2-private-member ((t (:foreground ,fg3))))
   ;; js3-mode
   `(js3-error-face ((t (:underline ,stein-blue))))
   `(js3-external-variable-face ((t (:foreground ,stein-fg))))
   `(js3-function-param-face ((t (:foreground ,stein-magenta))))
   `(js3-instance-member-face ((t (:foreground ,stein-cyan))))
   `(js3-jsdoc-tag-face ((t (:foreground ,stein-magenta))))
   `(js3-warning-face ((t (:underline ,stein-magenta))))
   ;; magit
   `(magit-branch-local ((t (:foreground ,stein-cyan))))
   `(magit-branch-remote ((t (:foreground ,stein-green))))
   `(magit-tag ((t (:foreground ,stein-blue))))
   `(magit-section-heading ((t (:foreground ,stein-magenta :weight bold))))
   `(magit-section-highlight ((t (:background ,bg3 :extend t))))
   `(magit-diff-context-highlight ((t (:background ,bg3
                                                   :foreground ,fg3
                                                   :extend t))))
   `(magit-diff-revision-summary ((t (:foreground ,stein-blue
                                                  :background ,stein-bg
                                                  :weight bold))))
   `(magit-diff-revision-summary-highlight ((t (:foreground ,stein-blue
                                                            :background ,bg3
                                                            :weight bold
                                                            :extend t))))
   ;; the four following lines are just a patch of the
   ;; upstream color to add the extend keyword.
   `(magit-diff-added ((t (:background "#335533"
                                       :foreground "#ddffdd"
                                       :extend t))))
   `(magit-diff-added-highlight ((t (:background "#336633"
                                                 :foreground "#cceecc"
                                                 :extend t))))
   `(magit-diff-removed ((t (:background "#553333"
                                         :foreground "#ffdddd"
                                         :extend t))))
   `(magit-diff-removed-highlight ((t (:background "#663333"
                                                   :foreground "#eecccc"
                                                   :extend t))))
   `(magit-diff-file-heading ((t (:foreground ,stein-fg))))
   `(magit-diff-file-heading-highlight ((t (:inherit magit-section-highlight))))
   `(magit-diffstat-added ((t (:foreground ,stein-green))))
   `(magit-diffstat-removed ((t (:foreground ,stein-red))))
   `(magit-hash ((t (:foreground ,fg2))))
   `(magit-hunk-heading ((t (:background ,bg3))))
   `(magit-hunk-heading-highlight ((t (:background ,bg3))))
   `(magit-item-highlight ((t (:background ,bg3))))
   `(magit-log-author ((t (:foreground ,fg3))))
   `(magit-process-ng ((t (:foreground ,stein-blue :weight bold))))
   `(magit-process-ok ((t (:foreground ,stein-green :weight bold))))
   ;; message
   `(message-mml ((t (:foreground ,stein-green :weight normal))))
   `(message-header-xheader ((t (:foreground ,stein-cyan :weight normal))))
   ;; mini-modeline
   `(mini-modeline-mode-line ((t (:background ,stein-yellow :box nil))))
   `(mini-modeline-mode-line-inactive ((t (:background ,stein-comment :box nil))))
   ;; mode-line
   `(mode-line ((t (:foreground nil :background nil :overline ,bg0))))
   `(mode-line-inactive ((t (:foreground ,stein-accent :overline ,bg2))))
   `(mode-line-buffer-id ((t (:foreground ,stein-blue :weight bold))))
   `(mode-line-position-face ((t (:foreground ,stein-purple))))
   ;; mu4e
   `(mu4e-unread-face ((t (:foreground ,stein-magenta :weight normal))))
   `(mu4e-view-url-number-face ((t (:foreground ,stein-purple))))
   `(mu4e-highlight-face ((t (:background ,stein-bg
                                          :foreground ,stein-yellow
                                          :extend t))))
   `(mu4e-header-highlight-face ((t (:background ,stein-current
                                                 :foreground ,stein-fg
                                                 :underline nil :weight bold
                                                 :extend t))))
   `(mu4e-header-key-face ((t (:inherit message-mml))))
   `(mu4e-header-marks-face ((t (:foreground ,stein-purple))))
   `(mu4e-cited-1-face ((t (:foreground ,stein-purple))))
   `(mu4e-cited-2-face ((t (:foreground ,stein-blue))))
   `(mu4e-cited-3-face ((t (:foreground ,stein-comment))))
   `(mu4e-cited-4-face ((t (:foreground ,fg2))))
   `(mu4e-cited-5-face ((t (:foreground ,fg3))))
   ;; org
   `(org-agenda-date ((t (:foreground ,stein-cyan :underline nil))))
   `(org-agenda-dimmed-todo-face ((t (:foreground ,stein-comment))))
   `(org-agenda-done ((t (:foreground ,stein-green))))
   `(org-agenda-structure ((t (:foreground ,stein-purple))))
   `(org-block ((t (:foreground ,stein-blue))))
   `(org-code ((t (:foreground ,stein-yellow))))
   `(org-column ((t (:background ,bg0))))
   `(org-column-title ((t (:inherit org-column :weight bold :underline t))))
   `(org-date ((t (:foreground ,stein-cyan :underline t))))
   `(org-document-info ((t (:foreground ,stein-orange))))
   `(org-document-info-keyword ((t (:foreground ,stein-comment))))
   `(org-document-title ((t (:weight bold :foreground ,stein-blue :height 1.44))))
   `(org-done ((t (:foreground ,stein-comment :weight normal :strike-through t))))
   `(org-ellipsis ((t (:foreground ,stein-comment))))
   `(org-footnote ((t (:foreground ,stein-orange))))
   `(org-formula ((t (:foreground ,stein-magenta))))
   `(org-headline-done ((t (:foreground ,stein-comment :weight normal :strike-through t))))
   `(org-hide ((t (:foreground ,stein-bg :background ,stein-bg))))
   `(org-level-1 ((t (:inherit bold :foreground ,stein-green ))))
   `(org-level-2 ((t (:inherit bold :foreground ,stein-cyan ))))
   `(org-level-3 ((t (:weight normal :foreground ,stein-orange ))))
   `(org-level-4 ((t (:weight normal :foreground ,stein-blue))))
   `(org-level-5 ((t (:weight normal :foreground ,stein-magenta))))
   `(org-level-6 ((t (:weight normal :foreground ,stein-purple))))
   `(org-level-7 ((t (:weight normal :foreground ,stein-green))))
   `(org-level-8 ((t (:weight normal :foreground ,stein-blue))))
   `(org-link ((t (:foreground ,stein-cyan :underline t))))
   `(org-priority ((t (:foreground ,stein-cyan))))
   `(org-scheduled ((t (:foreground ,stein-green))))
   `(org-scheduled-previously ((t (:foreground ,stein-yellow))))
   `(org-scheduled-today ((t (:foreground ,stein-green))))
   `(org-sexp-date ((t (:foreground ,fg0))))
   `(org-special-keyword ((t (:foreground ,stein-yellow))))
   `(org-table ((t (:foreground ,stein-purple))))
   `(org-tag ((t (:foreground ,stein-magenta :weight bold :background ,bg2))))
   `(org-upcoming-deadline ((t (:foreground ,stein-yellow))))
   `(org-warning ((t (:weight bold :foreground ,stein-magenta))))
   ;; outline
   `(outline-1 ((t (:foreground ,stein-green))))
   `(outline-2 ((t (:foreground ,stein-purple))))
   `(outline-3 ((t (:foreground ,stein-cyan))))
   `(outline-4 ((t (:foreground ,stein-yellow))))
   `(outline-5 ((t (:foreground ,stein-blue))))
   `(outline-6 ((t (:foreground ,stein-orange))))
   ;; powerline
   `(powerline-evil-base-face ((t (:foreground ,bg2))))
   `(powerline-evil-emacs-face ((t (:inherit powerline-evil-base-face :background ,stein-yellow))))
   `(powerline-evil-insert-face ((t (:inherit powerline-evil-base-face :background ,stein-cyan))))
   `(powerline-evil-motion-face ((t (:inherit powerline-evil-base-face :background ,stein-purple))))
   `(powerline-evil-normal-face ((t (:inherit powerline-evil-base-face :background ,stein-green))))
   `(powerline-evil-operator-face ((t (:inherit powerline-evil-base-face :background ,stein-magenta))))
   `(powerline-evil-replace-face ((t (:inherit powerline-evil-base-face :background ,stein-red))))
   `(powerline-evil-visual-face ((t (:inherit powerline-evil-base-face :background ,stein-blue))))
   ;; rainbow-delimiters
   `(rainbow-delimiters-depth-1-face ((t (:foreground ,stein-fg))))
   `(rainbow-delimiters-depth-2-face ((t (:foreground ,stein-cyan))))
   `(rainbow-delimiters-depth-3-face ((t (:foreground ,stein-purple))))
   `(rainbow-delimiters-depth-4-face ((t (:foreground ,stein-magenta))))
   `(rainbow-delimiters-depth-5-face ((t (:foreground ,stein-blue))))
   `(rainbow-delimiters-depth-6-face ((t (:foreground ,stein-green))))
   `(rainbow-delimiters-depth-7-face ((t (:foreground ,stein-yellow))))
   `(rainbow-delimiters-depth-8-face ((t (:foreground ,stein-orange))))
   `(rainbow-delimiters-unmatched-face ((t (:foreground ,stein-blue))))
   ;; rpm-spec
   `(rpm-spec-dir-face ((t (:foreground ,stein-green))))
   `(rpm-spec-doc-face ((t (:foreground ,stein-magenta))))
   `(rpm-spec-ghost-face ((t (:foreground ,stein-purple))))
   `(rpm-spec-macro-face ((t (:foreground ,stein-yellow))))
   `(rpm-spec-obsolete-tag-face ((t (:inherit font-lock-warning-face))))
   `(rpm-spec-package-face ((t (:foreground ,stein-purple))))
   `(rpm-spec-section-face ((t (:foreground ,stein-yellow))))
   `(rpm-spec-tag-face ((t (:foreground ,stein-cyan))))
   `(rpm-spec-var-face ((t (:foreground ,stein-blue))))
   ;; shell-mode
   `(sh-heredoc ((t (:foreground ,stein-cyan))))
   `(sh-quoted-exec ((t (:foreground ,stein-green))))
   ;; show-paren
   `(show-paren-match-face ((t (:background unspecified
                                            :foreground ,stein-cyan
                                            :weight bold))))
   `(show-paren-match ((t (:background ,stein-yellow
                                       :foreground ,stein-blue
                                       :weight bold))))
   `(show-paren-match-expression ((t (:inherit region))))
   `(show-paren-mismatch ((t (:inherit font-lock-warning-face))))
   ;; slime
   `(slime-repl-inputed-output-face ((t (:foreground ,stein-purple))))
   ;; spam
   `(spam ((t (:inherit gnus-summary-normal-read :foreground ,stein-blue
                        :strike-through t :slant oblique))))
   ;; tab-bar & tab-line (since Emacs 27.1))))
   `(tab-bar ((t (:foreground ,stein-magenta :background ,bg2
                              :inherit variable-pitch))))
   `(tab-bar-tab ((t (:background ,stein-current :inherit tab-bar))))
   `(tab-bar-tab-inactive ((t (:foreground ,stein-purple :background ,bg3
                                           :inherit tab-bar-tab))))
   `(tab-line ((t (:height 0.9 :foreground ,stein-magenta
                           :background ,bg2 :inherit variable-pitch))))
   `(tab-line-tab ((t (:background ,stein-current :inherit tab-line))))
   `(tab-line-tab-inactive ((t (:foreground ,stein-purple :background ,bg3
                                            :inherit tab-line-tab))))
   ;; term
   `(term ((t (:foreground ,stein-fg :background ,stein-bg))))
   `(term-color-black ((t (:foreground ,stein-bg :background ,stein-bg))))
   `(term-color-blue ((t (:foreground ,stein-purple :background ,stein-purple))))
   `(term-color-cyan ((t (:foreground ,stein-cyan :background ,stein-cyan))))
   `(term-color-green ((t (:foreground ,stein-green :background ,stein-green))))
   `(term-color-magenta ((t (:foreground ,stein-magenta :background ,stein-magenta))))
   `(term-color-red ((t (:foreground ,stein-red :background ,stein-red))))
   `(term-color-white ((t (:foreground ,stein-fg :background ,stein-fg))))
   `(term-color-yellow ((t (:foreground ,stein-yellow :background ,stein-yellow))))
   ;; undo-tree
   `(undo-tree-visualizer-current-face ((t (:foreground ,stein-blue))))
   `(undo-tree-visualizer-default-face ((t (:foreground ,fg2))))
   `(undo-tree-visualizer-register-face ((t (:foreground ,stein-purple))))
   `(undo-tree-visualizer-unmodified-face ((t (:foreground ,stein-fg))))
   ;; web-mode
   `(web-mode-builtin-face ((t (:inherit ,font-lock-builtin-face))))
   `(web-mode-comment-face ((t (:inherit ,font-lock-comment-face))))
   `(web-mode-constant-face ((t (:inherit ,font-lock-constant-face))))
   `(web-mode-doctype-face ((t (:inherit ,font-lock-comment-face))))
   `(web-mode-function-name-face ((t (:inherit ,font-lock-function-name-face))))
   `(web-mode-html-attr-name-face ((t (:foreground ,stein-purple))))
   `(web-mode-html-attr-value-face ((t (:foreground ,stein-green))))
   `(web-mode-html-tag-face ((t (:foreground ,stein-magenta :weight bold))))
   `(web-mode-keyword-face ((t (:foreground ,stein-magenta))))
   `(web-mode-string-face ((t (:foreground ,stein-yellow))))
   `(web-mode-type-face ((t (:inherit ,font-lock-type-face))))
   `(web-mode-warning-face ((t (:inherit ,font-lock-warning-face))))
   ;; which-func
   `(which-func ((t (:inherit ,font-lock-function-name-face))))
   ;; whitespace
   `(whitespace-big-indent ((t (:background ,stein-red :foreground ,stein-red))))
   `(whitespace-empty ((t (:background ,stein-blue :foreground ,stein-red))))
   `(whitespace-hspace ((t (:background ,bg3 :foreground ,stein-comment))))
   `(whitespace-indentation ((t (:background ,stein-blue :foreground ,stein-red))))
   `(whitespace-line ((t (:background ,stein-bg :foreground ,stein-magenta))))
   `(whitespace-newline ((t (:foreground ,stein-comment))))
   `(whitespace-space ((t (:background ,stein-bg :foreground ,stein-comment))))
   `(whitespace-space-after-tab ((t (:background ,stein-blue :foreground ,stein-red))))
   `(whitespace-space-before-tab ((t (:background ,stein-blue :foreground ,stein-red))))
   `(whitespace-tab ((t (:background ,bg2 :foreground ,stein-comment))))
   `(whitespace-trailing ((t (:inherit trailing-whitespace))))
   ;; yard-mode
   `(yard-tag-face ((t (:inherit ,font-lock-builtin-face))))
   `(yard-directive-face ((t (:inherit ,font-lock-builtin-face))))
   )

  (custom-theme-set-variables
   'stein
   `(pdf-view-midnight-colors '(,stein-fg . ,stein-bg))
   `(org-todo-keyword-faces
     '(("CANCELLED" :foreground ,stein-comment :weight bold)
       ("TODO" :weight bold :foreground ,stein-blue )
       ("STARTED" :weight bold :foreground ,stein-green )
       ("WAIT" :weight bold :foreground ,stein-cyan )
       ("DONE" :weight bold :foreground ,stein-comment )

       ))
   `(mouse-scroll-delay 0)
   `(mouse-wheel-flip-direction t)
   `(mouse-wheel-progressive-speed nil)
   `(mouse-wheel-scroll-amount '(0.03))
   `(mouse-wheel-tilt-scroll t)))

(provide-theme 'stein)

;;; stein-theme.el ends here
#+end_src
** Font
#+begin_src elisp
(defvar luna-font-settings nil
  "A list of (FACE . FONT-NAME).
FONT-NAMEs are keys in ‘luna-font-alist’.")

(defvar luna-cjk-rescale-alist
  '(("Source Han Serif SC" . 1.3)
    ;; ("Source Han Sans SC" . 1.3)
    ("FZFW ZhuZi MinchoS" . 1.3))
  "A list of font names that should be rescaled.")

(defvar luna-font-alist
  `(("SF Mono" . ("SF Mono" "Source Han Serif SC" 1.3))
    ("IBM Plex Mono" . ("IBM Plex Mono" "LXGW WenKai" 1.0))
    ("SF Pro Text" . ("SF Pro Text" "Source Han Serif SC" 1.1))
    ("IBM Plex Sans" . ("IBM Plex Sans" "Source Han Serif SC" 1.1))
    ("Dossier" . ("Dossier" "Source Han Serif SC" 1.3))
    ("Academica" . ("Academica Book" "Source Han Serif SC" 1.0))

    ;; TODO
    ("Bookerly" . ("Bookerly" "Source Han Serif SC" 1.3))
    ("Cascadia Code" . ("Cascadia Code" "Source Han Serif SC" 1.3))
    ("Monego" . ("Monego" "Source Han Serif SC" 1.3))
    ("Latin Modern Mono" . ("Latin Modern Mono" "Source Han Serif SC" 1.3))
    ("Menlo" . ("Menlo" "Source Han Serif SC" 1.3))
    ("MonoLisa Nasy" . ("MonoLisa Nasy" "Source Han Serif SC" 1.3))

    ("方正fW筑紫明朝" . (nil "FZFW ZhuZi MinchoS" 1))
    ("Source Han Serif" . (nil "Source Han Serif SC" 1))
    ("Source Han Sans" . (nil "Source Han Sans SC" 1))
    ("LXGW WenKai" . (nil "LXGW WenKai" 1))

    ("Charter 13" . ("Charter" nil 1 :size 13))
    ("GNU Unifont 15" . ("Unifont" nil 1 :size 15))
    ("SF Mono Light 13" . ("SF Mono" nil 1 :size 13 :weight light))
    ("PragmataPro 13" . ("PragmataPro Mono" nil 1 :size 13))
    ("Iosevka 13" . ("Iosevka" nil :size 14))
    ("JetBrains Mono 12" . ("JetBrains Mono" nil 1 :size 12))
    ("Roboto Mono 12" . ("Roboto Mono" nil 1 :size 12 :weight light)))
  "An alist of all the fonts you can switch between by `luna-load-font'.
Each element is like

    (FONT-NAME . (ASCII-NAME CJK-NAME CJK-SCALE))

FONT-NAME is the display name, ASCII-NAME is the ASCII font
family name, CJK-NAME is the CJK font family name, CJK-SCALE is
the CJK font rescale ratio.")

(defun luna-create-fontset (ascii-spec cjk-spec)
  "Create a fontset NAME with ASCII-SPEC and CJK-SPEC font."
  (let* ((fontset-name
          (concat "fontset-" (downcase (plist-get ascii-spec :family))))
         ;; ASCII font.
         (fontset
          (create-fontset-from-fontset-spec
           (font-xlfd-name
            (apply #'font-spec :registry fontset-name ascii-spec)))))
    ;; CJK font.
    (dolist (charset '(kana han cjk-misc))
      (set-fontset-font fontset charset (apply #'font-spec cjk-spec)))
    fontset))

(defun luna-font-name-to-spec (font-name size &rest attrs)
  "Translate FONT-NAME, SIZE and ATTRS to (ASCII-SPEC CJK-SPEC)."
  (let* ((font-spec (if (null font-name)
                        (cdar luna-font-alist)
                      (alist-get font-name luna-font-alist
                                 nil nil #'equal)))
         (ascii-family (nth 0 font-spec))
         (cjk-family (nth 1 font-spec))
         (cjk-scale (nth 2 font-spec))
         (rest-spec (append (nthcdr 3 font-spec) attrs))
         ;; (rest-spec (setf (plist-get rest-spec :size) size))
         (ascii-rest-spec (append `(:size ,size) rest-spec))
         (cjk-rest-spec (append `(:size ,(* cjk-scale size))
                                rest-spec))
         (ascii-spec (and ascii-family
                          `(:family ,ascii-family ,@ascii-rest-spec)))
         (cjk-spec (and cjk-family
                        `(:family ,cjk-family ,@cjk-rest-spec))))
    (list ascii-spec cjk-spec)))

(defun luna-load-default-font (font-name size &rest attrs)
  "Set font for default face to FONT-NAME with SIZE and ATTRS.
See ‘luna-load-font’."
  ;; We use a separate function for default font because Emacs has a
  ;; bug that prevents us from setting a fontset for the default face
  ;; (although ‘set-frame-parameter’ works). So we just set default
  ;; face with ASCII font and use default fontset for Unicode font.
  (interactive
   (list (completing-read
          "Font: " (mapcar #'car luna-font-alist))
         (string-to-number (completing-read
                            "Size: " nil nil nil nil nil "13"))))
  (let* ((specs (apply #'luna-font-name-to-spec font-name size attrs))
         (ascii (apply #'font-spec (car specs)))
         (cjk (apply #'font-spec (cadr specs))))
    (set-face-attribute 'default nil :font ascii)
    (set-fontset-font t 'kana cjk)
    (set-fontset-font t 'han cjk)
    (set-fontset-font t 'cjk-misc cjk)
    (set-fontset-font t 'symbol cjk nil 'append)))

(defun luna-load-font (face font-name size &rest attrs)
  "Set font for FACE to FONT-NAME.
If FONT-NAME is nil, use the first font in ‘luna-font-alist’.
SIZE is the font size in pt. Add additional face attributes in
ATTRS.

Use ‘luna-save-font-settings’ to save font settings and use
‘luna-load-saved-font’ to load them next time."
  (interactive
   (list (intern (completing-read
                  "Face: " (face-list)))
         (completing-read
          "Font: " (mapcar #'car luna-font-alist))
         (string-to-number (completing-read
                            "Size: " nil nil nil nil nil "13"))))
  (if (and (eq face 'default))
      (apply #'luna-load-default-font font-name size attrs)
    (let* ((fontset
            (apply #'luna-create-fontset
                   (apply #'luna-font-name-to-spec font-name size attrs))))
      (apply #'set-face-attribute face nil
             :font fontset
             :fontset fontset
             attrs)))
  ;; Save the settings.
  (setf (alist-get face luna-font-settings) `(,font-name ,size ,@attrs))
  (custom-set-variables
   `(luna-font-settings
	 ',luna-font-settings
	 nil nil "Automatically saved by ‘luna-load-font’")))

(defun luna-save-font-settings ()
  "Save font-settings set by ‘luna-load-font’."
  (interactive)
  (custom-save-all))

(defun luna-load-saved-font ()
  "Load font settings saved in ‘luna-font-settings’."
  (dolist (setting luna-font-settings)
	(apply #'luna-load-font setting)))

(define-minor-mode luna-scale-cjk-mode
  "Scale CJK font to align CJK font and ASCII font."
  :lighter ""
  :global t
  :group 'luna
  (dolist (setting luna-cjk-rescale-alist)
	(setf (alist-get (car setting)
                     face-font-rescale-alist nil nil #'equal)
		  (if luna-scale-cjk-mode (cdr setting) nil))))

(defun luna-enable-apple-emoji ()
  "Enable Apple emoji display."
  (set-fontset-font t 'emoji (font-spec :family "Apple Color Emoji")
                    nil 'prepend))

(defvar eat/font-default '("IBM Plex Mono" 13))
(defvar eat/font-variable-pitch '("Bookerly" 16))
(defvar eat/font-mode-line '("SF Pro Text" 13))
(defvar eat/font-emoji "Noto Color Emoji")

(add-hook 'eat/after-make-window-system-frame-hooks
          (lambda ()
            (set-fontset-font t 'emoji (font-spec :family eat/font-emoji) nil 'prepend)
            (luna-load-font 'default (car eat/font-default) (cadr eat/font-default) :weight 'medium)
            (luna-load-font 'fixed-pitch (car eat/font-default) (cadr eat/font-default) :weight 'medium)
            ;; (luna-load-font 'variable-pitch "Academica" 16)
            (luna-load-font 'variable-pitch (car eat/font-variable-pitch) (cadr eat/font-variable-pitch))
            (luna-load-font 'mode-line (car eat/font-mode-line) (cadr eat/font-mode-line) :weight 'light)
            (add-hook 'luna-load-theme-hook
                      (lambda ()
                        (luna-load-font 'mode-line "SF Pro Text" 13 :weight 'light)
                        (luna-load-font 'mode-line-inactive "SF Pro Text" 13 :weight 'light)))))
#+end_src
** Modeline
*** GUI
#+begin_src elisp
(eat-package awesome-tray
  :straight (awesome-tray :type git :host github :repo "manateelazycat/awesome-tray")
  :init
  (setq
   awesome-tray-active-modules '("anzu" "buffer-read-only" "buffer-name" "mode-name" "location")
   awesome-tray-update-interval 0.5
   awesome-tray-info-padding-right 2
   awesome-tray-minibuffer nil
   awesome-tray-essential-modules nil)
  :config
  (setq-default mode-line-format " ")
  (add-hook 'luna-load-theme-hook #'awesome-tray-enable)
  (setq rime-show-candidate 'posframe
        dirvish-mode-line-format " "
        dirvish-mode-line-height 0.1
        ;; https://emacs-china.org/t/awesome-tray-emacs-mode-line/7250/174?u=rua;
        org-clock-clocked-in-display nil)

  ;; `rime'
  (with-eval-after-load 'rime
    (add-to-list 'awesome-tray-module-alist
                 '("rime" . (rime-lighter)))
    (add-to-list 'awesome-tray-active-modules "rime"))

  ;; `flymake'
  (with-eval-after-load 'flymake
    (add-to-list 'awesome-tray-module-alist
                 '("flymake" . (sekiro-flymake-mode-line-format)))
    (add-to-list 'awesome-tray-active-modules "flymake"))

  ;; `popper', disable
  (with-eval-after-load 'popper
    (setq popper-mode-line nil))

  ;; `meow'
  (with-eval-after-load 'meow
    (defun awesome-tray-module-meow-info ()
      (string-trim (meow-indicator)))
    (add-to-list 'awesome-tray-module-alist
                 '("meow" . (awesome-tray-module-meow-info awesome-tray-module-evil-face)))
    (add-to-list 'awesome-tray-active-modules "meow")))

;; (add-hook 'eat/after-make-window-system-frame-hooks #'awesome-tray-mode)
#+end_src

*** TUI
#+begin_src elisp
(eat-package minions :elpaca t)

(defun eat/setup-modeline ()
  (interactive)
  (minions-mode))

(add-hook 'eat/after-make-window-system-frame-hooks #'eat/setup-modeline)
;; (add-hook 'eat/after-make-console-frame-hooks #'eat/setup-modeline)
#+end_src
** Notifications
Actually, `notify-send' is not defined in notifications package, but the
autoload cookie will make Emacs load `notifications' first, then our
`defalias' will be evaluated.
#+begin_src elisp
(pcase system-type
  ('gnu/linux
   (autoload #'notify-send "notifications")
   (with-eval-after-load "notifications"
     (defalias 'notify-send 'notifications-notify)))
  ('darwin
   ;; HACK you must enable notify for emacs in macos system
   ;;      Notifications & Focus -> Emacs -> Allow Notifications
   (defun notify-send (&rest params)
     "Send notifications via `terminal-notifier'."
     (let ((title (plist-get params :title))
           (body (plist-get params :body)))
       (start-process "terminal-notifier"
                      nil
                      "terminal-notifier"
                      "-group" "Emacs"
                      "-title" title
                      "-message" body
                      ;; FIXME this option didn't show emacs icon
                      ;; but -sender didn't show the message when focus on emacs
                      "-activate" "org.gnu.Emacs"))))
  (_
   (defalias 'notify-send 'ignore)))
#+end_src

** Text Scale
#+begin_src elisp
(eat-package default-text-scale
  :elpaca t
  :init
  (global-set-key (kbd "C-x C-=") #'default-text-scale-increase)
  (global-set-key (kbd "C-x C--") #'default-text-scale-decrease))
#+end_src

** Icon
#+begin_src elisp
(when (and eat/enable-icon (display-graphic-p))
  (eat-package all-the-icons-ibuffer
    :after ibuffer
    :elpaca t
    :hook (ibuffer-mode-hook . all-the-icons-ibuffer-mode))

  (eat-package all-the-icons-completion
    :straight (all-the-icons-completion :type git :host github :repo "iyefrat/all-the-icons-completion")
    :hook (after-init-hook . (lambda ()
                               (all-the-icons-completion-mode)))
    :config
    (with-eval-after-load 'marginalia
      ;; FIXME hook is nil
      (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))))
#+end_src
** Highlight and center after jump
#+begin_src elisp
(eat-package hl-line
  :init
  (setq-default hl-line-sticky-flag nil)
  ;; (when (display-graphic-p)
  ;;   (add-hook 'prog-mode-hook #'hl-line-mode)
  ;;   (add-hook 'conf-mode-hook #'hl-line-mode))
  :config
  (add-hook 'post-command-hook #'(lambda ()
                                   "When `hl-line-mode' is enable, unhighlight if region is active."
                                   (when (and (bound-and-true-p hl-line-mode)
                                              (region-active-p))
                                     (hl-line-unhighlight)))))

(eat-package pulse
  :hook
  ((imenu-after-jump-hook isearch-update-post-hook)
   . eat/recenter-and-pulse)
  ((bookmark-after-jump  next-error)
   . eat/recenter-and-pulse-line)
  :init
  (custom-set-faces
   '(pulse-highlight-start-face ((t (:inherit region))))
   '(pulse-highlight-face ((t (:inherit region)))))

  (defun eat/pulse-momentary-line (&rest _)
    "Pulse the current line."
    (pulse-momentary-highlight-one-line (point)))

  (defun eat/pulse-momentary (&rest _)
    "Pulse the region or the current line."
    (if (fboundp 'xref-pulse-momentarily)
        (xref-pulse-momentarily)
      (eat/pulse-momentary-line)))

  (defun eat/recenter-and-pulse(&rest _)
    "Recenter and pulse the region or the current line."
    (recenter)
    (eat/pulse-momentary))

  (defun eat/recenter-and-pulse-line (&rest _)
    "Recenter and pulse the current line."
    (recenter)
    (eat/pulse-momentary-line))

  (dolist (cmd '(recenter-top-bottom
                 other-window windmove-do-window-select
                 pager-page-down pager-page-up))
    (advice-add cmd :after #'eat/pulse-momentary-line))

  (dolist (cmd '(pop-to-mark-command
                 pop-global-mark
                 compile-goto-error
                 goto-last-change))
    (advice-add cmd :after #'eat/recenter-and-pulse)))
#+end_src
* Minibuffer
#+begin_src elisp
(eat-package minibuffer
  :init
  (setq
   completion-styles '(basic partial-completion)
   completion-category-overrides '((file (styles basic partial-completion)))
   completion-cycle-threshold t
   minibuffer-depth-indicate-mode t
   minibuffer-eldef-shorten-default t
   minibuffer-electric-default-mode t))
#+end_src
** completion
#+begin_src elisp
(eat-package vertico
  :straight (vertico :files (:defaults "extensions/*"))
  :hook
  (after-init-hook . vertico-mode)
  :config
  (define-key vertico-map (kbd "C-j") #'(lambda () (interactive)
                                          (if minibuffer--require-match
                                              (minibuffer-complete-and-exit)
                                            (exit-minibuffer))))
  (eat-package vertico-directory
    :hook (rfn-eshadow-update-overlay-hook . vertico-directory-tidy)
    :init
    (define-key vertico-map (kbd "DEL") #'vertico-directory-delete-char)
    (define-key vertico-map (kbd "M-DEL") #'vertico-directory-delete-word)
    (define-key vertico-map (kbd "RET") #'vertico-directory-enter)))

(eat-package orderless
  :straight t
  :after vertico
  :hook (minibuffer-setup-hook . sanityinc/use-orderless-in-minibuffer)
  :init
  (defun sanityinc/use-orderless-in-minibuffer ()
    (setq-local completion-styles '(substring orderless)))
  :config
  (defun completion--regex-pinyin (str)
    (orderless-regexp (pinyinlib-build-regexp-string str)))
  (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))
#+end_src
** history
#+begin_src elisp
(eat-package savehist
  :hook (after-init-hook . savehist-mode)
  :init
  ;; Restore histories and registers after saving
  (setq history-length 1000))
#+end_src
** marginalia
#+begin_src elisp
(eat-package marginalia
  :straight t
  :hook (after-init-hook . marginalia-mode))
#+end_src
* Buffer
** auto revert
#+begin_src elisp
(eat-package autorevert
  :hook (after-init-hook . global-auto-revert-mode))
#+end_src
** auto save
#+begin_src elisp
(eat-package auto-save
  :straight (auto-save
             :type git
             :host github
             :repo "manateelazycat/auto-save")
  :commands auto-save-enable
  :hook (after-init-hook . (lambda ()
                             (auto-save-enable)))
  :init
  (setq
   auto-save-silent t
   ;; most time I will save manually
   auto-save-idle 7))
#+end_src
** save place
#+begin_src elisp
(eat-package saveplace
  :hook (after-init-hook . save-place-mode))
#+end_src
** long line
#+begin_src elisp
(eat-package so-long
  :hook (after-init-hook . global-so-long-mode))
#+end_src
** ibuffer
#+begin_src elisp
(eat-package ibuffer
  :init
  (fset 'list-buffers 'ibuffer)
  (setq-default ibuffer-show-empty-filter-groups nil)
  (global-set-key (kbd "C-x B") 'ibuffer)
  ;; Modify the default ibuffer-formats (toggle with `)
  (setq ibuffer-formats
        '((mark modified read-only vc-status-mini " "
                (name 22 22 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 12 12 :left :elide)
                " "
                vc-relative-file)
          (mark modified read-only vc-status-mini " "
                (name 22 22 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 14 14 :left :elide)
                " "
                (vc-status 12 12 :left)
                " "
                vc-relative-file)))
  :config
  (setq ibuffer-filter-group-name-face 'font-lock-doc-face)
  :config
  (with-eval-after-load 'fullframe
    (fullframe ibuffer ibuffer-quit))
  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (file-size-human-readable (buffer-size))))
#+end_src
* Window Management
** built-in
*** winner
#+begin_src elisp
(eat-package winner
  :hook (after-init-hook . winner-mode)
  :init
  (setq winner-dont-bind-my-keys t))
#+end_src
*** Change default behavior of split window
#+begin_src elisp
;; When splitting window, show (other-buffer) in the new window

;; TODO drop dash.el
(defun +project-previous-buffer ()
  "Toggle to the previous buffer that belongs to current project."
  (if-let ((pr (project-current)))
      (->> (project--buffer-list pr)
           (--remove (or (minibufferp it)
                         (get-buffer-window-list it)))
           (car))))

(defun split-window-func-with-other-buffer (split-function)
  (lambda (&optional arg)
    "Split this window and switch to the new window unless ARG is provided."
    (interactive "P")
    (funcall split-function)
    (let ((target-window (next-window)))
      (set-window-buffer target-window (+project-previous-buffer))
      (unless arg
        (select-window target-window)))))

(global-set-key (kbd "C-x 2") (split-window-func-with-other-buffer 'split-window-vertically))
(global-set-key (kbd "C-x 3") (split-window-func-with-other-buffer 'split-window-horizontally))

(defun sanityinc/toggle-delete-other-windows ()
  "Delete other windows in frame if any, or restore previous window config."
  (interactive)
  (if (and winner-mode
           (equal (selected-window) (next-window)))
      (winner-undo)
    (delete-other-windows)))

(global-set-key (kbd "C-x 1") 'sanityinc/toggle-delete-other-windows)
#+end_src
*** Rearrange split winows
#+begin_src elisp
(defun split-window-horizontally-instead ()
  "Kill any other windows and re-split such that the current window is on the top half of the frame."
  (interactive)
  (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
    (delete-other-windows)
    (split-window-horizontally)
    (when other-buffer
      (set-window-buffer (next-window) other-buffer))))

(defun split-window-vertically-instead ()
  "Kill any other windows and re-split such that the current window is on the left half of the frame."
  (interactive)
  (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
    (delete-other-windows)
    (split-window-vertically)
    (when other-buffer
      (set-window-buffer (next-window) other-buffer))))

(global-set-key (kbd "C-x |") 'split-window-horizontally-instead)
(global-set-key (kbd "C-x _") 'split-window-vertically-instead)
#+end_src
** ace-window
#+begin_src elisp
(eat-package ace-window
  :elpaca t
  :commands
  ace-swap-window
  ace-window
  :init
  (global-set-key (kbd "M-o") 'ace-window)
  (setq aw-keys '(?a ?o ?e ?u ?i)
        aw-scope 'frame)
  (dolist (cmd '(ace-window
                 aw--select-window))
    (advice-add cmd :after #'eat/pulse-momentary-line)))
#+end_src
** popper
#+begin_src elisp
(eat-package popper
  :straight t
  :hook (after-init-hook . (lambda ()
                             (popper-mode +1)))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          "\\*Compile-Log\\*"
          "\\*Completions\\*"
          "\\*Warnings\\*"

          "^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
          "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
          "^\\*term.*\\*$"   term-mode   ;term as a popup
          "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup

          ;; help & message
          help-mode
          ghelp-page-mode
          compilation-mode))
  (with-eval-after-load 'project
    (setq popper-group-function 'popper-group-by-project))
  :config
  (global-set-key (kbd "C-M-`") #'popper-toggle-type)
  (defun my-popper-fit-window-height (win)
    "Determine the height of popup window WIN by fitting it to the buffer's content."
    (fit-window-to-buffer
     win
     (floor (frame-height) 3)
     (floor (frame-height) 3)))
  (setq popper-window-height #'my-popper-fit-window-height))
#+end_src

* Editing
** Modal
*** Setup
#+begin_src elisp
(defun meow-setup-dvorak ()
  (interactive)
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-dvorak
        +meow-layout 'dvorak)

  (meow-motion-overwrite-define-key
   '("<escape>" . mode-line-other-buffer)
   '("'" . repeat)
   '(")" . tab-bar-switch-to-prev-tab)
   '("}" . tab-bar-switch-to-next-tab)
   )

  ;; NOTE key defined in leader same as bind to C-c
  ;; so make sure it didn't conflict with keybindings
  ;; defined in other files or bulitin that start with C-c
  ;; or use this to make it start with C-c m
  (defalias 'meow-leader-command-prefix (make-sparse-keymap))
  (defvar meow-leader-map (symbol-function 'meow-leader-command-prefix)
    "Keymap for characters following C-c m.")
  (define-key global-map "\C-c\ m" 'meow-leader-command-prefix)
  (add-to-list 'meow-keymap-alist (cons 'leader 'meow-leader-command-prefix))

  (meow-leader-define-key
   '("a" . execute-extended-command)
   '("e" . "C-x C-e")
   '(";" . comment-dwim)
   '("-" . negative-argument)

   ;; file
   '("f" . find-file)
   '("F" . find-file-other-window)

   ;; buffer
   '("b" . switch-to-buffer)
   '("B" . switch-to-buffer-other-window)
   '("k" . kill-this-buffer)

   ;; window
   '("w" . ace-window)
   '("W" . ace-swap-window)
   '("o" . "C-x 1")
   '("O" . ace-delete-window)
   '("q" . delete-window)
   '("-" . "C-x 2")
   '("s" . "C-x 3")

   ;; xref
   '("." . "M-.")
   '("," . "M-,")
   '("?" . "M-?")

   ;; project, bind to keymap
   (cons "p" project-prefix-map)
   ;; smerge
   ;; (cons "=" smerge-basic-map)

   ;; tab-bar
   (cons "t" tab-prefix-map)

   ;; app
   '("d" . dired)
   '("v" . magit)
   '("r" . rg-project)
   '("C" . xeft)

   ;; toggles
   '("$" . load-theme)
   '("L" . display-line-numbers-mode)
   '("@" . treemacs-select-window)
   '("A" . org-agenda-list)
   '("T" . telega)
   )

  (meow-normal-define-key
   '("?" . meow-cheatsheet)
   '("<escape>" . mode-line-other-buffer)
   '(";" . meow-reverse)
   '("g" . meow-cancel-selection)
   '("q" . meow-quit)

   ;; expand by numbers
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)

   ;; movement, like hjkl
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("t" . meow-right)
   '("T" . meow-right-expand)
   '("n" . meow-next)
   '("N" . meow-next-expand)
   '("p" . meow-prev)
   '("P" . meow-prev-expand)

   ;; insert above/below
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("A" . meow-open-below)
   '("a" . meow-append)

   ;; move/mark by word/symbol
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("w" . meow-next-word)
   '("W" . meow-next-symbol)
   '("m" . meow-mark-word)
   '("M" . meow-mark-symbol)

   ;; kill/delete/change/replace
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("k" . meow-kill)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("c" . meow-change)

   ;; line operation
   '("j" . meow-join)
   '("e" . meow-line) ;; NOTE F3 or insert/append/change in grab to enable "every n line" grab
   '("E" . meow-goto-line)
   '("o" . meow-block)
   '("O" . meow-to-block)

   ;; yank/pop
   '("x" . meow-save)
   '("X" . meow-sync-grab)
   '("y" . meow-yank)

   ;; grab
   '("G" . meow-grab)
   '("z" . meow-pop-selection)

   ;; query replace
   '("&" . meow-query-replace)
   '("%" . meow-query-replace-regexp)

   ;; thing
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("<" . meow-beginning-of-thing)
   '(">" . meow-end-of-thing)

   ;; find/till/visit, most used in beacon mode
   '("/" . meow-search)
   '("F" . meow-find)
   '("L" . meow-till)
   '("l" . meow-visit)

   ;; undo
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)


   ;;
   '(":" . execute-extended-command)

   ;; scroll
   '("v" . scroll-up-command)
   '("V" . scroll-down-command)

   ;; buffer
   '("S" . save-buffer)

   ;; window
   '("s" . ace-window)

   ;; wrap && unwrap
   '("\"" . insert-pair)
   '("[" . insert-pair)
   '("{" . insert-pair)
   '("(" . insert-pair)
   '("]" . delete-pair) ;; NOTE maybe custom `delete-pair-blink-delay'

   ;; flymake
   '("Q" . flymake-goto-prev-error)
   '("J" . flymake-goto-next-error)

   ;; tab-bar
   '(")" . tab-bar-switch-to-prev-tab)
   '("}" . tab-bar-switch-to-next-tab)

   ;; misc
   '("'" . repeat)
   ))
#+end_src
*** Config
#+begin_src elisp
(eat-package meow
  :straight t
  :hook
  (after-init-hook . (lambda ()
                       (meow-global-mode 1)))
  :init
  (setq meow-visit-sanitize-completion nil)
  :config
  (setq meow-esc-delay 0.001
        meow-keypad-describe-delay 1.0)

  ;; specific font so that line won't break
  (advice-add 'meow-cheatsheet :after (lambda ()
                                        (interactive)
                                        (setq buffer-face-mode-face '(:family "Menlo"))
                                        (buffer-face-mode +1)))

  ;; normal mode list
  (dolist (mode '(go-dot-mod-mode
                  diff-mode))
    (add-to-list 'meow-mode-state-list `(,mode . normal)))
  ;; motion mode list
  (dolist (mode '(lsp-bridge-ref-mode
                  Info-mode
                  ghelp-page-mode
                  notmuch-hello-mode
                  notmuch-search-mode
                  notmuch-tree-mode))
    (add-to-list 'meow-mode-state-list `(,mode . motion)))
  (dolist (mode '(xeft-mode
                  gud-mode))
    (add-to-list 'meow-mode-state-list `(,mode . insert)))

  (meow-setup-indicator)
  (meow-setup-dvorak))
#+end_src
** query replace
#+begin_src elisp
(eat-package anzu
  :elpaca t
  :init
  (global-set-key [remap query-replace] 'anzu-query-replace)
  (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp))
#+end_src
** TODO Misc
#+begin_src elisp
(eat-package separedit
  :elpaca t
  :hook (separedit-mode-hook . (lambda () (auto-fill-mode 1)))
  :init
  ;; use C-u C-c ' to select major mode
  (global-set-key (kbd "C-c '") #'separedit))

(eat-package puni
  :elpaca (puni :host github :repo "AmaiKinono/puni")
  :hook
  ((emacs-lisp-mode-hook scheme-mode-hook clojure-mode-hook)
   . puni-mode)
  :config
  (define-key puni-mode-map (kbd "M-r") 'puni-splice)
  (define-key puni-mode-map (kbd "C-(") 'puni-slurp-backward)
  (define-key puni-mode-map (kbd "C-)") 'puni-slurp-forward)
  (define-key puni-mode-map (kbd "C-{") 'puni-barf-backward)
  (define-key puni-mode-map (kbd "C-}") 'puni-barf-forward))

;; Better scroll on picture in GUI
(eat-package iscroll :straight t)

(eat-package visual-fill-column
  :elpaca t
  :hook (visual-fill-column-mode-hook . visual-line-mode)
  :init
  (setq-default visual-fill-column-center-text t))

(eat-package ligature
  :elpaca (ligature :host github :repo "mickeynp/ligature.el")
  :commands global-ligature-mode
  :hook (prog-mode-hook . (lambda () (ligature-mode t)))
  :config
  ;; https://htmlpreview.github.io/?https://github.com/kiliman/operator-mono-lig/blob/master/images/preview/normal/index.html
  (ligature-set-ligatures 'prog-mode
                          '("&&" "||" "|>" ":=" "==" "===" "==>" "=>"
                            "=<<" "!=" "!==" ">=" ">=>" ">>=" "->" "--"
                            "-->" "<|" "<=" "<==" "<=>" "<=<" "<!--" "<-"
                            "<->" "<--" "</" "+=" "++" "??" "/>" "__" "WWW")))

(eat-package hl-todo
  :elpaca t
  :hook
  ((dired-mode-hook prog-mode-hook conf-mode-hook) . hl-todo-mode))

(eat-package imenu-list
  :elpaca t
  :hook
  (imenu-list-major-mode-hook . (lambda ()
                                  (setq-local header-line-format nil)))
  :init
  (defun +imenu-scale-font-size ()
    (face-remap-add-relative 'default :height 0.8))
  (add-hook 'imenu-list-major-mode-hook #'+imenu-scale-font-size)
  (setq imenu-list-auto-resize t
        imenu-list-mode-line-format nil))

#+end_src
** undo
#+begin_src elisp
(eat-package vundo
  :elpaca (vundo :host github :repo "casouri/vundo")
  :commands vundo)

(eat-package undo-hl
  :elpaca (undo-hl :host github :repo "casouri/undo-hl")
  :hook
  ((prog-mode-hook conf-mode-hook) . undo-hl-mode))
#+end_src
** Remote Editing
#+begin_src elisp
(eat-package tramp
  :init
  (setq
   remote-file-name-inhibit-locks t
   tramp-verbose 1 ;; only show error message
   tramp-completion-reread-directory-timeout nil ;;  speed up complete
   tramp-auto-save-directory temporary-file-directory
   ;; Always use file cache when using tramp
   remote-file-name-inhibit-cache nil
   ;; C-x C-f /ssh:
   tramp-default-method "ssh"
   vc-ignore-dir-regexp (format "\\(%s\\)\\|\\(%s\\)"
                                vc-ignore-dir-regexp
                                tramp-file-name-regexp))

  (defun eat/reopen-file-with-sudo ()
    (interactive)
    (find-alternate-file (format "/sudo::%s" (buffer-file-name))))
  (global-set-key (kbd "C-x C-z") #'eat/reopen-file-with-sudo)

  ;; https://www.reddit.com/r/emacs/comments/y92y4b/tramp_users_slowness_got_you_down_check/
  (defun my-vc-off-if-remote ()
    (if (file-remote-p (buffer-file-name))
        (setq-local vc-handled-backends '(Git))))
  (add-hook 'find-file-hook 'my-vc-off-if-remote)
  :config
  ;; use `magit' with yadm, (magit-status "/yadm::")
  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter")))
                 (tramp-login-env (("SHELL") ("/bin/sh")))
                 (tramp-remote-shell "/bin/sh")
                 (tramp-remote-shell-args ("-c"))))
  ;; ‘Private Directories’ are the settings of the $PATH environment,
  ;; as given in your ‘~/.profile’.  This entry is represented in
  ;; the list by the special value ‘tramp-own-remote-path’.
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src
** ediff
#+begin_src elisp
(eat-package ediff
  :init
  (defvar local-ediff-saved-window-conf nil)

  (defun eat/ediff-save-window-conf ()
    (setq local-ediff-saved-window-conf (current-window-configuration)))

  (defun eat/ediff-restore-window-conf ()
    (when (window-configuration-p local-ediff-saved-window-conf)
      (set-window-configuration local-ediff-saved-window-conf)))

  (setq ediff-window-setup-function #'ediff-setup-windows-plain
        ediff-highlight-all-diffs t
        ediff-split-window-function 'split-window-horizontally
        ediff-merge-split-window-function 'split-window-horizontally)
  :config
  ;; Restore window config after quitting ediff
  (add-hook 'ediff-before-setup-hook #'eat/ediff-save-window-conf)
  (add-hook 'ediff-quit-hook #'eat/ediff-restore-window-conf))
#+end_src
** spell check
#+begin_src elisp
(eat-package ispell
  :init
  (when eat/macp
    (setenv "DICTIONARY" "en_US"))
  ;; no spell checking for org special blocks
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_example" . "#\\+end_example"))
  (setq ispell-really-hunspell t
        ispell-program-name "hunspell"
        ispell-dictionary "en_US"
        ispell-following-word t
        ispell-personal-dictionary (locate-user-emacs-file "hunspell_dict.txt")))

(eat-package flyspell
  :init
  ;; `flyspell' -- only enable in magit commit
  (setq flyspell-issue-welcome-flag nil
        flyspell-issue-message-flag nil)
  :config
  (setq flyspell-mode-map nil))
#+end_src
** TODO Chinese input
- Enable rime will increase awesome-tray modeline width
- Emacs can’t exis with =C-x C-c=
#+begin_src elisp
;; curl -L -O https://github.com/rime/librime/releases/download/1.7.2/rime-1.7.2-osx.zip
;; unzip rime-1.7.2-osx.zip -d ~/.config/emacs/librime
;; rm -rf rime-1.7.2-osx.zip
(eat-package rime
  :elpaca t
  :commands toggle-input-method
  :init
  (defun +rime-predicate-org-syntax-punc-p ()
    (when (eq major-mode 'org-mode)
      (member rime--current-input-key '(91 93 42 126))))

  (defun +rime-predicate-md-syntax-punc-p ()
    (when (eq major-mode 'markdown-mode)
      (member rime--current-input-key '(91 93 96))))

  (setq rime-disable-predicates '(meow-normal-mode-p
                                  ;; meow-motion-mode-p
                                  meow-keypad-mode-p
                                  meow-beacon-mode-p
                                  +rime-predicate-org-syntax-punc-p
                                  +rime-predicate-md-syntax-punc-p)
        rime-inline-predicates '(rime-predicate-space-after-cc-p
                                 rime-predicate-current-uppercase-letter-p
                                 +rime-predicate-md-syntax-punc-p)
        rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g" "C-v" "M-v")
        rime-inline-ascii-holder ?a
        default-input-method "rime"
        rime-cursor "|"
        rime-show-candidate 'minibuffer)
  (when eat/macp
    (setq rime-librime-root (expand-file-name "librime/dist" user-emacs-directory)))
  :config
  (setq-default
   rime-posframe-properties (list :internal-border-width 1)
   mode-line-format (append '((:eval (rime-lighter))) mode-line-format)
   )
  (set-face-attribute 'rime-indicator-face nil :height 0.9)
  (set-face-attribute 'rime-indicator-dim-face nil :height 0.9)
  (define-key rime-active-mode-map [tab] 'rime-inline-ascii)
  (define-key rime-mode-map (kbd "M-j") 'rime-force-enable))
#+end_src

* Tools
** Translate
#+begin_src elisp
(eat-package fanyi
  :elpaca (fanyi :host github :repo "condy0919/fanyi.el")
  :hook (fanyi-mode-hook . visual-line-mode)
  :init
  (setq fanyi-verbose nil)
  (global-set-key (kbd "C-c Y") 'fanyi-dwim))

(eat-package go-translate
  :elpaca t
  :init
  (setq gts-translate-list '(("en" "zh")))
  (global-set-key (kbd "C-c y") #'gts-do-translate)
  :config
  (setq gts-default-translator (gts-translator
                                :picker (gts-noprompt-picker)
                                :engines (list (gts-bing-engine) (gts-google-rpc-engine))
                                :render (gts-buffer-render))))
#+end_src

** Help
#+begin_src elisp
(eat-package ghelp
  :elpaca (ghelp :host github :repo "casouri/ghelp")
  :commands
  ghelp-describe
  ghelp-describe-function
  ghelp-describe-variable
  ghelp-describe-key
  ghelp-describe-elisp
  :init
  (global-set-key (kbd "C-h C-h") #'ghelp-describe)
  (global-set-key (kbd "C-h f") #'ghelp-describe-function)
  (global-set-key (kbd "C-h v") #'ghelp-describe-variable)
  (global-set-key (kbd "C-h k") #'ghelp-describe-key)
  (global-set-key (kbd "C-h o") #'ghelp-describe-elisp)
  :config
  (global-set-key (kbd "C-h r") #'ghelp-resume))
#+end_src
** Avy
#+begin_src elisp
(eat-package avy
  :elpaca t
  :init
  (global-set-key (kbd "C-'") #'avy-goto-char-timer)
  :config
  (setq avy-background t
        avy-style 'pre))
#+end_src
* Completion
** isearch
*** better default
#+begin_src elisp
(eat-package isearch
  :init
  (setq
   ;; Match count next to the minibuffer prompt
   isearch-lazy-count t
   ;; Don't be stingy with history; default is to keep just 16 entries
   search-ring-max 200
   regexp-search-ring-max 200
   ;; htighlighted all matching
   isearch-lazy-highlight t
   lazy-highlight-buffer t
   ;; show search count, TODO not work in isearch-mb-mode
   lazy-count-prefix-format nil
   lazy-count-suffix-format " [%s/%s]"
   ;; Record isearch in minibuffer history, so C-x ESC ESC can repeat it.
   isearch-resume-in-command-history t
   ;; M-< and M-> move to the first/last occurrence of the current search string.
   isearch-allow-motion t
   isearch-motion-changes-direction t
   ;; space matches any sequence of characters in a line.
   isearch-regexp-lax-whitespace t
   search-whitespace-regexp ".*?")
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  :config
  (define-advice isearch-occur (:after (_regexp &optional _nlines))
    (isearch-exit))
  (define-key isearch-mode-map (kbd "C-c C-o") #'isearch-occur)
  (define-key isearch-mode-map [escape] #'isearch-cancel)
  ;; Edit the search string instead of jumping back
  (define-key isearch-mode-map [remap isearch-delete-chac] #'isearch-del-chac))
#+end_src
*** isearch-mb
#+begin_src elisp
;; also check https://github.com/astoff/isearch-mb/wiki
(eat-package isearch-mb
  :straight t
  :hook (after-init-hook . isearch-mb-mode)
  :config
  (define-advice isearch-mb--update-prompt (:around (fn &rest _) show-case-fold-info)
    "Show case fold info in the prompt."
    (cl-letf* ((isearch--describe-regexp-mode-orig
                (symbol-function 'isearch--describe-regexp-mode))
               ((symbol-function 'isearch--describe-regexp-mode)
                (lambda (regexp-function &optional space-before)
                  (concat (if isearch-case-fold-search "[Case Fold] " "")
                          (funcall isearch--describe-regexp-mode-orig
                                   regexp-function space-before)))))
      (funcall fn _))))
#+end_src
** corfu
#+begin_src elisp
(eat-package corfu
  :straight (corfu :files (:defaults "extensions/*.el"))
  :hook
  :init
  (setq corfu-preview-current nil
        corfu-auto-delay 0.2
        corfu-auto-prefix 2
        corfu-quit-no-match t
        corfu-quit-at-boundary t
        corfu-auto t)
  (global-corfu-mode 1)
  :config
  ;; quit corfu completion and back to meow normal mode
  (define-key corfu-map (kbd "<escape>") #'(lambda ()
                                             (interactive)
                                             (corfu-quit)
                                             (when (meow-insert-mode-p)
                                               (meow-insert-exit))))

  ;; tab in corfu-map
  (defun eat/corfu-complete ()
    (interactive)
    (or (yas-expand)
        ;; NOTE `corfu-complete' sometimes didn't quit corfu after complete
        (corfu-insert)))
  (define-key corfu-map (kbd "<tab>") 'eat/corfu-complete)
  (define-key corfu-map (kbd "TAB") 'eat/corfu-complete)
  (define-key corfu-map (kbd "RET") nil)

  ;; tab in yas-keymap
  (defun eat/corfu-insert-or-maybe-expand ()
    "Try complete current cond or `yas-next-field-or-maybe-expand'.

Sometime lsp client return a snippet and complete didn't work(TAB will jump to next field),
so try complete filst, if there nothing to complete then try to jump to next field or expand."
    (interactive)
    (or (corfu-insert)
        (yas-next-field-or-maybe-expand)))
  (with-eval-after-load 'yasnippet
    (define-key yas-keymap (kbd "<tab>") 'eat/corfu-insert-or-maybe-expand)
    ;; under TUI
    (define-key yas-keymap (kbd "TAB") 'eat/corfu-insert-or-maybe-expand)))
#+end_src
*** tui
#+begin_src elisp
(eat-package popon :straight (popon :type git :repo "https://codeberg.org/akib/emacs-popon.git"))
(eat-package corfu-terminal
  :straight (corfu-terminal :type git :repo "https://codeberg.org/akib/emacs-corfu-terminal.git")
  :init
  :hook
  (corfu-mode-hook . (lambda ()
                       (unless (display-graphic-p)
                         (corfu-terminal-mode +1)))))
#+end_src
*** doc
#+begin_src elisp
(eat-package corfu-doc
  :straight t
  :hook (corfu-mode-hook . (lambda ()
                             (when (display-graphic-p)
                               (corfu-doc-mode))))
  :config
  (setq corfu-echo-documentation nil)
  (define-key corfu-map (kbd "M-p") #'corfu-doc-scroll-down)
  (define-key corfu-map (kbd "M-n") #'corfu-doc-scroll-up))
#+end_src
** embark
#+begin_src elisp
(eat-package embark
  :straight (embark :files ("*.el"))
  :init
  (with-eval-after-load "vertico"
    (define-key vertico-map (kbd "C-c C-o") 'embark-export)
    (define-key vertico-map (kbd "C-c C-c") 'embark-act))
  :config
  (define-key embark-meta-map (kbd "<escape>") #'keyboard-escape-quit)
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src
** rg
#+begin_src elisp
(eat-package rg :elpaca t)
#+end_src
** yasnippet
#+begin_src elisp
(eat-package yasnippet
  :elpaca t
  :commands yas-minor-mode
  :hook ((prog-mode-hook conf-mode-hook) . yas-minor-mode)
  :init
  (eat-package yasnippet-snippets :straight t)
  :config
  (let ((inhibit-message t))
    (yas-reload-all)))
#+end_src
* Project And Session
** project.el
#+begin_src elisp
(eat-package project
  :init
  (defun eat/project-name ()
    (file-name-nondirectory
     (directory-file-name
      (project-root
       (project-current)))))

  ;; do not remember tramp project
  (defun eat/project-remember-advice (fn pr &optional no-write)
    (let* ((remote? (file-remote-p (project-root pr)))
           (no-write (if remote? t no-write)))
      (funcall fn pr no-write)))
  (advice-add 'project-remember-project :around
              'eat/project-remember-advice)

  :config
  (defun eat/project-files-in-directory (dir)
    "Use `fd' to list files in DIR."
    (let* ((default-directory dir)
           (localdir (file-local-name (expand-file-name dir)))
           (command (format "fd -c never -H -t f -0 . %s" localdir)))
      (project--remote-file-names
       (sort (split-string (shell-command-to-string command) "\0" t)
             #'string<))))

  ;; use fd in `project-find-file'
  (when (executable-find "fd")
    (cl-defmethod project-files ((project (head local)) &optional dirs)
      "Override `project-files' to use `fd' in local projects."
      (mapcan #'eat/project-files-in-directory
              (or dirs (list (project-root project))))))

  (defun eat/project-try-local (dir)
    "Determine if DIR is a non-Git project."
    (catch 'ret
      (let ((pr-flags '((".project")
                        ("go.mod" "Cargo.toml" "project.clj" "pom.xml" "package.json") ;; higher priority
                        ("Makefile" "README.org" "README.md"))))
        (dolist (current-level pr-flags)
          (dolist (f current-level)
            (when-let ((root (locate-dominating-file dir f)))
              (throw 'ret (cons 'local root))))))))
  (cl-defmethod project-root ((project (head local)))
    (cdr project))
  (add-to-list 'project-find-functions #'eat/project-try-local t))
#+end_src
** tab bar
#+begin_src elisp
(eat-package tab-bar
  :init
  (setq tab-bar-border nil
        tab-bar-close-button nil
        tab-bar-back-button nil
        tab-bar-new-button nil
        tab-bar-show nil
        tab-bar-format '(tab-bar-format-tabs)
        tab-bar-tab-name-format-function 'eat/tab-bar-tab-format-function
        tab-bar-separator ""
        tab-bar-new-tab-choice "*scratch*"
        tab-bar-tab-name-truncated-max 10)

  (defun eat/tab-bar-switch-project ()
    "Switch to project in a new tab, project name will be used as tab name.

No tab will created if the command is cancelled."
    (interactive)
    (let (succ)
      (unwind-protect
          (progn
            (tab-bar-new-tab)
            (call-interactively #'project-switch-project)
            (when-let ((proj (project-root (project-current))))
              (tab-bar-rename-tab (format "%s" (file-name-nondirectory (directory-file-name proj))))
              (setq succ t)))
        (unless succ
          (tab-bar-close-tab)))))

  (defun eat/tab-bar-tab-format-function (tab i)
    (let ((current-p (eq (car tab) 'current-tab)))
      (propertize (concat
                   "   "
                   (alist-get 'name tab)
                   "   ")
                  'face
                  (funcall tab-bar-tab-face-function tab))))
  :config
  (define-key tab-prefix-map (kbd ".") #'tab-bar-switch-to-recent-tab)
  (define-key tab-prefix-map (kbd ",") #'tab-bar-rename-tab)
  (define-key tab-prefix-map (kbd "l") #'eat/tab-bar-switch-project))
#+end_src

* Programming
** Built-in
*** Line number
Disable by default.
#+begin_src elisp
(eat-package display-line-numbers
  :init
  (setq display-line-numbers-width 3))
#+end_src
*** TODO Hide show
- Seems have error message.
- And to context-menu-mode.
#+begin_src elisp
(eat-package hideshow
  :hook (prog-mode-hook . hs-minor-mode)
  :init
  ;; FIXME
  (defconst hideshow-folded-face '((t (:inherit 'font-lock-comment-face :box t))))

  (defface hideshow-border-face
    '((((background light))
       :background "rosy brown" :extend t)
      (t
       :background "sandy brown" :extend t))
    "Face used for hideshow fringe."
    :group 'hideshow)

  (define-fringe-bitmap 'hideshow-folded-fringe
    (vector #b00000000
            #b00000000
            #b00000000
            #b11000011
            #b11100111
            #b01111110
            #b00111100
            #b00011000))

  (defun hideshow-folded-overlay-fn (ov)
    "Display a folded region indicator with the number of folded lines."
    (when (eq 'code (overlay-get ov 'hs))
      (let* ((nlines (count-lines (overlay-start ov) (overlay-end ov)))
             (info (format " (%d)..." nlines)))
        ;; fringe indicator
        (overlay-put ov 'before-string (propertize " "
                                                   'display '(left-fringe hideshow-folded-fringe
                                                                          hideshow-border-face)))
        ;; folding indicator
        (overlay-put ov 'display (propertize info 'face hideshow-folded-face)))))

  (setq hs-set-up-overlay #'hideshow-folded-overlay-fn))
#+end_src
*** TODO Xref
Use control-left-click to jump to defintions.
Need ripgrep installed(check external program).
Some function need emacs29(didn’t check emacs version).
#+begin_src elisp
(eat-package xref
  :hook
  ((xref-after-return-hook xref-after-jump-hook) . recenter)
  :init
  (global-unset-key (kbd "C-<down-mouse-1>"))
  (global-set-key (kbd "C-<mouse-1>") #'xref-find-definitions-at-mouse)
  (setq xref-prompt-for-identifier nil
        xref-search-program 'ripgrep
        xref-show-xrefs-function #'xref-show-definitions-completing-read
        xref-show-definitions-function #'xref-show-definitions-completing-read))
#+end_src
*** Pair
**** Insert
#+begin_src elisp
(eat-package elec-pair
  :hook (prog-mode-hook . electric-pair-local-mode)
  :init
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit))
#+end_src
**** Show paren
#+begin_src elisp
(eat-package paren
  :init
  (setq show-paren-when-point-in-periphery t
        show-paren-context-when-offscreen 'overlay
        show-paren-when-point-inside-paren t
        show-paren-context-when-offscreen t))
#+end_src
*** Reslove git conflicts with smerge
#+begin_src elisp
(eat-package smerge-mode
  :hook (find-file-hook . (lambda ()
                            (save-excursion
                              (goto-char (point-min))
                              (when (re-search-forward "^<<<<<<< " nil t)
                                (smerge-mode 1)))))
  :config
  (define-key smerge-mode-map (kbd "C-c r") #'smerge-refine)
  (define-key smerge-mode-map (kbd "C-c c") #'smerge-keep-current)
  (define-key smerge-mode-map (kbd "C-c a") #'smerge-keep-all)
  (define-key smerge-mode-map (kbd "C-c n") #'smerge-next)
  (define-key smerge-mode-map (kbd "C-c p") #'smerge-prev)
  (define-key smerge-mode-map (kbd "C-c l") #'smerge-keep-lower)
  (define-key smerge-mode-map (kbd "C-c u") #'smerge-keep-upper))
#+end_src
*** eldoc
#+begin_src elisp
(eat-package eldoc
  :init
  (setq eldoc-idle-delay 1))
#+end_src
*** Show whitespace
#+begin_src elisp
(eat-package whitespace
  :hook
  ((prog-mode-hook conf-mode-hook) . whitespace-mode)
  :init
  (setq whitespace-style '(face trailing)))
#+end_src
*** subword
#+begin_src elisp
(eat-package subword
  :hook (prog-mode-hook . subword-mode))
#+end_src
*** comment
#+begin_src elisp
(eat-package newcomment
  :init
  (setq comment-auto-fill-only-comments t))
#+end_src
** Lsp
*** eglot
#+begin_src elisp
(eat-package eldoc-box
  :elpaca t
  :hook (eglot-managed-mode-hook . eldoc-box-hover-mode))

(eat-package eglot
  :commands eglot-ensure
  :init
  (setq eglot-events-buffer-size 0
        eglot-sync-connect nil       ;; don't block of LSP connection attempts
        eglot-extend-to-xref t       ;; make eglot manage file out of project by `xref-find-definitions'
        eglot-ignored-server-capabilites '(:documentHighlightProvider :documentFormattingProvider :documentRangeFormattingProvider))
  (setq-default eglot-workspace-configuration
                '((gopls
                   (usePlaceholders . t))))
  :config
  ;; keybindings
  (define-key eglot-mode-map (kbd "M-RET") 'eglot-code-actions)
  (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
  (define-key eglot-mode-map (kbd "M-'") 'eglot-find-implementation)
  (add-to-list 'eglot-server-programs
               '(python-mode . ("pyright-langserver" "--stdio")))
  (add-to-list 'eglot-server-programs
			   '(rust-mode "rust-analyzer"))
  ;; NOTE deno
  (defclass eglot-deno (eglot-lsp-server) ()
    :documentation "A custom class for deno lsp.")
  (cl-defmethod eglot-initialization-options ((server eglot-deno))
    "Passes through required deno initialization options"
    (list :enable t
          :lint t))
  (add-to-list 'eglot-server-programs '((js-mode typescript-mode) . (eglot-deno "deno" "lsp")))
  ;; TODO code actions
  (add-to-list 'eglot-server-programs
               '(sql-mode . ("sqls" "-config" "~/.config/sqls/config.yaml"))))
#+end_src
*** lsp-bridge
#+begin_src elisp
;; this need pip install epc, orjson
(eat-package lsp-bridge
  :straight (lsp-bridge
             :type git
             :host github
             :repo "manateelazycat/lsp-bridge"
             :files ("*"))
  :commands lsp-bridge-mode global-lsp-bridge-mode
  :init
  (setq acm-enable-doc nil
        acm-enable-search-words nil
        lsp-bridge-enable-search-words nil)

  (defun eat/lsp-bridge-mode-setup ()
    "My setup for lsp-bridge.

Disable `corfu-mode'.
When expand snippet, try complete if there's acm cond, or run `yas-next-field-or-maybe-expand'."
    (interactive)
    (ignore-errors
      (corfu-mode -1))
    (with-eval-after-load 'yasnippet
      (define-key yas-keymap (kbd "<tab>") 'acm-complete-or-expand-yas-snippet)
      (define-key yas-keymap (kbd "TAB") 'acm-complete-or-expand-yas-snippet)))
  :config
  (add-hook 'lsp-bridge-mode-hook #'eat/lsp-bridge-mode-setup)
  ;; keybindings
  (define-key lsp-bridge-mode-map (kbd "M-.") #'lsp-bridge-find-def)
  (define-key lsp-bridge-mode-map (kbd "C-x 4 .") #'lsp-bridge-find-def-other-window)
  (define-key lsp-bridge-mode-map (kbd "M-,") #'lsp-bridge-return-from-def)
  (define-key lsp-bridge-mode-map (kbd "M-?") #'lsp-bridge-find-references)
  (define-key lsp-bridge-mode-map (kbd "M-'") #'lsp-bridge-find-impl)
  (define-key lsp-bridge-mode-map (kbd "C-c r") #'lsp-bridge-rename)
  (define-key lsp-bridge-mode-map (kbd "C-c <") #'lsp-bridge-diagnostic-jump-prev)
  (define-key lsp-bridge-mode-map (kbd "C-c >") #'lsp-bridge-diagnostic-jump-next)
  ;; FIXME p will say search failed " ", it should act like n, reach last file
  (define-key lsp-bridge-ref-mode-map (kbd "j") nil)
  (define-key lsp-bridge-ref-mode-map (kbd "k") nil)
  (define-key lsp-bridge-ref-mode-map (kbd "h") nil)
  (define-key lsp-bridge-ref-mode-map (kbd "l") nil)
  (define-key lsp-bridge-ref-mode-map (kbd "p") 'lsp-bridge-ref-jump-prev-file)
  (define-key lsp-bridge-ref-mode-map (kbd "h") 'lsp-bridge-ref-jump-prev-keyword)
  (define-key lsp-bridge-ref-mode-map (kbd "t") 'lsp-bridge-ref-jump-next-keyword)
  (define-key lsp-bridge-ref-mode-map (kbd "n") 'lsp-bridge-ref-jump-next-file))
#+end_src
*** Restart lsp client
#+begin_src elisp
(defun eat/lsp-reconnect ()
  (interactive)
  (if (bound-and-true-p lsp-bridge-mode)
      (lsp-bridge-restart-process)
    (eglot-reconnect)))
(global-set-key [f10] #'eat/lsp-reconnect)
#+end_src
** Lint
*** flymake
#+begin_src elisp
(eat-package flymake
  :hook
  (prog-mode-hook . flymake-mode)
  (emacs-lisp-mode-hook . (lambda ()
                            (flymake-mode -1)))
  :init
  (setq-default flymake-diagnostic-functions nil
                flymake-no-changes-timeout 0.2)
  (defun sekiro-flymake-mode-line-format ()
    (let* ((counter (string-to-number
                     (nth 1
                          (cadr
                           (flymake--mode-line-counter :error t)))))
           (sekiro-flymake (when (> counter 0)
                             'compilation-error)))
      (propertize
       "危"
       'face
       sekiro-flymake))))
#+end_src

** Citre
#+begin_src elisp
(eat-package clue
  :elpaca (clue :host github :repo "AmaiKinono/clue"))

(eat-package citre
  :elpaca (citre :host github :repo "universal-ctags/citre")
  :init
  (global-set-key (kbd "C-x c j") 'citre-jump)
  (global-set-key (kbd "C-x c J") 'citre-jump-back)
  (global-set-key (kbd "C-x c u") 'citre-update-this-tags-file)
  (global-set-key (kbd "C-x c p") 'citre-peek)
  (setq citre-default-create-tags-file-location 'global-cache
        citre-use-project-root-when-creating-tags t
        citre-prompt-language-for-ctags-command t
        citre-auto-enable-citre-mode-modes '(prog-mode))
  (defun eat/citre-enable ()
    (interactive)
    (citre-mode 1)
    (require 'citre-config))
  (defun eat/citre-disable ()
    (interactive)
    (citre-mode 0)
    (remove-hook 'find-file-hook #'citre-auto-enable-citre-mode))
  (eat-package citre-global
    :init
    ;; NOTE
    ;; Notice that GTAGSOBJDIRPREFIX must exist for gtags to use it. So you need to run:
    ;; $ mkdir -p ~/.cache/gtags/
    (global-set-key (kbd "C-x c U") 'citre-global-update-database)
    (global-set-key (kbd "C-x c r") 'citre-jump-to-reference)
    (global-set-key (kbd "C-x c P") 'citre-ace-peek-references)
    (with-eval-after-load 'citre-peek
      (define-key citre-peek-keymap (kbd "M-l r")
                  'citre-peek-through-references))
    :config
    (setenv "GTAGSOBJDIRPREFIX" (concat (getenv "HOME") "/.cache/gtags"))
    (setenv "GTAGSCONF" (concat (getenv "HOME") "/.globalrc"))
    (setenv "GTAGSLABEL" "native-pygments")))
#+end_src
** Code Format
#+begin_src elisp
(eat-package apheleia
  :elpaca t
  :hook (go-mode-hook . apheleia-mode)
  :init
  (setq apheleia-remote-algorithm 'local)
  :config
  (setf (alist-get 'gofmt apheleia-formatters)
        '("goimports")))
#+end_src
** dumb-jump
#+begin_src elisp
(eat-package dumb-jump
  :elpaca t
  ;; NOTE use `dumb-jump' as default xref backend
  ;; you can run `eglot' or `eat/citre-enable' to reset this
  :hook (xref-backend-functions . #'dumb-jump-xref-activate)
  :init
  (setq
   dumb-jump-force-searcher'rg
   dumb-jump-quiet t
   dumb-jump-aggressive t
   dumb-jump-selector 'completing-read))
#+end_src
** Languages
*** Golang
#+begin_src elisp
;; Install or update tools
(defvar go--tools '("golang.org/x/tools/gopls"
                    "golang.org/x/tools/cmd/goimports"
                    "honnef.co/go/tools/cmd/staticcheck"
                    "github.com/go-delve/delve/cmd/dlv"
                    "github.com/zmb3/gogetdoc"
                    "github.com/josharian/impl"
                    "github.com/cweill/gotests/..."
                    "github.com/fatih/gomodifytags"
                    "github.com/davidrjenni/reftools/cmd/fillstruct"
                    "github.com/rogpeppe/godef" ;; for `godoc-at-point'
                    "github.com/golangci/golangci-lint/cmd/golangci-lint")
  "All necessary go tools.")

(defun go-update-tools ()
  "Install or update go tools."
  (interactive)
  (unless (executable-find "go")
    (user-error "Unable to find `go' in `exec-path'!"))

  (message "Installing go tools...")
  (dolist (pkg go--tools)
    (set-process-sentinel
     (start-process "go-tools" "*Go Tools*" "go" "install" "-v" "-x" (concat pkg "@latest"))
     (lambda (proc _)
       (let ((status (process-exit-status proc)))
         (if (= 0 status)
             (message "Installed %s" pkg)
           (message "Failed to install %s: %d" pkg status)))))))

(eat-package go-mode
  :elpaca t
  :init
  (setq gofmt-command "goimports"
        gofmt-show-errors nil)
  :hook
  ;; HACK use `apheleia' instead
  ;; (before-save-hook . gofmt-before-save)
  (go-test-mode-hook . visual-line-mode))

(eat-package gotest
  :elpaca t
  :after go-mode
  :init
  (setq go-test-verbose t
        ;; do not cache test
        go-test-args "-count=1")
  :config
  (define-key go-mode-map (kbd "C-c t f") #'go-test-current-file)
  (define-key go-mode-map (kbd "C-c t t") #'go-test-current-test)
  (define-key go-mode-map (kbd "C-c t j") #'go-test-current-project)
  (define-key go-mode-map (kbd "C-c t b") #'go-test-current-benchmark)
  (define-key go-mode-map (kbd "C-c t c") #'go-test-current-coverage)
  (define-key go-mode-map (kbd "C-c t x") #'go-run))

(eat-package go-gen-test
  :elpaca t
  :after go-mode
  :config
  (define-key go-mode-map (kbd "C-c t g") #'go-gen-test-dwim))

(eat-package go-tag
  :elpaca t
  :after go-mode
  :init
  (setq go-tag-args (list "-transform" "camelcase"))
  :config
  (define-key go-mode-map (kbd "C-c t a") #'go-tag-add)
  (define-key go-mode-map (kbd "C-c t r") #'go-tag-remove))

(eat-package go-fill-struct :elpaca t)
(eat-package go-guru :elpaca t)
(eat-package go-rename :elpaca t)
(eat-package go-impl :elpaca t)
(eat-package go-dlv :elpaca t)
(eat-package flymake-go-staticcheck :elpaca t)
#+end_src
*** Clojure
#+begin_src elisp
(eat-package clojure-mode
  :elpaca t)

(eat-package cider
  :elpaca t)
#+end_src
*** lua
#+begin_src elisp
(eat-package lua-mode :elpaca t)
#+end_src
*** rust
#+begin_src elisp
(eat-package rust-mode
  :elpaca t)
#+end_src
*** typescript
#+begin_src elisp
(eat-package typescript-mode
  :elpaca t
  :init
  (setq typescript-indent-level 2))
#+end_src
*** Lisp
#+begin_src elisp
(eat-package aggressive-indent
  :elpaca t
  :commands aggressive-indent-mode
  :hook ((emacs-lisp-mode-hook
          lisp-interaction-mode-hook
          scheme-mode-hook
          lisp-mode-hook)
         . aggressive-indent-mode))
#+end_src
*** C
#+begin_src elisp
(eat-package cc-mode
  :init
  (setq c-default-style "linux"
        c-basic-offset 4))
#+end_src
*** Python
#+begin_src elisp
(eat-package python
  :init
  (setq python-indent-offset 4
        python-shell-completion-native-enable nil
        python-shell-interpreter "ipython"
        python-indent-guess-indent-offset nil))
#+end_src
*** Sql
#+begin_src elisp
(eat-package sql
  :init
  (setq sql-mysql-login-params '(user password server database port)))
#+end_src
* Application
** App Launcher
#+begin_src elisp
(eat-package app-launcher
  :elpaca (app-launcher :host github :repo "SebastienWae/app-launcher")
  :init
  (defun eat/emacs-app-launcher ()
    "Create and select a frame called emacs-app-launcher which consists only of a minibuffer and has specific dimensions.
Run `app-launcher-run-app' on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour.
Delete the frame after that command has exited"
    (interactive)
    (let ((default-frame-alist '((undecorated . t)
                                 (vertical-scroll-bars)
                                 (scroll-bar-mode . 0)
                                 (menu-bar-lines . 0)
                                 (tool-bar-lines . 0))))
      (with-selected-frame
          (make-frame
           '((name . "emacs-app-launcher")
             (minibuffer . only)
             (width . 120)
             (height . 11)))
        (unwind-protect
            (app-launcher-run-app)
          (delete-frame))))))
#+end_src
** Telega
Run =docker pull zevlg/telega-server:latest=
#+begin_src elisp
(eat-package telega
  :elpaca t
  :commands telega
  :hook
  (telega-load-hook . (telega-notifications-mode telega-appindicator-mode))
  :init
  (setq telega-use-docker t)
  ;; highlight current line in root buffer
  (defun lg-telega-root-mode ()
    (hl-line-mode 1))

  (defun lg-telega-chat-update (chat)
    (with-telega-root-buffer
     (hl-line-highlight)))

  (add-hook 'telega-chat-update-hook 'lg-telega-chat-update)
  (add-hook 'telega-root-mode-hook 'lg-telega-root-mode)
  :config
  ;; ignore blocked user
  (add-hook 'telega-msg-ignore-predicates
            (telega-match-gen-predicate "msg-" '(sender blocked)))

  (setq telega-chat-input-format "›"
        telega-animation-play-inline nil
        telega-video-play-inline nil
        ;; make sticker larger to read
        telega-sticker-size '(10 . 24)
        ;; change reply symbol
        telega-symbol-reply "↫"
        ;; set date format for old messages
        telega-old-date-format "%Y/%M/%D")

  ;; syntax highlighting in telega code
  (require 'telega-mnz)
  (global-telega-mnz-mode 1))
#+end_src
** Magit
#+begin_src elisp
(eat-package magit
  :elpaca t
  :hook
  (git-commit-setup-hook . git-commit-turn-on-flyspell)
  (magit-diff-visit-file . my-recenter-and-pulse-line)
  :commands magit
  :init
  (defun eat/magit-yadm ()
    (interactive)
    (magit-status "/yadm::"))
  :config
  (fullframe magit-status magit-mode-quit-window)
  (setq-default magit-diff-refine-hunk t)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x M-g") 'magit-dispatch))

(when (executable-find "delta")
  (eat-package magit-delta
    :elpaca t
    :hook (magit-mode-hook . magit-delta-mode)))

(eat-package diff-hl
  :elpaca t
  :commands diff-hl-mode
  :hook
  ((prog-mode-hook conf-mode-hook) . diff-hl-mode)
  (dired-mode-hook . diff-hl-dired-mode)
  (magit-pre-refresh-hook . diff-hl-magit-pre-refresh)
  (magit-post-refresh-hook . diff-hl-magit-post-refresh)
  :init
  (setq diff-hl-draw-borders nil)
  :config
  ;; Highlight on-the-fly
  (diff-hl-flydiff-mode 1)

  (unless (display-graphic-p)
    ;; Fall back to the display margin since the fringe is unavailable in tty
    (diff-hl-margin-mode 1)
    ;; Avoid restoring `diff-hl-margin-mode'
    (with-eval-after-load 'desktop
      (add-to-list 'desktop-minor-mode-table
                   '(diff-hl-margin-mode nil)))))
#+end_src
** File Manager (dirvish)
#+begin_src elisp
(eat-package dired
  :hook (dired-mode-hook . dired-hide-details-mode)
  :init
  (when eat/macp
    (setq insert-directory-program "gls"))
  (setq
   dired-dwim-target t
   dired-kill-when-opening-new-dired-buffer t
   dired-listing-switches
   "-l --almost-all --human-readable --time-style=long-iso --group-directories-first --no-group")
  :config
  (define-key dired-mode-map (kbd "h") #'dired-up-directory) ; remapped `describe-mode'
  (setq dired-recursive-deletes 'top)
  (define-key dired-mode-map [mouse-2] 'dired-find-file)
  (define-key dired-mode-map (kbd "C-c C-p") #'wdired-change-to-wdired-mode))

(eat-package dirvish
  :straight '(dirvish :files (:defaults "extensions/*"))
  :hook (after-init-hook . dirvish-override-dired-mode)
  :init
  (setq dirvish-attributes '(vc-state subtree-state all-the-icons))
  (global-set-key (kbd "<f1>") #'dirvish-side)
  (global-set-key (kbd "C-c f") #'dirvish-fd)
  :config
  (dirvish-side-follow-mode)
  (add-to-list 'dirvish-open-with-programs '(("pdf") "sioyek" "%f"))
  (define-key dirvish-mode-map (kbd "TAB") #'dirvish-subtree-toggle)
  (define-key dirvish-mode-map (kbd "<tab>") #'dirvish-subtree-toggle)
  (define-key dirvish-mode-map (kbd "a") #'dirvish-quick-access)
  (define-key dirvish-mode-map (kbd "f") #'dirvish-file-info-menu)
  (define-key dirvish-mode-map (kbd "y") #'dirvish-yank-menu)
  (define-key dirvish-mode-map (kbd "N") #'dirvish-narrow)
  (define-key dirvish-mode-map (kbd "H") #'dirvish-history-jump) ; remapped `describe-mode'
  (define-key dirvish-mode-map (kbd "s") #'dirvish-quicksort) ; remapped `dired-sort-toggle-or-edit'
  (define-key dirvish-mode-map (kbd "v") #'dirvish-vc-menu)  ; remapped `dired-view-file'
  (define-key dirvish-mode-map (kbd "M-f") #'dirvish-history-go-forward)
  (define-key dirvish-mode-map (kbd "M-b") #'dirvish-history-go-backward)
  (define-key dirvish-mode-map (kbd "M-l") #'dirvish-ls-switches-menu)
  (define-key dirvish-mode-map (kbd "M-m") #'dirvish-mark-menu)
  (define-key dirvish-mode-map (kbd "M-t") #'dirvish-layout-toggle)
  (define-key dirvish-mode-map (kbd "M-s") #'dirvish-setup-menu)
  (define-key dirvish-mode-map (kbd "M-e") #'dirvish-emerge-menu)
  (define-key dirvish-mode-map (kbd "M-j") #'dirvish-fd-jump)
  ;; mouse
  ;; (setq mouse-1-click-follows-link nil)
  (define-key dirvish-mode-map (kbd "<mouse-1>") #'dirvish-subtree-toggle-or-open)
  (define-key dirvish-mode-map (kbd "<mouse-2>") #'dired-mouse-find-file-other-window)
  (define-key dirvish-mode-map (kbd "<mouse-3>") #'dired-mouse-find-file))
#+end_src
** Mail (notmuch)
#+begin_src elisp
(eat-package message
  :hook (message-mode-hook . (lambda ()
                               (setq-local fill-column 72)
                               (auto-fill-mode)))
  :init
  (setq user-full-name eat/user-full-name
        user-mail-address eat/user-mail-address
        message-kill-buffer-on-exit t
        message-mail-alias-type 'ecomplete
        message-send-mail-function #'message-use-send-mail-function
        message-signature user-full-name))

(eat-package sendmail
  :init
  (setq send-mail-function #'smtpmail-send-it))

(eat-package smtpmail
  :init
  (setq smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-user user-mail-address
        smtpmail-smtp-service 587
        smtpmail-stream-type 'ssl))

(defface eat/notmuch-tag-emacs
  '((t :foreground "systemPurpleColor"))
  "Default face used for the Emacs tag.

Used in the default value of `notmuch-tag-formats'."
  :group 'notmuch-faces)

(defface eat/notmuch-tag-golang
  '((t :foreground "systemBlueColor"))
  "Default face used for the golang tag.

Used in the default value of `notmuch-tag-formats'."
  :group 'notmuch-faces)

(eat-package notmuch
  :elpaca t
  :commands notmuch
  :init
  (setq notmuch-search-oldest-first nil
        notmuch-search-result-format '(("date" . "%12s ")
                                       ("count" . "%-11s ")
                                       ("authors" . "%-20s ")
                                       ("subject" . "%-80s ")
                                       ("tags" . "(%s)"))
        notmuch-show-empty-searches t)
  (defun eat/async-notmuch-poll ()
    (interactive)
    (message "Start polling email...")
    (async-start
     `(lambda ()
        ,(async-inject-variables "\\`load-path\\'")
        (require 'notmuch)
        (notmuch-poll))
     (lambda (result)
       (message "eat/async-notmuch-poll: %s" result)
       (notify-send :title "Emacs" :body result :urgency 'critical))))
  :config
  (add-to-list 'notmuch-tag-formats '("emacs" (propertize tag 'face 'eat/notmuch-tag-emacs)))
  (add-to-list 'notmuch-tag-formats '("golang" (propertize tag 'face 'eat/notmuch-tag-golang)))
  (global-set-key [remap notmuch-poll-and-refresh-this-buffer] #'eat/async-notmuch-poll))
#+end_src
** Docker
#+begin_src elisp
(eat-package docker
  :elpaca t
  :commands docker
  :config
  (fullframe docker-images tablist-quit)
  (fullframe docker-machines tablist-quit)
  (fullframe docker-volumes tablist-quit)
  (fullframe docker-networks tablist-quit)
  (fullframe docker-containers tablist-quit))
#+end_src
** K8S
#+begin_src elisp
(eat-package kubernetes
  :elpaca t
  :commands
  kubernetes-overview
  :config
  (setq kubernetes-poll-frequency 3600
        kubernetes-redraw-frequency 3600))
#+end_src
** Terminal
*** built-in
#+begin_src elisp
(defun term-mode-common-init ()
  "The common initialization procedure for term/shell."
  (setq-local scroll-margin 0)
  (setq-local truncate-lines t)
  (setq-local global-hl-line-mode nil))

(eat-package term
  :hook
  (term-mode-hook . (term-mode-prompt-regexp-setup term-mode-common-init))
  :init
  (defun term-mode-prompt-regexp-setup ()
    "Setup `term-prompt-regexp' for term-mode."
    (setq-local term-prompt-regexp "^[^#$%>\n]*[#$%>] *")))

(eat-package eshell
  :hook
  (eshell-mode-hook . (lambda ()
                        (term-mode-common-init)
                        ;; Eshell is not fully functional
                        (setenv "PAGER" "cat")))
  :config
  ;; Prevent accident typing
  (defalias 'eshell/vi 'find-file)
  (defalias 'eshell/vim 'find-file)

  (defun eshell/bat (file)
    "cat FILE with syntax highlight."
    (with-temp-buffer
      (insert-file-contents file)
      (let ((buffer-file-name file))
        (delay-mode-hooks
          (set-auto-mode)
          (font-lock-ensure)))
      (buffer-string)))

  (defun eshell/f (filename &optional dir)
    "Search for files matching FILENAME in either DIR or the
current directory."
    (let ((cmd (concat
                (executable-find "find")
                " " (or dir ".")
                "      -not -path '*/.git*'"
                " -and -not -path 'build'"    ;; the cmake build directory
                " -and"
                " -type f"
                " -and"
                " -iname '*" filename "*'")))
      (eshell-command-result cmd)))

  (defun eshell/z ()
    "cd to directory with completion."
    (let ((dir (completing-read "Directory: " (ring-elements eshell-last-dir-ring) nil t)))
      (eshell/cd dir)))

  (defun eshell-prompt ()
    "Prompt for eshell."
    (concat
     (propertize user-login-name 'face 'font-lock-keyword-face)
     "@"
     "Noobmaster "
     (if (equal (eshell/pwd) "~")
         "~"
       (abbreviate-file-name (eshell/pwd)))
     " "
     (if-let* ((vc (ignore-errors (vc-responsible-backend default-directory)))
               (br (car (vc-git-branches))))
         (concat (propertize "(" 'face 'success)
                 (format "%s" vc)
                 (propertize ")" 'face 'success)
                 (propertize "-" 'face 'font-lock-string-face)
                 (propertize "[" 'face 'success)
                 (propertize br 'face 'font-lock-constant-face)
                 (propertize "]" 'face 'success)
                 " ")
       "")
     "% ")))

;; The interactive shell.
;;
;; It can be used as a `sh-mode' REPL.
;;
;; `shell' is recommended to use over `tramp'.
(eat-package shell
  :hook
  (shell-mode-hook . (term-mode-common-init revert-tab-width-to-default))
  :init
  (defun shell-toggle ()
    "Toggle a persistent shell popup window.
If popup is visible but unselected, select it.
If popup is focused, kill it."
    (interactive)
    (if-let ((win (get-buffer-window "*shell-popup*")))
        (when (eq (selected-window) win)
          ;; If users attempt to delete the sole ordinary window, silence it.
          (ignore-errors (delete-window win)))
      (let ((display-comint-buffer-action '(display-buffer-at-bottom
                                            (inhibit-same-window . nil))))

        (shell "*shell-popup*"))))

  ;; Correct indentation for `ls'
  (defun revert-tab-width-to-default ()
    "Revert `tab-width' to default value."
    (setq-local tab-width 8)))

;; Quick editing in `describe-variable'
(with-eval-after-load 'help-fns
  (put 'help-fns-edit-variable 'disabled nil))
#+end_src
*** vterm
#+begin_src elisp
(eat-package vterm
  :elpaca t
  :init
  (setq vterm-always-compile-module t)

  (eat-package vterm-toggle
    :elpaca t
    :init
    (global-set-key (kbd "C-`") #'vterm-toggle))

  (eat-package multi-vterm
    :elpaca t
    :init
    (global-set-key (kbd "C-~") #'multi-vterm)
    :config
    (define-key vterm-mode-map (kbd "C-(") #'multi-vterm-prev)
    (define-key vterm-mode-map (kbd "C-)") #'multi-vterm-next)))
#+end_src
** Elfeed
#+begin_src elisp
(eat-package elfeed
  :elpaca t
  :commands elfeed
  :init
  (setq elfeed-search-filter "+unread "
        ;; browse-url-browser-function 'eww-browse-url
        elfeed-curl-extra-arguments '("--insecure"))

  :config
  (elfeed-set-timeout 36000))

(eat-package elfeed-protocol
  :elpaca t
  :after elfeed
  :config
  (elfeed-protocol-enable))
#+end_src
** LeetCode
#+begin_src elisp
(eat-package leetcode
  :elpaca (leetcode :host github :repo "ginqi7/leetcode-emacs")
  :commands leetcode-list-all
  :init
  (eat-package ctable :straight t)
  (setq leetcode-language "go"))
#+end_src
** Misc
#+begin_src elisp
(eat-package devdocs :elpaca t)

(eat-package ibuffer-vc
  :elpaca t
  :hook (ibuffer-hook . ibuffer-set-up-preferred-filters)
  :init
  (defun ibuffer-set-up-preferred-filters ()
    (ibuffer-vc-set-filter-groups-by-vc-root)
    (unless (eq ibuffer-sorting-mode 'filename/process)
      (ibuffer-do-sort-by-filename/process))))
#+end_src
** Note Taking (xeft)
#+begin_src elisp
(eat-package xeft
  :straight (xeft :type git
                  :host github
                  :repo "casouri/xeft"
                  :files (:defaults "Makefile" "module"))
  :init
  (setq xeft-directory "~/Dropbox/org/roam"
        xeft-database "~/.xeft/db")
  :config
  (require 'flique)
  (defun xeft-setup ()
    (flique-append-to-index (buffer-file-name))
    (local-set-key (kbd "M-]") #'flique-forward)
    (local-set-key (kbd "M-[") #'flique-backward)
    (flique-show-navigation))
  (add-hook 'xeft-find-file-hook #'xeft-setup)
  (add-hook 'xeft-find-file-hook #'bklink-minor-mode))
#+end_src
** Blog (org-static-blog)
#+begin_src elisp
(eat-package org-static-blog
  :elpaca t
  :init
  (setq org-static-blog-publish-title "404cn's blog")
  (setq org-static-blog-publish-url "https://404cn.github.io/")
  (setq org-static-blog-publish-directory "~/p/blog/")
  (setq org-static-blog-posts-directory "~/p/blog/posts/")
  (setq org-static-blog-drafts-directory "~/p/blog/drafts/")
  (setq org-static-blog-enable-tags t)
  (setq org-static-blog-use-preview t)
  (setq org-static-blog-preview-ellipsis "")
  (setq org-export-with-toc nil)
  (setq org-export-with-section-numbers nil)
  :config
  (setq org-static-blog-page-header (get-string-from-file "~/p/blog/static/header.html"))
  (setq org-static-blog-page-preamble (get-string-from-file "~/p/blog/static/preamble.html"))
  (setq org-static-blog-page-postamble (get-string-from-file "~/p/blog/static/postamble.html")))
#+end_src
* Modes
** toml
#+begin_src elisp
(eat-package toml-mode :elpaca t :hook (toml-mode-hook . goto-address-prog-mode))
#+end_src
** yaml
#+begin_src elisp
(eat-package yaml-mode :elpaca t :hook (yaml-mode-hook . goto-address-prog-mode))
#+end_src
** docker
#+begin_src elisp
(eat-package docker-compose-mode :elpaca t)
(eat-package dockerfile-mode :elpaca t)
#+end_src
** k8s
#+begin_src elisp
(eat-package k8s-mode :straight t)
(eat-package kubedoc
  :elpaca
  (kubedoc :host github :repo "r0bobo/kubedoc.el"))
#+end_src
** gitignore
#+begin_src elisp
(eat-package git-modes
  :elpaca t
  :init
  (add-to-list 'auto-mode-alist
               (cons "/.dockerignore\\'" 'gitignore-mode)))
#+end_src
** terraform
#+begin_src elisp
(eat-package terraform-mode
  :elpaca t)
#+end_src
** markdown
#+begin_src elisp
(eat-package markdown-mode
  :elpaca t
  :mode ("\\.md\\'" . gfm-mode)
  :hook
  (markdown-mode-hook . gfm-view-mode)
  (markdown-mode-hook . valign-mode)
  :init
  (setq markdown-enable-wiki-links t
        markdown-italic-underscore t
        markdown-asymmetric-header t
        markdown-make-gfm-checkboxes-buttons t
        markdown-gfm-uppercase-checkbox t
        markdown-fontify-code-blocks-natively t)
  :config
  (define-key markdown-mode-map (kbd "C-c v") #'gfm-view-mode))

(eat-package markdown-toc
  :elpaca t
  :config
  (define-key markdown-mode-command-map (kbd "r") #'markdown-toc-generate-or-refresh-toc))
#+end_src

* Org
#+begin_src elisp
(defun eat/org-hook ()
  "Configuration for Org Mode."
  (org-indent-mode)
  (electric-pair-local-mode -1)
  (electric-quote-local-mode)
  (electric-indent-local-mode -1))

(defun eat/insert-zero-width-space ()
  (interactive)
  (insert-char ?\u200B)) ;; code for ZERO WIDTH SPACE
(global-set-key (kbd "C-x 8 0") #'eat/insert-zero-width-space)

(eat-package org
  :hook (org-mode-hook . eat/org-hook)
  :init
  (setq org-directory "~/Dropbox/org")
  (defvar load-language-list '((emacs-lisp . t)
                               (python . t)
                               (js . t)
                               (C . t)
                               (shell . t)))
  :config
  (setq org-edit-src-content-indentation 0
        org-special-ctrl-a/e t
        org-special-ctrl-k t
        org-src-fontify-natively nil ;; see it in `org-edit-special'
        org-src-window-setup 'current-window
        org-return-follows-link t
        org-confirm-babel-evaluate nil
        org-image-actual-width '(300)
        org-ellipsis " ▾ "
        ;; Faster loading
        org-modules nil
        org-log-done t)

  (require 'org-tempo) ;; see `org-structure-template-alist'
  (require 'ob)
  (require 'ob-dot)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (org-babel-do-load-languages 'org-babel-load-languages load-language-list)

  ;; https://emacs-china.org/t/org-mode/22313
  ;; 解决中文 markup 两边需要空格的问题
  (font-lock-add-keywords 'org-mode
                          '(("\\cc\\( \\)[/+*_=~][^a-zA-Z0-9/+*_=~\n]+?[/+*_=~]\\( \\)?\\cc?"
                             (1 (prog1 () (compose-region (match-beginning 1) (match-end 1) ""))))
                            ("\\cc?\\( \\)?[/+*_=~][^a-zA-Z0-9/+*_=~\n]+?[/+*_=~]\\( \\)\\cc"
                             (2 (prog1 () (compose-region (match-beginning 2) (match-end 2) "")))))
                          'append)
  (with-eval-after-load 'ox
    (defun eli-strip-ws-maybe (text _backend _info)
      (let* ((text (replace-regexp-in-string
                    "\\(\\cc\\) *\n *\\(\\cc\\)"
                    "\\1\\2" text));; remove whitespace from line break
             ;; remove whitespace from `org-emphasis-alist'
             (text (replace-regexp-in-string "\\(\\cc\\) \\(.*?\\) \\(\\cc\\)"
                                             "\\1\\2\\3" text))
             ;; restore whitespace between English words and Chinese words
             (text (replace-regexp-in-string "\\(\\cc\\)\\(\\(?:<[^>]+>\\)?[a-z0-9A-Z-]+\\(?:<[^>]+>\\)?\\)\\(\\cc\\)"
                                             "\\1 \\2 \\3" text))
             (text (replace-regexp-in-string "\\(\\cc\\) ?\\(\\\\[^{}()]*?\\)\\(\\cc\\)"
                                             "\\1 \\2 \\3" text)))
        text))
    (add-to-list 'org-export-filter-paragraph-functions #'eli-strip-ws-maybe))
  ;; markup 英文单词的一部分 *ha*ppy
  (setq org-emphasis-regexp-components '("-[:space:]('\"{[:nonascii:][:alpha:]"
                                         "-[:space:].,:!?;'\")}\\[[:nonascii:][:alpha:]"
                                         "[:space:]"
                                         "."
                                         1))
  (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
  (org-element-update-syntax))
#+end_src
** ox

*** gfm
#+begin_src elisp
(eat-package ox-gfm
  :elpaca t
  :config
  (add-to-list 'org-export-backends 'md))
#+end_src

** ob

*** restclient
#+begin_src elisp
(eat-package ob-restclient
  :elpaca t
  :init
  (eat-package restclient
    :straight t
    :mode ("\\.rest\\'" . restclient-mode)
    :init
    (defun eat/restclient ()
      "Work with `rest' in the *restclient* buffer."
      (interactive)
      (with-current-buffer (get-buffer-create "*restclient*")
        (restclient-mode)
        (pop-to-buffer (current-buffer)))))
  (cl-pushnew '(restclient . t) load-language-list)
  :config
  (add-to-list 'org-structure-template-alist '("rc" . "src restclient")))
#+end_src

*** go
#+begin_src elisp
(eat-package ob-go
  :elpaca t
  :init (cl-pushnew '(go .t) load-language-list)
  :config
  (add-to-list 'org-structure-template-alist '("go" . "src go")))
#+end_src

** copture
#+begin_src elisp
(eat-package org-capture
  :init
  (global-set-key (kbd "C-c c") 'org-capture)

  (defun eat/org-capture-inbox ()
    (interactive)
    (org-capture nil "i"))
  (global-set-key (kbd "C-c i") #'eat/org-capture-inbox)

  (setq
   org-default-notes-file (concat org-directory "/default-notes.org")
   org-capture-templates
   `(("i" "Inbox" entry (file "~/Dropbox/org/inbox.org")
      "* TODO %?\n:PROPERITIES:\n:Created: %T\n:END:")
     ("w" "Work" entry (file+olp+datetree "~/Dropbox/org/Work.org")
      "* %^{Title}\n:PROPERITIES:\n:Created: %T\n:END:" :tree-type week)
     ("n" "Note" entry (file "~/Dropbox/org/Notes.org")
      "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t))))
#+end_src

** agenda
#+begin_src elisp
(eat-package org-agenda
  :init
  (setq org-agenda-files (list org-directory)
        org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
                                   (todo   . " ")
                                   (tags   . " %i %-12:c")
                                   (search . " %i %-12:c"))
        ;; hide any tag
        org-agenda-hide-tags-regexp ".")
  (global-set-key (kbd "C-c a") 'org-agenda)
  :config
  (setq org-agenda-current-time-string
        "⭠ now ─────────────────────────────────────────────────"))
#+end_src

** org-appear
#+begin_src elisp
(eat-package org-appear
  :elpaca t
  :hook (org-mode-hook . org-appear-mode)
  :init
  (setq org-hide-emphasis-markers t))
#+end_src

** valign
#+begin_src elisp
(eat-package valign
  :elpaca t
  :init
  (setq valign-fancy-bar t)
  (when (display-graphic-p)
    (add-hook 'org-mode-hook #'valign-mode)))
#+end_src
** prose-mode for writting
#+begin_src elisp
(defvar eat/prose-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-a") #'beginning-of-visual-line)
    (define-key map (kbd "C-e") #'end-of-visual-line)
    map)
  "Mode map for ‘eat/prose-mode’.")

(define-minor-mode eat/prose-mode
  "A mode that optimizes for prose editing."
  :lighter " PROSE"
  :keymap eat/prose-mode-map
  (if eat/prose-mode
      (progn
        (variable-pitch-mode 1)
        (visual-fill-column-mode 1)
        (setq-local cursor-type 'bar)
        (setq-local line-spacing 0.15)
        (corfu-mode -1)
        (setq-local whitespace-style '(tab-mark))
        (whitespace-mode))
    (visual-fill-column-mode -1)
    (whitespace-mode -1)
    (variable-pitch-mode -1)
    (kill-local-variable 'line-spacing)
    (kill-local-variable 'cursor-type)))
#+end_src
** toc
#+begin_src elisp
(eat-package toc-org
  :elpaca t
  :commands toc-org-enable toc-org-insert-toc)
#+end_src
* Site Lisp
** Load Path
#+begin_src elisp
(add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))
#+end_src

** Form Feed
#+begin_src elisp
(eat-package form-feed
  :hook
  ((emacs-lisp-mode-hook text-mode-hook special-mode-hook)
   . form-feed-mode))
#+end_src

*** Source
#+begin_src elisp :tangle site-lisp/form-feed.el
;;; form-feed.el --- Display ^L glyphs as horizontal lines

;; Copyright (C) 2014 Vasilij Schneidermann <mail@vasilij.de>

;; Author: Vasilij Schneidermann <mail@vasilij.de>
;; Maintainer: Yuan Fu <casouri@gmail.com>
;; URL: https://depp.brause.cc/form-feed
;; Keywords: faces
;; Version: 0.2.3

;; This file is NOT part of GNU Emacs.

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING. If not, write to
;; the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;;; Commentary:

;; This minor mode displays page delimiters which usually appear as ^L
;; glyphs on a single line as horizontal lines spanning the entire
;; window.  It is suitable for inclusion into mode hooks and is
;; intended to be used that way.  The following snippet would enable
;; it for Emacs Lisp files for instance:
;;
;;     (add-hook 'emacs-lisp-mode-hook 'form-feed-mode)

;;; Note:
;;
;; Yuan: I removed a bunch of functions and variables and changed
;; font-lock to jit-lock.


;;; Code:


;;; variables

(defgroup form-feed nil
  "Turn ^L glyphs into horizontal lines."
  :prefix "form-feed-"
  :group 'faces)

(defface form-feed-line
  '((((type graphic)
      (background light)) :strike-through "black")
    (((type graphic)
      (background dark)) :strike-through "white")
    (((type tty)) :inherit font-lock-comment-face :underline t))
  "Face for form-feed-mode lines."
  :group 'form-feed)

(defcustom form-feed-line-width t
  "Width of the form feed line.
It may be one of the following values:

t: Full width.

floating point number: Ratio of full width.  A value of 0.5 would
use half the width.

positive integer number: Width as measured in columns.  A value
of 80 would use a 80 characters wide line.

negative integer number: Full width minus specified number of
columns.  A value of -1 would leave the last column empty."
  :type '(choice (const :tag "Full width" t)
                 (float :tag "Ratio")
                 (integer :tag "Columns"))
  :group 'form-feed)

(defvar form-feed--line-width
  (cond
   ((integerp form-feed-line-width)
    (if (>= form-feed-line-width 0)
        form-feed-line-width
      `(- text ,(abs form-feed-line-width))))
   ((floatp form-feed-line-width)
    `(,form-feed-line-width . text))
   (t 'text)))

(defvar form-feed--font-lock-keywords
  ;; NOTE see (info "(elisp) Search-based fontification") and the
  ;; `(MATCHER . SUBEXP-HIGHLIGHTER)' section
  `((,page-delimiter 0 form-feed--font-lock-face t)))

(defcustom form-feed-lighter " ^L"
  "Lighter for `form-feed-mode'."
  :type 'string
  :group 'form-feed
  :risky t)


;;; Functions

(defun form-feed-fontify (beg end)
  "Fonfity page breaks at beginning of line between BEG and END."
  (goto-char beg)
  (while (re-search-forward "^" end t)
    (put-text-property (match-beginning 0) (match-end 0)
                       'font-lock-face 'form-feed-line)
    (put-text-property (match-beginning 0) (match-end 0)
                       'display `(space :width ,form-feed--line-width))))

;;;###autoload
(define-minor-mode form-feed-mode
  "Toggle form-feed-mode.

This minor mode displays page delimiters which usually appear as ^L
glyphs on a single line as horizontal lines spanning the entire
window."
  :lighter form-feed-lighter
  (if form-feed-mode
      (jit-lock-register #'form-feed-fontify)
    (jit-lock-unregister #'form-feed-fontify))
  (jit-lock-refontify))

(provide 'form-feed)
;;; form-feed.el ends here
#+end_src

** Dired Toggle Sudo
#+begin_src elisp
(eat-package dired-toggle-sudo
  :commands
  dired-toggle-sudo)
#+end_src

*** Source
#+begin_src elisp :tangle site-lisp/dired-toggle-sudo.el
;;; dired-toggle-sudo.el --- Browse directory with sudo privileges.

;; Copyright © 2011 Sebastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>

;; Author: Sebastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>
;; Keywords: emacs, dired
;; Created: 2011-07-06
;; Last changed: 2020-04-01 15:52:40
;; Licence: WTFPL, grab your copy here: http://sam.zoy.org/wtfpl/

;; This file is NOT part of GNU Emacs.

;;; Commentary:
;;
;; Allow to switch from current user to sudo when browsind `dired' buffers.
;;
;; To activate and switch with "C-c C-s" just put in your .emacs:
;;
;; (require 'dired-toggle-sudo)
;; (define-key dired-mode-map (kbd "C-c C-s") 'dired-toggle-sudo)
;; (eval-after-load 'tramp
;;  '(progn
;;     ;; Allow to use: /sudo:user@host:/path/to/file
;;     (add-to-list 'tramp-default-proxies-alist
;;		  '(".*" "\\`.+\\'" "/ssh:%h:"))))



;;; Code:

(require 'files)
(require 'tramp)
(require 'dired)

(defun dired-toggle-sudo-internal (path &optional sudo-user)
  "Convert PATH to its sudoed version. root is used by default
unless SUDO-USER is provided."
  (let* (;; Handle the case of local files. `tramp-dissect-file-name' does
	 ;; not raise an error anymore.
	 (tramp-pseudo-method (if (> emacs-major-version 25)
				  "/-::" "/:"))
	 (path (if (tramp-tramp-file-p path)
		   path
		 (concat tramp-pseudo-method path)))
	 (file-vec (or (ignore-errors (tramp-dissect-file-name
				       path))
		       (tramp-dissect-file-name
			(concat tramp-pseudo-method path) 1)))
	 (method  (tramp-file-name-method file-vec))
	 (user (tramp-file-name-user file-vec))
	 (host  (tramp-file-name-host file-vec))
	 (localname (expand-file-name
		     (tramp-file-name-localname file-vec))))
    ;; (message "(tramp-make-tramp-file-name %s %s %s %s %s %s)"
    ;; 	     method
    ;; 	     (tramp-file-name-domain file-vec)
    ;; 	     user host
    ;; 	     (tramp-file-name-port file-vec)
    ;; 	     localname)
    (when (or (string= system-name host)
	      (string= "-" host))
      (setq host nil))
    (cond
     ;; remote directory -> sudo
     ((and host (string= method "ssh"))
      (setq method "sudo" user sudo-user))
     ;; remote directory -> normal
     ((and host (string= method "sudo"))
      (setq method "ssh" user nil))
     ;; Local directory -> normal
     ((and (not host) (string= method "ssh"))
      (setq method "sudo"))
     ;; Local directory -> sudo
     ((and (not host) (string= method "sudo"))
      (setq method nil user sudo-user))
     ;; Local directory -> normal
     (t
      (setq method "sudo" user sudo-user)))
    ;; (message "%s -> %s" path file-vec)
    ;; (message "(tramp-make-tramp-file-name %s %s %s %s %s %s)"
    ;; 	     method
    ;; 	     (tramp-file-name-domain file-vec)
    ;; 	     user host
    ;; 	     (tramp-file-name-port file-vec)
    ;; 	     localname)
    (replace-regexp-in-string
     "^/:/" "/"
     (if (> emacs-major-version 25)
	 (tramp-make-tramp-file-name method
				     user
				     (tramp-file-name-domain file-vec)
				     host
				     (tramp-file-name-port file-vec)
				     localname)
	 (tramp-make-tramp-file-name method user host localname)))))

(defun dired-toggle-sudo-find (fname)
  "Create a new buffer for file name FNAME."
  (let ((save-point (point)))
    (find-alternate-file fname)
    (goto-char save-point)))

;;;###autoload
(defun dired-toggle-sudo (&optional sudo-user)
  "Reopen current file or dired buffer with sudo.
If SUDO-USER is nil assume root.
If called with `universal-argument' (C-u), ask for username.
"
  (interactive "P")
  (let* ((fname (or buffer-file-name
		    dired-directory))
	 (sudo-user (if current-prefix-arg
			(read-string "Username: ")
		      sudo-user))
	 (orig (current-buffer))
         (file-now (if (eq major-mode 'dired-mode)
                       (dired-get-filename t))))
    (when fname
      (setq fname (dired-toggle-sudo-internal fname sudo-user))
      (if (not (eq major-mode 'dired-mode))
	  (dired-toggle-sudo-find fname)
	(kill-buffer orig)
	(dired fname)
        (when file-now
          (dired-goto-file (expand-file-name file-now fname)))))))

(provide 'dired-toggle-sudo)

;;; dired-toggle-sudo.el ends here
#+end_src

** Color Outline
#+begin_src elisp
(eat-package color-outline
  :commands color-outline-mode
  :hook (prog-mode-hook . color-outline-mode)
  :config
  ;; TODO /* ?
  (push '(go-mode "/") color-outline-comment-char-alist))
#+end_src

*** Source
#+begin_src elisp :tangle site-lisp/color-outline.el
;;; color-outline.el --- Outline w/ color      -*- lexical-binding: t; -*-

;; Author: Yuan Fu <casouri@gmail.com>

;; This file is NOT part of GNU Emacs

;;; Commentary:
;;
;; This package is a basic version of outshine.el, it provides a quick
;; and easy way of setting up headline patterns and integration with
;; outline commands, highlighting of headlines and imenu support.
;;
;; Usage:
;;
;; M-x color-outline-mode RET
;;
;; Header level is determined by the number of comment characters.
;; The first level header starts from 3 comment characters.
;; For example, in ‘emacs-lisp-mode’:
;;
;;     ;;; Header 1
;;     ;;;; Header 2
;;     ;;;;; Header 3
;;
;; In ‘python-mode’:
;;
;;     ### Header 1
;;     #### Header 2
;;     ##### Header 3
;;
;; To toggle each header, use outline commands.
;;
;; Ideally, ‘comment-start’ defined by major modes are enough for
;; setting up color-outline, however, sometimes ‘comment-char’ is not
;; sufficient. Then you can add support for new major modes by
;;
;;     (color-outline-define-header MODE COMMENT-CHAR COMMENT-BEGIN)
;;
;; For example, COMMENT-CHAR for ‘python-mode’ is “#”. It can be more
;; than one character. COMMENT-BEGIN is the (possibly empty) beginning
;; of the header. For example, in OCaml, comments are (* ... *). Then
;; COMMENT-BEGIN is “(” and COMMENT-CHAR is “*”.
;;
;; Instead of using ‘color-outline-define-header’, you can also modify
;; ‘color-outline-comment-char-alist’ directly.
;;
;; If you want buffer-local setting for color-outline, you can add a
;; file-local variable ‘color-outline-local-comment-char’.
;;
;; Color-outline looks for comment char settings in the following order:
;; 1. Buffer-local ‘color-outline-local-comment-char’
;; 2. ‘color-outline-comment-char-alist’
;; 3. ‘comment-start’ defined by the major mode.

;;; Code:
;;

(require 'cl-lib)
(require 'subr-x)
(require 'rx)

(defgroup color-outline
  '((color-outline-comment-char-alist custom-variable)
    (color-outline-disable-list custom-variable)
    (color-outline-face-list custom-variable))
  "Easy programming mode outline with visual highlight."
  :group 'outline)

(defcustom color-outline-comment-char-alist
  '((c-mode "*" "/")
    (c++-mode "*" "/")
    (python-mode "#")
    (javascript-mode "/")
    (css-mode "*" "/")
    (tuareg-mode "*" "(")
    (shell-script-mode "#")
    (web-mode "-" "<!")
    (sh-mode "#"))
  "Stores custom comment character for each major mode.
An alist of (MAJOR-MODE . (COMMENT-CHAR COMMENT-BEGIN))
or (MAJOR-MODE . (COMMENT-CHAR)). For other major modes,
‘comment-start’ is enough."
  :type '(alist :key-type symbol
                :value-type sexp)
  :group 'color-outline)

(defcustom color-outline-disable-list '(org-mode outline-mode)
  "Color-outline mode is not enabled in these modes."
  :type '(repeat symbol)
  :group 'color-outline)

(defcustom color-outline-face-list
  '(outline-1 outline-2 outline-3 outline-4)
  "Face for each level."
  :type '(repeat symbol)
  :group 'color-outline)

(defvar-local color-outline-local-comment-char nil
  "Overriding buffer local setting for color-outline comment char.
This value takes the same form as the values in alist
‘color-outline-comment-char-alist’. I.e., a list (COMMENT-CHAR
COMMENT-BEGIN).")

(defvar-local color-outline--keywords nil
  "We store font-lock keywords in this variable.
This is used to remove font-lock rules when ‘color-outline-mode’
is turned off.")

(defvar-local color-outline--imenu-expression nil
  "We store imenu expressions in this variable.
This is used to remove imenu expressions when ‘color-outline-mode’
is turned off.")

(defun color-outline--create-pattern (comment-char comment-begin)
  "Return the header pattern for major mode MODE.
COMMENT-CHAR (string) is the comment character of this mode.
COMMENT-BEGIN is string pattern starting a comment.
The result pattern is

<COMMENT-START><COMMENT-CHAR>{3}<COMMENT-CHAR>*<SPACE><ANYCHAR>*

The first group is the second group of COMMENT-CHARS, the second
group is <ANYCHAR>*.

Return a plist

    (:outline PATTERN :font-lock PATTERN-LIST)

where PATTERN is suitable for `outline-regepx', PATTERN-LIST is suitable
for `font-lock-add-keywords' (a list of specs)."
  (let* ((header-level (length color-outline-face-list))
         (outline-re (rx-to-string `(seq ,comment-begin
                                         (= 3 ,comment-char)
                                         (group (* ,comment-char))
                                         " "
                                         (group (* (not (any ?\t ?\n)))))))
         (re-list (cl-loop
                   for level from 0 to (1- header-level)
                   collect
                   (rx-to-string `(seq bol
                                       ,comment-begin
                                       (= 3 ,comment-char)
                                       (= ,level ,comment-char)
                                       " "
                                       (* (not (any ?\t ?\n)))))))
         (font-lock-list (cl-loop for re in re-list
                                  for face in color-outline-face-list
                                  collect `(,re (0 ',face t t)))))
    (list :outline outline-re :font-lock font-lock-list)))

(defun color-outline-define-header (mode comment-char comment-begin)
  "Define the header pattern for major mode MODE.
COMMENT-CHAR (char) is the comment character of this mode.
COMMENT-BEGIN is string pattern starting a comment."
  (setf (alist-get mode color-outline-comment-char-alist)
        (color-outline--create-pattern comment-char comment-begin)))

(define-minor-mode color-outline-mode
  "Color outline."
  :lighter "Co"
  (if (and color-outline-mode
           (not (apply #'derived-mode-p color-outline-disable-list)))
      (if-let* ((rule (or color-outline-local-comment-char
                          (alist-get major-mode
                                     color-outline-comment-char-alist)
                          (list comment-start "")))
                (comment-char (or (car rule) comment-start))
                (comment-begin (or (cadr rule) ""))
                (config (color-outline--create-pattern
                         comment-char comment-begin))
                (outline-re (plist-get config :outline))
                (imenu-expression `("Section" ,outline-re 2))
                (font-lock-keyword-list (plist-get config :font-lock)))
          (progn (setq-local outline-regexp outline-re)
                 (setq-local outline-level
                             (lambda () (1+ (/ (length (match-string 1))
                                               (length comment-char)))))
                 (setq-local imenu-generic-expression
                             (cons imenu-expression
                                   imenu-generic-expression))
                 (when (not (bound-and-true-p
                             outline-minor-mode-highlight))
                   (font-lock-add-keywords nil font-lock-keyword-list))
                 (setq color-outline--keywords font-lock-keyword-list)
                 (setq color-outline--imenu-expression imenu-expression)
                 (outline-minor-mode))
        ;; Don’t error in major mode hooks.
        (message "No color-outline pattern configured for %s"
                 major-mode))
    (kill-local-variable 'outline-regexp)
    (kill-local-variable 'outline-level)
    (font-lock-remove-keywords nil color-outline--keywords)
    (setq-local imenu-generic-expression
                (remove color-outline--imenu-expression
                        imenu-generic-expression))
    (outline-minor-mode -1))
  (jit-lock-refontify))

(provide 'color-outline)

;;; color-outline.el ends here
#+end_src

** Yuck Mode
#+begin_src elisp
(eat-package yuck-mode)
#+end_src

*** Source
#+begin_src elisp :tangle site-lisp/yuck-mode.el
;;; yuck-mode.el --- Major mode for the yuck configuration language -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2022 mmcjimsey26
;;
;; Author: mmcjimsey26
;; Maintainer: mmcjimsey26
;; Created: June 14, 2022
;; Modified: July 3, 2022
;; Version: 1.0.1
;; Keywords: languages yuck eww widgets
;; Homepage: https://github.com/mmcjimsey26/yuck-mode
;; Package-Requires: ((emacs "25.1"))
;;
;; This file is not part of GNU Emacs.

;;; Commentary:

;; A simple major mode for editing files in the yuck configuration language, used for
;; configuring ElKowar's Wacky Widgets (eww), usually ending in `.yuck'.

;; This package provides the following features:
;;      * Syntax hilighting

;;; Installation:

;; This mode requires Emacs-25.1 or higher.
;; Put this file into `load-path' and the following into ~/.emacs
;;      (autoload 'yuck-mode "yuck-mode" nil t)

;;; Code:

(defgroup yuck nil
  "Yuck Configuration Major Mode."
  :group 'languages)

(defconst yuck-mode-menu nil "Menu for yuck mode.")

(defvar yuck-mode-hook nil "Yuck mode hook.")

;; Keywords and widget types for `yuck-mode'.
(defvar yuck-keywords-list
  '("defvar" "defpoll" "deflisten" "defwindow" "defwidget" "for" "include"))

(defvar yuck-widgets-list
  '("combo-box-text"
    "expander" "revealer" "checkbox" "color-button" "color-chooser" "scale" "progress"
    "input" "button" "image" "box" "overlay" "centerbox" "scroll" "eventbox"
    "label" "literal" "calendar" "transform" "circular-progress" "graph"))

(defvar yuck-keywords-regex)
(defvar yuck-widgets-regex)
(defvar yuck-font-lock-keywords)

;; Regex to highlight buffer.
(setq yuck-keywords-regex (regexp-opt yuck-keywords-list 'words))
(setq yuck-widgets-regex (regexp-opt yuck-widgets-list 'words))

(setq yuck-font-lock-keywords
      `(
        (,yuck-keywords-regex . font-lock-keyword-face)
        (,yuck-widgets-regex . font-lock-type-face)
        (,"\:[a-z\-]*" . font-lock-function-name-face)))

(defconst yuck-mode-syntax-table
  (let ((table (make-syntax-table)))
    ;; "" : string delimiter
    (modify-syntax-entry ?\" "\"" table)
    (modify-syntax-entry ?\` "\"" table)
    (modify-syntax-entry ?\; "<" table)
    (modify-syntax-entry ?\n ">" table)
    table))

;;;###autoload
(define-derived-mode yuck-mode prog-mode "Yuck"
  "Major mode for editing yuck config files."
  :syntax-table yuck-mode-syntax-table
  (setq font-lock-defaults '(yuck-font-lock-keywords))
  (font-lock-ensure))

;;;###autoload
(add-to-list 'auto-mode-alist '("\\.yuck\\'" . yuck-mode))

(provide 'yuck-mode)
;;; yuck-mode.el ends here
#+end_src

** Protobuf Mode
#+begin_src elisp
(with-eval-after-load "protobuf-mode"
  (add-hook 'protobuf-mode-hook
            (lambda ()
              (setq imenu-generic-expression
                    '((nil "^[[:space:]]*\\(message\\|service\\|enum\\)[[:space:]]+\\([[:alnum:]]+\\)" 2))))))
#+end_src

*** Source
#+begin_src elisp :tangle site-lisp/protobuf-mode.el
;;; protobuf-mode.el --- major mode for editing protocol buffers.  -*- lexical-binding: t; -*-

;; Author: Alexandre Vassalotti <alexandre@peadrop.com>
;; Created: 23-Apr-2009
;; Version: 0.3
;; Keywords: google protobuf languages

;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are
;; met:
;;
;;     * Redistributions of source code must retain the above copyright
;; notice, this list of conditions and the following disclaimer.
;;     * Redistributions in binary form must reproduce the above
;; copyright notice, this list of conditions and the following disclaimer
;; in the documentation and/or other materials provided with the
;; distribution.
;;     * Neither the name of Google Inc. nor the names of its
;; contributors may be used to endorse or promote products derived from
;; this software without specific prior written permission.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

;;; Commentary:

;; Installation:
;;   - Put `protobuf-mode.el' in your Emacs load-path.
;;   - Add this line to your .emacs file:
;;       (require 'protobuf-mode)
;;
;; You can customize this mode just like any mode derived from CC Mode.  If
;; you want to add customizations specific to protobuf-mode, you can use the
;; `protobuf-mode-hook'. For example, the following would make protocol-mode
;; use 2-space indentation:
;;
;;   (defconst my-protobuf-style
;;     '((c-basic-offset . 2)
;;       (indent-tabs-mode . nil)))
;;
;;   (add-hook 'protobuf-mode-hook
;;     (lambda () (c-add-style "my-style" my-protobuf-style t)))
;;
;; Refer to the documentation of CC Mode for more information about
;; customization details and how to use this mode.
;;
;; TODO:
;;   - Make highlighting for enum values work properly.
;;   - Fix the parser to recognize extensions as identifiers and not
;;     as casts.
;;   - Improve the parsing of option assignment lists. For example:
;;       optional int32 foo = 1 [(my_field_option) = 4.5];
;;   - Add support for fully-qualified identifiers (e.g., with a leading ".").

;;; Code:

(require 'cc-mode)

(eval-when-compile
  (and (= emacs-major-version 24)
       (>= emacs-minor-version 4)
       (require 'cl-lib))
  (require 'cc-langs)
  (require 'cc-fonts))

;; This mode does not inherit properties from other modes. So, we do not use
;; the usual `c-add-language' function.
(eval-and-compile
  (put 'protobuf-mode 'c-mode-prefix "protobuf-"))

;; The following code uses of the `c-lang-defconst' macro define syntactic
;; features of protocol buffer language.  Refer to the documentation in the
;; cc-langs.el file for information about the meaning of the -kwds variables.

(c-lang-defconst c-primitive-type-kwds
  protobuf '("double" "float" "int32" "int64" "uint32" "uint64" "sint32"
             "sint64" "fixed32" "fixed64" "sfixed32" "sfixed64" "bool"
             "string" "bytes" "group"))

(c-lang-defconst c-modifier-kwds
  protobuf '("required" "optional" "repeated"))

(c-lang-defconst c-class-decl-kwds
  protobuf '("message" "enum" "service"))

(c-lang-defconst c-constant-kwds
  protobuf '("true" "false"))

(c-lang-defconst c-other-decl-kwds
  protobuf '("package" "import"))

(c-lang-defconst c-other-kwds
  protobuf '("default" "max"))

(c-lang-defconst c-identifier-ops
  ;; Handle extended identifiers like google.protobuf.MessageOptions
  protobuf '((left-assoc ".")))

;; The following keywords do not fit well in keyword classes defined by
;; cc-mode.  So, we approximate as best we can.

(c-lang-defconst c-type-list-kwds
  protobuf '("extensions" "to" "reserved"))

(c-lang-defconst c-typeless-decl-kwds
  protobuf '("extend" "rpc" "option" "returns"))


;; Here we remove default syntax for loops, if-statements and other C
;; syntactic features that are not supported by the protocol buffer language.

(c-lang-defconst c-brace-list-decl-kwds
  ;; Remove syntax for C-style enumerations.
  protobuf nil)

(c-lang-defconst c-block-stmt-1-kwds
  ;; Remove syntax for "do" and "else" keywords.
  protobuf nil)

(c-lang-defconst c-block-stmt-2-kwds
  ;; Remove syntax for "for", "if", "switch" and "while" keywords.
  protobuf nil)

(c-lang-defconst c-simple-stmt-kwds
  ;; Remove syntax for "break", "continue", "goto" and "return" keywords.
  protobuf nil)

(c-lang-defconst c-paren-stmt-kwds
  ;; Remove special case for the "(;;)" in for-loops.
  protobuf nil)

(c-lang-defconst c-label-kwds
  ;; Remove case label syntax for the "case" and "default" keywords.
  protobuf nil)

(c-lang-defconst c-before-label-kwds
  ;; Remove special case for the label in a goto statement.
  protobuf nil)

(c-lang-defconst c-cpp-matchers
  ;; Disable all the C preprocessor syntax.
  protobuf nil)

(c-lang-defconst c-decl-prefix-re
  ;; Same as for C, except it does not match "(". This is needed for disabling
  ;; the syntax for casts.
  protobuf "\\([\{\};,]+\\)")


;; Add support for variable levels of syntax highlighting.

(defconst protobuf-font-lock-keywords-1 (c-lang-const c-matchers-1 protobuf)
  "Minimal highlighting for protobuf-mode.")

(defconst protobuf-font-lock-keywords-2 (c-lang-const c-matchers-2 protobuf)
  "Fast normal highlighting for protobuf-mode.")

(defconst protobuf-font-lock-keywords-3 (c-lang-const c-matchers-3 protobuf)
  "Accurate normal highlighting for protobuf-mode.")

(defvar protobuf-font-lock-keywords protobuf-font-lock-keywords-3
  "Default expressions to highlight in protobuf-mode.")

;; Our syntax table is auto-generated from the keyword classes we defined
;; previously with the `c-lang-const' macro.
(defvar protobuf-mode-syntax-table nil
  "Syntax table used in protobuf-mode buffers.")
(or protobuf-mode-syntax-table
    (setq protobuf-mode-syntax-table
          (funcall (c-lang-const c-make-mode-syntax-table protobuf))))

(defvar protobuf-mode-abbrev-table nil
  "Abbreviation table used in protobuf-mode buffers.")

(defvar protobuf-mode-map nil
  "Keymap used in protobuf-mode buffers.")
(or protobuf-mode-map
    (setq protobuf-mode-map (c-make-inherited-keymap)))

(easy-menu-define protobuf-menu protobuf-mode-map
  "Protocol Buffers Mode Commands"
  (cons "Protocol Buffers" (c-lang-const c-mode-menu protobuf)))

;;;###autoload (add-to-list 'auto-mode-alist '("\\.proto\\'" . protobuf-mode))

;;;###autoload
(define-derived-mode protobuf-mode prog-mode "Protocol-Buffers"
  "Major mode for editing Protocol Buffers description language.
The hook `c-mode-common-hook' is run with no argument at mode
initialization, then `protobuf-mode-hook'.
Key bindings:
\\{protobuf-mode-map}"
  :after-hook (c-update-modeline)
  (setq abbrev-mode t)
  (c-initialize-cc-mode t)
  (c-init-language-vars protobuf-mode)
  (c-common-init 'protobuf-mode)
  (easy-menu-add protobuf-menu)
  (setq imenu-generic-expression
	    '(("Message" "^[[:space:]]*message[[:space:]]+\\([[:alnum:]]+\\)" 1)
          ("Enum" "^[[:space:]]*enum[[:space:]]+\\([[:alnum:]]+\\)" 1)
          ("Service" "^[[:space:]]*service[[:space:]]+\\([[:alnum:]]+\\)" 1)))
  (c-run-mode-hooks 'c-mode-common-hook))

(provide 'protobuf-mode)

;;; protobuf-mode.el ends here
#+end_src

** iimg
#+begin_src elisp
(eat-package iimg
  :commands iimg-enable
  :hook ((text-mode-hook org-mode-hook) . iimg-enable))
#+end_src

*** Source
#+begin_src elisp :tangle site-lisp/iimg.el
;;; iimg.el --- Inline image      -*- lexical-binding: t; -*-

;; Author: Yuan Fu <casouri@gmail.com>

;;; This file is NOT part of GNU Emacs

;;; Commentary:
;;
;; This package provides three functionalities:
;;  1. Embedding images into text files by encoding them to base64
;;     strings.
;;  2. Rendering embedded images.
;;  3. Controlling the size of the displayed image.
;;
;; Why embed the image? This way everything is in a single file and I
;; feel safe.
;;
;; Update: embedding the image in the text brings problems in indexing
;; the text, the best alternative is to embed the image data in a
;; separate supplement file “current-file-name.iimg”. If you want to
;; insert a image and store the data in the supplement file, answer yes
;; when asked when inserting the image.
;;
;;;; To enable:
;;
;;     M-x iimg-enable RET
;;
;;;; To insert an image:
;;
;; Drag and drop the image or use `iimg-insert'. Iimg will prompt for
;; a caption/name for the image. If you don’t enter anything, iimg
;; generates a unique string as the fallback.
;;
;; When you insert an image, the image appears at point is just a
;; link, the actual base64 data is appended at the end of the file (or
;; in the supplement file). I separate link and data because that way
;; readers incapable of rendering inline images can still view the
;; rest of the document without problems.
;;
;;;; To resize an image:
;;
;; Type s on an image or use `iimg-resize'. In the minibuffer, type in
;; the specification in the format of “SIDE UNIT AMOUNT”.
;;
;; SIDE can be width or height.
;; UNIT can be char or pixel.
;; AMOUNT can be a float or a integer.
;;
;; For example, “width char 40” means 40 characters wide. If AMOUNT is
;; a floating point number like 0.5, it is interpreted as a percentage
;; to the width/height of the window and UNIT is ignored.
;;
;; The default size is (width char 70).
;;
;;;; To toggle thumbnail display:
;;
;; Type t on an image or use `iimg-toggle-thumbnail'.
;;
;;;; To delete an image or image data
;;
;; To protect the image data, iimg marks them read-only, to delete
;; the data, press D on the data.
;;
;;;; To render an image across multiple lines:
;;
;; Type m on an image or use `iimg-toggle-multi-line'.
;;
;; When an image is displayed across multiple lines, scrolling is much
;; smoother. However, this doesn't work well when image size is set to
;; n percent of the window width/height: if you change the window
;; width/height, the number of lines needed for the image changes, but
;; iimg doesn't update its "image lines" automatically.
;;
;; Another way to get smooth scrolling over images is to use
;; iscroll.el. In that case you don't need to make the image
;; multi-line.

;;; Developer
;;
;; IIMG-DATA := ({iimg-data (:name STRING :data STRING)})
;; IIMG-LINK := ({iimg-link (:name STRING :thumbnail BOOL :size SIZE)})
;; SIZE  := (SIDE UNIT NUMBER)
;; SIDE  := width | height
;; UNIT  := char | pixel
;;
;; How does iimg work:
;;  1. Scan through the file for iimg data, load images into
;;     `iimg--data-alist'.
;;  2. In jit-lock, render iimg links to images.
;;  3. When inserting a new image, update `iimg--data-alist',
;;     insert the data at the end of the file, and insert the link
;;     at point.
;;
;; `iimg--data-alist' is always up to date: any image in the file are
;; in the alist.
;;
;; Why text property instead of overlay: text property seems to be
;; faster (when scrolling, etc).

;;; Code:
;;
;; For `with-buffer-modified-unmodified'.
(require 'bookmark)

;;; Variables

(defvar-local iimg--data-alist nil
  "An alist of (NAME . IMAGE-DATA).
NAME (string) is the name of the image.
IMAGE-DATA is the image binary data.")

(defvar iimg-multi-line t
  "Render image in multiple lines.")

(defvar iimg--data-regexp (rx (seq "({iimg-data "
                                   (group (+? anything))
                                   "})"))
  "Regular expression for inline image data.
The first group is the plist containing data.")

(defvar iimg--link-regexp
  (rx (seq "({iimg-link " (group (+? anything)) "})"
           (group (* "\n---"))))
  "Regular expression for inline image link.
The first group is the plist containing data. The second group
contains the slices.")

(defsubst iimg--format-data (plist)
  "Return formatted iimg data.
PLIST is the plist part of the link, should be a plist."
  (format "({iimg-data %s})" (prin1-to-string plist)))

(defun iimg--format-link (plist)
  "Return formatted iimg link.
PLIST is the plist part of the link, should be a plist.
The image must already be in `iimg--data-alist'."
  (let* ((img (iimg--image-from-props plist))
         (multi-line (plist-get plist :multi-line))
         (row-count (ceiling (/ (cdr (image-size img t))
                                (frame-char-height)))))
    (format "({iimg-link %s})%s"
            (prin1-to-string plist)
            (if multi-line
                (with-temp-buffer
                  (dotimes (_ (1- row-count))
                    (insert "\n---"))
                  (buffer-string))
              ""))))

(defvar iimg--link-keymap
  (let ((map (make-sparse-keymap)))
    (define-key map "t" #'iimg-toggle-thumbnail)
    (define-key map "s" #'iimg-resize)
    (define-key map "d" #'iimg-delete-image-at-point)
    (define-key map "m" #'iimg-toggle-multi-line)
    map)
  "Keymap used on images.")

(defvar iimg--data-keymap
  (let ((map (make-sparse-keymap)))
    (define-key map "D" #'iimg-delete-data-at-point)
    map)
  "Keymap used on image data.")

;;; Loading and rendering


(defun iimg--image-from-props (props)
  "Given plist PROPS, return an image spec."
  (let* ((name (plist-get props :name))
         (thumbnail (plist-get props :thumbnail))
         (size (plist-get props :size))
         (size-spec (if thumbnail
                        ;; TODO This thumbnail size should work in most
                        ;; cases, but can be improved.
                        (iimg--calculate-size '(width char 30))
                      (iimg--calculate-size (or size '(width char 1.0))))))
    ;; Below `iimg--data-of' calls `iimg--load-image' which does
    ;; regexp search. I added `save-match-data' in `iimg--load-image'.
    (or (apply #'create-image (iimg--data-of name) nil t size-spec)
        (error "failed to create image"))))

(defun iimg--fontify-1 (beg end display)
  "Add overlay to text between BEG and END with DISPLAY property."
  (put-text-property beg end 'display display)
  (put-text-property beg end 'keymap iimg--link-keymap)
  (put-text-property beg end 'iimg t)
  (put-text-property beg end 'rear-nonstick '(display keymap iimg)))

(defun iimg--fontify (beg end)
  "Fontify embedded image links between BEG and END."
  (dolist (ov (overlays-in beg end))
    (if (overlay-get ov 'iimg)
        (delete-overlay ov)))
  ;; Fontify link.
  (goto-char beg)
  (while (and (re-search-forward iimg--link-regexp nil t)
              (< (match-beginning 0) end))
    ;; PROPS includes :name, :thumbnail, :size
    (let* ((props (read (match-string-no-properties 1)))
           (image (iimg--image-from-props props))
           (multi-line (plist-get props :multi-line))
           (name (plist-get props :name))
           (inhibit-read-only t))
      (cond
       ((not (display-graphic-p))
        ;; In terminal.
        (put-text-property
         (match-beginning 0) (match-end 0)
         'display (format "[iimg link of %s]" name)))
       ((not multi-line)
        ;; Render the image on a single line.
        (iimg--fontify-1 (match-beginning 0) (match-end 0) image))
       (t
        ;; Render the image across multiple lines. We assume the
        ;; number of placeholder lines in the buffer is correct.
        (save-excursion
          (let* ((slice-height (frame-char-height))
                 (image-width (car (image-size image t)))
                 (x 0) (y 0))
            (goto-char (match-beginning 0))
            (while (< (point) (match-end 0))
              (let ((beg (line-beginning-position))
                    (end (line-end-position)))
                (iimg--fontify-1
                 beg end (list (list 'slice x y image-width slice-height)
                               image))
                (put-text-property end (1+ end) 'line-height t)
                (setq y (+ y slice-height)))
              (forward-line))))))
      (put-text-property (match-beginning 0) (match-end 0)
                         'read-only t)
      ;; This allows inserting after the image.
      (put-text-property (match-beginning 0) (match-end 0)
                         'rear-nonsticky
                         '(read-only display iimg keymap))))
  (cons 'jit-lock-response (cons beg end)))

(defun iimg--calculate-size (size)
  "Translate SIZE to an size that `create-image' recognizes.
IOW, (:width NUMBER) or (:height NUMBER), where NUMBER is in
pixels.
Calculation is done based on the current window."
  (pcase-let*
      ((`(,side ,unit ,amount) size)
       ;; Pixel width/height of a character.
       (char-pixel-len (pcase side
                         ('width (frame-char-width))
                         ('height (frame-char-height))
                         (_ (signal 'iimg-invalid-size size))))
       ;; Pixel wdith/height of the window
       (window-len (pcase side
                     ('width (window-width nil t))
                     ('height (window-height nil t))
                     (_ (signal 'iimg-invalid-size size))))
       ;; Pixel width/height of a character or pixel.
       (unit-len (pcase unit
                   ('char char-pixel-len)
                   ('pixel 1)
                   (_ (signal 'iimg-invalid-size size))))
       (len (pcase amount
              ;; This much char or pixels.
              ((pred integerp) (floor (* amount unit-len)))
              ;; This percent of the window width/height.
              ((pred floatp) (floor (* amount window-len)))
              (_ (signal 'iimg-invalid-size size)))))

    (pcase side
      ('width (list :width len))
      ('height (list :height len)))))

(defun iimg--load-image-data (beg end)
  "Load iimg data from BEG to END.
Look for iimg-data’s and store them into an alist, then return it."
  ;; This could be called from within `iimg--fontify', and we
  ;; don’t want to mess up its match data.
  (save-match-data
    (save-excursion
      (goto-char beg)
      (let (alist)
        (while (re-search-forward iimg--data-regexp end t)
          (let* ((beg (match-beginning 1))
                 (end (match-end 1))
                 (props (read (buffer-substring-no-properties beg end)))
                 (name (plist-get props :name))
                 (base64-string (plist-get props :data))
                 (image-data (base64-decode-string base64-string)))
            (push (cons name image-data) alist)
            ;; We fontify data here because data are usually to long
            ;; to be handled correctly by jit-lock.
            (with-silent-modifications
              (let ((beg (match-beginning 0))
                    (end (match-end 0)))
                (put-text-property
                 beg end 'display (format "[iimg data of %s]" name))
                (put-text-property beg end 'read-only t)
                ;; This allows inserting after the data.
                (put-text-property beg end 'rear-nonsticky
                                   '(read-only display))
                (put-text-property beg end 'keymap iimg--data-keymap)
                (put-text-property beg end 'iimg t)))))
        alist))))

(defun iimg--supplement-file (&optional create)
  "Return the supplement-file if it exists, nil if not.
If CREATE non-nil, create the file when it doesn’t exist."
  (let ((supplement-file (concat (file-name-nondirectory
                                  (buffer-file-name))
                                 ".iimg")))
    (if (and create (not (file-exists-p supplement-file)))
        (with-temp-buffer
          (write-file supplement-file)))
    (if (file-exists-p supplement-file)
        supplement-file
      nil)))

(defun iimg--data-of (name)
  "Get the image data of NAME (string)."
  (when (not iimg--data-alist)
    (setq iimg--data-alist
          (append (iimg--load-image-data (point-min) (point-max))
                  (if-let ((file (iimg--supplement-file)))
                      (with-temp-buffer
                        (insert-file-contents file nil nil nil t)
                        (iimg--load-image-data
                         (point-min) (point-max)))))))
  (alist-get name iimg--data-alist nil nil #'equal))

(defun iimg--replenish-slices ()
  "Re-slice images.
We don't save the slices under a link, so we need to add them back."
  (save-excursion
    (with-buffer-modified-unmodified
     (goto-char (point-min))
     (while (re-search-forward iimg--link-regexp nil t)
       (when-let* ((props (read (buffer-substring-no-properties
                                 (match-beginning 1) (match-end 1))))
                   (multi-line (plist-get props :multi-line))
                   (inhibit-read-only t))
         (replace-match (iimg--format-link props)))))))

(defun iimg--prune-slices ()
  "Remove slices under a link before saving to a file."
  (save-excursion
    (let ((this-buffer (current-buffer))
          (this-file (buffer-file-name))
          (inhibit-read-only t))
      (with-temp-buffer
        (insert-buffer-substring this-buffer)
        (goto-char (point-min))
        (while (re-search-forward iimg--link-regexp nil t)
          (when-let ((beg (match-beginning 2))
                     (end (match-end 2)))
            (delete-region beg end)))
        (write-region (point-min) (point-max) this-file))
      (clear-visited-file-modtime)
      (set-buffer-modified-p nil)
      t)))

;;; Inserting and modifying

(defun iimg-insert (file name separate-file)
  "Insert FILE at point as an inline image.
NAME is the name of the image, THUMBNAIL determines whether to
display the image as a thumbnail, SIZE determines the size of the
image. See Commentary for the format of NAME, THUMBNAIL, and SIZE.

If SEPARATE-FILE non-nil, insert image data in a separate file
that appends .iimg extension to the current buffer’s filename."
  (interactive
   (list (expand-file-name (read-file-name "Image: "))
         (let ((name (read-string "Caption/name for the image: ")))
           (if (equal name "")
               (format-time-string "%s")
             name))
         (y-or-n-p "Insert in separate file? ")))
  (let* ((data (with-temp-buffer
                 (insert-file-contents-literally file nil nil nil t)
                 (base64-encode-region (point-min) (point-max))
                 ;; TODO Check for max image file size?
                 (buffer-string)))
         (data-string (iimg--format-data (list :name name :data data)))
         iimg-alist
         (insert-fn
          (lambda ()
            ;; Insert data.
            (save-excursion
              (goto-char (point-max))
              (when (text-property-any
                     (max (point-min) (1- (point))) (point) 'read-only t)
                (goto-char
                 (previous-single-char-property-change
                  (point) 'read-only)))
              (let ((beg (point)))
                (insert "\n" data-string "\n")
                (setq iimg-alist (iimg--load-image-data beg (point))))))))
    (if separate-file
        (let ((supp-file (iimg--supplement-file t)))
          (with-temp-buffer
            (insert-file-contents supp-file nil nil nil t)
            (funcall insert-fn)
            (write-file supp-file)))
      (funcall insert-fn))
    (setq iimg--data-alist (append iimg-alist iimg--data-alist))
    ;; Insert link. We insert link after loading image data.
    (insert (iimg--format-link
             (list :name name :size '(width pixel 0.6)
                   :ext (file-name-extension file))))))

(defun iimg--search-link-at-point (&optional datap)
  "Search for iimg link at point.
If found, set match data accordingly and return t, if not, return nil.

If DATAP non-nil, search for image data instead."
  (catch 'found
    (save-excursion
      (let ((pos (point)))
        (beginning-of-line)
        ;; First search in current line.
        (while (and (<= (point) pos)
                    (re-search-forward
                     (if datap iimg--data-regexp iimg--link-regexp)
                     nil t))
          (if (<= (match-beginning 0) pos (match-end 0))
              (throw 'found t)))
        ;; Next search by search backward.
        (goto-char pos)
        (if (and (search-backward
                  (if datap "({iimg-data" "({iimg-link")
                  nil t)
                 (re-search-forward
                  (if datap iimg--data-regexp iimg--link-regexp)
                  nil t)
                 (<= (match-beginning 0) pos (match-end 0)))
            (throw 'found t))))))

(defun iimg--link-at-point ()
  "Return the data (plist) of the iimg link at point.
Return nil if not found."
  (if (iimg--search-link-at-point)
      (read (match-string 1))
    nil))

(defun iimg--set-link-at-point-refresh (props)
  "Set iimg link at point to PROPS, if there is any link.
Also refresh the image at point."
  (when (iimg--search-link-at-point)
    (save-excursion
      (let ((beg (match-beginning 0))
            (inhibit-read-only t))
        (goto-char beg)
        (delete-region beg (match-end 0))
        (insert (iimg--format-link props))
        (iimg--fontify beg (point))))))

(defun iimg-resize ()
  "Resize the inline image at point."
  (interactive)
  (if-let ((img-props (iimg--link-at-point)))
      (let ((size (read
                   (format "(%s)"
                           (read-string
                            "width/height char/pixel amount: ")))))
        (setq img-props (plist-put img-props :size size))
        (iimg--set-link-at-point-refresh img-props))
    (user-error "There is no image at point")))

(defun iimg-toggle-thumbnail ()
  "Toggle thumbnail display for the image at point."
  (interactive)
  (if-let ((img-props (iimg--link-at-point)))
      (progn (setq img-props
                   (plist-put img-props :thumbnail
                              (not (plist-get img-props :thumbnail))))
             (iimg--set-link-at-point-refresh img-props))
    (user-error "There is no image at point")))

(defun iimg-toggle-multi-line ()
  "Toggle multi-line display for the image at point."
  (interactive)
  (if-let ((img-props (iimg--link-at-point)))
      (progn (setq img-props
                   (plist-put img-props :multi-line
                              (not (plist-get img-props :multi-line))))
             (iimg--set-link-at-point-refresh img-props))
    (user-error "There is no image at point")))

(defun iimg-delete-image-at-point ()
  "Delete the image at point."
  (interactive)
  (if (iimg--search-link-at-point)
      (let ((inhibit-read-only t))
        (delete-region (match-beginning 0) (match-end 0)))
    (user-error "There is no image at point")))

(defun iimg-delete-data-at-point ()
  "Delete the image data at point."
  (interactive)
  (if (iimg--search-link-at-point t)
      (let ((inhibit-read-only t))
        (delete-region (match-beginning 0) (match-end 0)))
    (user-error "There is no image data at point")))

(defun iimg-export ()
  "Export image at point."
  (interactive)
  (if-let ((img-props (iimg--link-at-point)))
      (let ((path (concat (read-file-name "Export to (w/o extension): ")
                          (or (plist-get img-props :ext) ".png")))
            (data (iimg--data-of (plist-get img-props :name))))
        (when (file-exists-p path)
          (user-error "File exists, can’t export to it"))
        (when (not (file-writable-p path))
          (user-error "File not wraiteble, can’t export to it"))
        (with-temp-file path
          (insert data))
        (message "Exported to %s" path))
    (user-error "There is no image at point")))

;;; Entry

(defun iimg-enable ()
  "Enable iimg."
  (jit-lock-register #'iimg--fontify)
  (setq-local dnd-protocol-alist
              (cons '("^file:" . iimg-dnd-open-file)
                    dnd-protocol-alist))
  (add-hook 'write-file-functions #'iimg--prune-slices 90 t)
  (iimg--replenish-slices))

;;; Drag and drop

(defun iimg-dnd-open-file (uri _action)
  "Drag-and-drop handler for iimg. URI is the file path."
  (let ((file (dnd-get-local-file-name uri t)))
    (if (and file (file-readable-p file))
        (iimg-insert
         file (let ((name (read-string "Caption/name for the image: ")))
                (if (equal name "")
                    (format-time-string "%s")
                  name))
         (y-or-n-p "Insert in separate file? ")))))

(provide 'iimg)

;;; iimg.el ends here
#+end_src

** bklink
#+begin_src elisp
(eat-package bklink
  :commands bklink-minor-mode
  :config
  (define-key bklink-minor-mode-map (kbd "C-c l") #'bklink-show-back-link)
  (define-key bklink-minor-mode-map (kbd "C-c i") #'bklink-insert))
#+end_src

*** Source
#+begin_src elisp :tangle site-lisp/bklink.el
;;; bklink.el --- Poor man's back-link      -*- lexical-binding: t; -*-

;; Author: Yuan Fu <casouri@gmail.com>

;;; This file is NOT part of GNU Emacs

;;; Commentary:
;;
;; In org-roam, you can show back links -- a list of files that
;; contains a link to the current file. The idea is nice but I don’t
;; like how org-roam and zetteldeft implement things. Hence this
;; minimal package.
;;
;; Some assumptions about the files that contains bklink:
;;
;;  1. All the files are in the same directory. So we can use filename
;;     to uniquely identify files.
;;  2. There is no sub-directories.
;;  3. There aren’t a ton of files. We use grep to search for links,
;;     no caching (though not hard to add one).
;;  4. filenames don’t contain “}]”.
;;
;; Advantages:
;;
;;  1. Filename as link, no id, no database.
;;  2. Works for multiple directories without configuration.
;;  3. Works for any file format.
;;  4. Back-link summary is not saved to the file.
;;
;; To use with Deft:
;;
;;     (add-hook 'deft-open-file-hook #'bklink-minor-mode)
;;     (setq deft-use-filter-string-for-filename t)
;;
;; Usage:
;;
;; Link format is [{filename.ext}]. Extension is optional.
;; Links are displayed as [filename] with 'link face.
;;
;; Insert a link to another file or edit a link:
;;
;;     M-x bklink-insert RET
;;
;; Show back-links:
;;
;;     M-x bklink-show-back-link RET
;;
;; Rename all links to the current file:
;;
;;     M-x bklink-rename new-name RET
;;
;; And then manually rename the current file.
;;
;; Notes:
;;
;; - If a link doesn’t have extension, bklink appends “.txt” to it
;;   when searching for the corresponding file.
;; - If the file a link points to doesn’t exist, bklink doesn’t create
;;   that file. Instead, bklink creates a buffer, and you can show
;;   back-links to it without creating that file.
;; - When ‘bklink-show-back-link-on-start’ is non-nil, back-link
;;   summary is shown on startup.
;; - When ‘bklink-use-form-feed’ is non-nil, bklink uses form-feed
;;   character to delineate back-link summary.
;; - Using id instead of title as filenames is a dumb idea.

;;; Code:

(require 'cl-lib)
;; For `with-buffer-modified-unmodified'.
(require 'bookmark)

;;; Customize

(defvar bklink-use-form-feed t
  "If non-nil, use form-feed instead of dashes.")

(defvar bklink-show-back-link-on-start t
  "If non-nil, show back-links when `bklink-minor-mode' starts.")

(defvar bklink-more-match nil
  "If non-nil, bklink includes more matches in the back-link summary.

Besides explicitly links, we also include text that matches the
title but isn't a link.

For example, for Emacs.txt, we match not only [{Emacs.txt}],
but also Emacs.")

;;; Backstage

(defvar bklink-regexp (rx (seq (group "[{")
                               (group (+? (not (any "/"))))
                               (group (? (or ".txt" ".org" ".md")))
                               (group "}]")))
  "Regular expression that matches a bklink.

Group 1 is opening delimiter.
Group 2 is base filename.
Group 3 is filename extension (if exists).
Group 4 is ending delimiter.

Change this variable and
`bklink--format-link' to change link format.")

(defsubst bklink--format-link (file)
  "Format FILE into a bklink. Basically [[FILE]]."
  (format "[{%s}]" file))

(defun bklink--get-file-list (file)
  "Return a list of files that’s in the same project with FILE.
Ignore dotfiles and directories."
  (cl-remove-if (lambda (f) (or (string-prefix-p "." f)
                                (file-directory-p f)))
                ;; FILE could be a file-less buffer.
                (directory-files (or (file-name-directory file)
                                     default-directory))))

(defun bklink--search-at-point ()
  "Search for links at point and set match data accordingly.
Return t if found, nil otherwise. See `bklink--regepx' for
groups."
  (save-excursion
    (catch 'found
      (let ((p (point)))
        (beginning-of-line)
        (while (re-search-forward bklink-regexp (line-end-position) t)
          (if (<= (match-beginning 0) p (match-end 0))
              (throw 'found t)))))))

(defun bklink--file-at-point ()
  "Return the filename of the link at point.
Return nil if not found."
  (bklink--search-at-point)
  (buffer-substring-no-properties (match-beginning 2) (match-end 3)))

(defun bklink--set-file-at-point (name)
  "Set the file name of the link at point to NAME.
Do nothing if there is no link at point."
  (bklink--search-at-point)
  (save-excursion
    (goto-char (match-beginning 2))
    (delete-region (match-beginning 2) (match-end 3))
    (insert name)))

;;;; Link button

(define-button-type 'bklink
  'action #'bklink-follow-link
  'filename nil
  'follow-link t
  'use-window nil
  'help-echo "Jump to file")

;; Please the byte compiler.
(defvar bklink-minor-mode)
(defun bklink-follow-link (button)
  "Jump to the file that BUTTON represents.
If the file doesn't exist, create a buffer."
  (with-demoted-errors "Error when following the link: %s"
    (let* ((file (button-get button 'filename))
           (fullname (if (file-name-extension file)
                         file
                       (concat file ".txt"))))
      (if (file-exists-p fullname)
          (find-file fullname)
        (switch-to-buffer (get-buffer-create fullname))
        (when (eq (point) 1)
          (insert (file-name-base file) "\n\n"))))
    (when (eq major-mode 'fundamental-mode)
      (text-mode))
    (unless bklink-minor-mode
      (bklink-minor-mode))))

(define-button-type 'bklink-url
  'action #'bklink-browse-url
  'url nil
  'follow-link t
  'help-echo "Open URL")

(defun bklink-browse-url (button)
  "Open URL in BUTTON."
  (browse-url (button-get button 'url)))

;;;; Highlight links

(define-minor-mode bklink-minor-mode
  "Recognizes bklinks."
  :lighter ""
  :keymap (make-sparse-keymap)
  (if bklink-minor-mode
      (progn (jit-lock-register #'bklink-fontify)
             (unless (derived-mode-p 'org-mode 'markdown-mode)
               (jit-lock-register #'bklink-fontify-url))
             (add-hook 'write-file-functions
                       #'bklink--write-file-function 90 t)
             ;; (add-hook 'fill-nobreak-predicate #'bklink--nobreak-p 90 t)
             (if (and bklink-show-back-link-on-start
                      (not bklink-show-back-link))
                 (bklink-show-back-link)))
    (jit-lock-unregister #'bklink-fontify)
    (jit-lock-unregister #'bklink-fontify-url)
    ;; (remove-hook 'fill-nobreak-predicate #'bklink--nobreak-p t)
    (with-silent-modifications
      (put-text-property (point-min) (point-max) 'display nil)))
  (jit-lock-refontify))

(defun bklink-fontify (beg end)
  "Highlight bklinks between BEG and END."
  (goto-char beg)
  (while (and (re-search-forward bklink-regexp nil t)
              (< (point) end))
    (let* ((inhibit-read-only t)
           (filename (concat
                      (match-string-no-properties 2)
                      (or (match-string-no-properties 3)
                          ""))))
      ;; Hide opening and closing delimiters and file extension.
      (with-silent-modifications
        ;; (put-text-property (match-beginning 0) (match-end 0)
        ;;                    'bklink-no-break t)
        (add-text-properties
         (match-beginning 1) (match-end 1)
         '(display "[" font-lock-face shadow face shadow))
        (add-text-properties
         (match-beginning 4) (match-end 4)
         '(display "]" font-lock-face shadow face shadow))
        (when (match-beginning 3)
          (put-text-property (match-beginning 3)
                             (match-end 3) 'invisible t))
        (put-text-property (match-beginning 0) (match-end 0)
                           'rear-nonsticky t)
        ;; Highlight link.
        (make-text-button (match-end 1)
                          (match-beginning 4)
                          :type 'bklink
                          'filename filename)))))

(defun bklink-fontify-url (beg end)
  "Add clickable buttons to URLs between BEG and END.
Everything that matches `browse-url-button-regexp' will be made
clickable and will use `browse-url' to open the URLs in question."
  ;; Change face to font-lock-face.
  (goto-char beg)
  (while (re-search-forward browse-url-button-regexp end t)
    (make-text-button (match-beginning 0)
                      (match-end 0)
                      :type 'bklink-url
                      'url (match-string-no-properties 0))))

;; (defun bklink--nobreak-p ()
;;   "Return non-nil if shouldn't break at point."
;;   (text-property-any
;;    (max (1- (point)) (point-min)) (point) 'bklink-no-break t))

;;;; Back-link summary

(defvar bklink--back-link-regexp
  (rx (seq "\n" (or "\x0C" (= 70 "-")) "\n"
           ;; Non-greedy is important: otherwise we risk of
           ;; regexp stack overflow. That happened for buffers
           ;; when iimg data.
           (+? digit) " linked reference" (? "s") (+? anything)
           (or "\x0C" (= 70 "-")) "\n"))
  "Regular expression that matches the beginning of a summary.")

(defun bklink--prune-back-link-summary ()
  "Remove back-links before save."
  (goto-char (point-min))
  (let ((inhibit-read-only t))
    ;; Remove summary.
    (when (re-search-forward bklink--back-link-regexp nil t)
      (delete-region (match-beginning 0) (match-end 0)))))

(defun bklink--insert-back-link-summary (files buffer this-file)
  "Append back-link summary to BUFFER.
FILES is a list of filenames that contains the link.
THIS-FILE is the filename we are inserting summary into."
  (with-current-buffer buffer
    (save-excursion
      (with-buffer-modified-unmodified
       (bklink--prune-back-link-summary)
       (goto-char (point-max))
       (let* ((summary-start (point))
              (this-link (bklink--format-link this-file))
              (this-link-re
               (replace-regexp-in-string
                " " "[ \n]*" (regexp-quote this-link)))
              ;; A list of (FILE . SUMMARY). The grep search didn't
              ;; match against the complete link and we need to filter
              ;; out the false-positives here.
              (summary-list
               (mapcar
                (lambda (file)
                  (if (not (equal file this-file))
                      (with-temp-buffer
                        (insert-file-contents file nil nil nil t)
                        (goto-char (point-min))
                        (if (re-search-forward this-link-re nil t)
                            (let ((summary
                                   (or (string-trim
                                        (thing-at-point 'line))
                                       "(No summary)")))
                              (cons file summary))))))
                files))
              (summary-list (remove nil summary-list))
              (inhibit-read-only t))
         ;; Insert separator.
         (insert "\n"
                 (if bklink-use-form-feed "\x0C" (make-string 70 ?-))
                 "\n"
                 (format "%d linked reference%s:\n"
                         (length summary-list)
                         ;; Plural when more than one.
                         (if (eq (length summary-list) 1) "" "s")
                         this-link))
         (dolist (summary summary-list)
           (insert "\n")
           ;; Insert file link.
           (insert (bklink--format-link (car summary)) ":\n")
           ;; Insert surrounding sentence. We only get the first
           ;; sentence. Don’t fill the paragraph, filling might break
           ;; the layout of the original text.
           (let ((beg (point)))
             (insert (cdr summary))
             (indent-rigidly beg (point) 2))
           (insert "\n"))
         (insert (if bklink-use-form-feed "\x0C" (make-string 70 ?-)))
         (put-text-property summary-start (point) 'read-only t)
         ;; Add an non-read-only newline so the user and other
         ;; commands can append text at the end of the file.
         (insert "\n")
         (bklink-fontify summary-start (point)))))))

(defun bklink--write-file-function ()
  "Write to file without the back-links."
  (save-excursion
    (let ((this-buffer (current-buffer))
          (this-file (buffer-file-name)))
      (with-temp-buffer
        (insert-buffer-substring this-buffer)
        (bklink--prune-back-link-summary)
        (write-region (point-min) (point-max) this-file))
      (clear-visited-file-modtime)
      (set-buffer-modified-p nil)
      t)))

;;;; Retrieve back-links

(defun bklink--get-linked-files (file callback)
  "Call CALLBACK with a list of filenames that has a link to FILE."
  (let* ((name (generate-new-buffer-name " *bklink grep*"))
         (process (apply
                   #'start-process
                   name name "grep" "-ilF"
                   ;; The link could span multiple lines (because of
                   ;; filling), so we only search for the part before
                   ;; first space as a preliminary filter. We later do
                   ;; an accurate search in
                   ;; `bklink--insert-back-link-summary'.
                   (car (split-string
                         (if bklink-more-match
                             (file-name-base file)
                           (bklink--format-link
                            (file-name-nondirectory file)))))
                   (bklink--get-file-list file)))
         ;; When the grep process finishes, we parse the result files
         ;; and call CALLBACK with them.
         (sentinal
          (lambda (process event)
            (if (string-match-p (rx (or "finished" "exited"))
                                event)
                (if-let ((buf (process-buffer process)))
                    (unwind-protect
                        (with-current-buffer buf
                          (let ((files (split-string
                                        (buffer-string) "\n")))
                            (funcall callback
                                     (mapcar #'file-name-nondirectory
                                             (remove "" files)))))
                      (kill-buffer buf))
                  (error "Bklink’s grep process’ buffer is killed"))
              (error "Bklink’s grep process failed with signal: %s"
                     event)))))
    (set-process-sentinel process sentinal)))

;;; Userland

(defun bklink-insert ()
  "Insert a link to a file.
If point not on a link, insert a new link, if already on a link,
edit the link."
  (interactive)
  (if (bklink--search-at-point)
      (let ((file (completing-read
                   "New file: "
                   (mapcar #'file-name-base
                           (bklink--get-file-list (buffer-file-name)))
                   nil nil (bklink--file-at-point))))
        (bklink--set-file-at-point file))
    (let* ((file (completing-read
                  "File: "
                  (mapcar #'file-name-nondirectory
                          (bklink--get-file-list (buffer-file-name))))))
      (insert (bklink--format-link file))))
  (bklink-minor-mode))

(define-minor-mode bklink-show-back-link
  "Toggle display of a buffer that show back-links.
The back-links are links to the files that has a link to this file."
  :lighter ""
  (unless (executable-find "grep")
    (user-error "Displaying back-link needs grep but we cannot find it"))
  (unless bklink-minor-mode
    (user-error "Bklink-minor-mode is not on"))
  (if bklink-show-back-link
      ;; The buffer could be not having a file.
      (if-let ((file (or (buffer-file-name) (buffer-name)))
               (buffer (current-buffer)))
          ;; Fire a sub-process to retrieve back-links.
          (bklink--get-linked-files
           file (lambda (file-list)
                  (bklink--insert-back-link-summary
                   file-list buffer (file-name-nondirectory file))))
        (user-error "This buffer is not associated with any file"))
    (with-buffer-modified-unmodified
     (save-excursion
       (bklink--prune-back-link-summary)))))

(defun bklink-rename (new-name)
  "Rename current file to NEW-NAME.
Rename bklinks that points to the current file point to NEW-NAME.
This command only rename links, you need to manually rename the
current file."
  ;; We run grep to find files that contain the old link, save them to
  ;; /tmp/bklink-rename, and use emacs to replace old links with new
  ;; links in each file. I can’t believe there is no painless way to
  ;; replace literal strings in sed.
  (interactive
   (let ((name (file-name-nondirectory (buffer-file-name))))
     (list (completing-read
            (format "Rename %s to: " name) nil nil name))))
  (unless (executable-find "grep")
    (user-error "Rename needs grep but we cannot find it"))
  (unless (executable-find "emacs")
    (user-error "Rename needs Emacs in PATH but we cannot find it"))
  (when (file-exists-p new-name)
    (user-error "Cannot rename to %s, this file already exists" new-name))
  (when (yes-or-no-p (format "Replace %s to %s?"
                             (file-name-nondirectory
                              (buffer-file-name))
                             new-name))
    (let* ((old-link (bklink--format-link (file-name-nondirectory
                                           (buffer-file-name))))
           (new-link (bklink--format-link new-name))
           (tmp-file (concat "/tmp/bklink-rename-"
                             (format-time-string "%s")))
           (command
            (concat
             (format "grep -ilF '%s' %s > %s"
                     (car (split-string old-link))
                     default-directory tmp-file)
             (format "; emacs --batch -l '%s'"
                     (find-library-name "bklink"))
             (format
              " --eval '(bklink--process-rename \"%s\" \"%s\" \"%s\")'"
              old-link new-link tmp-file))))
      (start-process-shell-command
       "bklink rename" " *bklink rename*" command)
      (message "Replacing %s with %s in the background"
               old-link new-link))))

(defun bklink--process-rename (old-link new-link path-file)
  "Replace OLD-LINK with NEW-LINK.
The files to replace are in PATH-FILE"
  (with-temp-buffer
    (insert-file-contents path-file)
    (dolist (file (split-string (buffer-string) "\n"))
      (with-temp-buffer
        (insert-file-contents file)
        (goto-char (point-min))
        (let ((link-re (string-join
                        (mapcar #'regexp-quote
                                (split-string old-link))
                        "[ \n]*")))
          (while (re-search-forward link-re nil t)
            (replace-match new-link)))
        (write-file file)))))

(provide 'bklink)

;;; bklink.el ends here
#+end_src

** flique

*** Source
#+begin_src elisp :tangle site-lisp/flique.el
;;; flique.el --- File cliques  -*- lexical-binding: t; -*-

;; Author: Yuan Fu <casouri@gmail.com>

;;; This file is NOT part of GNU Emacs

;;; Commentary:
;;
;; This package complements bklink.el. With this package, you can
;; easily group related note files into cliques and go back and
;; forth within the clique.
;;
;; To start, create a file "index.flique" under the directory where
;; all the notes are. Each line is a filename. Consecutive lines define
;; a clique. Separate cliques by empty lines. For example,
;;
;; file1.txt
;; file2.txt
;;
;; file3.txt
;; file4.txt
;;
;; defines two cliques, file1 and 2, and file3 and 4.
;;
;; Then, you can go back and forth by
;;
;;  - ‘flique-forward’
;;  - ‘flique-backward’
;;
;; If a line in the index file contains a file that doesn’t exist,
;; flique just ignores that.

;;; Code:

(defun flique--index ()
  "Return the index buffer."
  (with-current-buffer (get-buffer-create " *flique index*")
    (when (file-exists-p "index.flique")
      (insert-file-contents "index.flique" nil nil nil t))
    (current-buffer)))

(defun flique-append-to-index (file)
  "Add FILE to the end of the index file.
Only add if FILE is not already in the index file."
  (with-current-buffer (flique--index)
    (goto-char (point-min))
    ;; Unless already exists...
    (unless (re-search-forward
             (concat "^" (regexp-quote
                          (file-name-nondirectory file))
                     "$")
             nil t)
      ;; ...append to the end.
      (goto-char (point-max))
      (unless (looking-back "\n" 1)
        (insert "\n"))
      (insert (file-name-nondirectory file))
      ;; If we use ‘write-file’, this buffer is associated with
      ;; index.flique. (Changes from *flique index* to index.flique.)
      (write-region (point-min) (point-max) "index.flique"))))

(defun flique--next-file (filename step)
  "Return the next file of FILENAME. FILENAME cannot be a path.
STEP can be either 1 or -1, 1 for going forward, -1 for going
backward."
  (with-current-buffer (flique--index)
    (goto-char (point-min))
    (when (and (re-search-forward
                (concat "^" (regexp-quote filename) "$") nil t)
               (eq 0 (forward-line step)))
      (let ((next (buffer-substring
                   (line-beginning-position)
                   (line-end-position))))
        (unless (equal next "")
          next)))))

(defun flique-forward ()
  "Go forward in the clique."
  (interactive)
  (let ((next (flique--next-file
               (file-name-nondirectory (buffer-file-name))
               1)))
    (when (and next (file-exists-p next))
      (find-file next)
      (flique-show-navigation))))

(defun flique-backward ()
  "Go backward in the clique."
  (interactive)
  (let ((next (flique--next-file
               (file-name-nondirectory (buffer-file-name))
               -1)))
    (when (and next (file-exists-p next))
      (find-file next)
      (flique-show-navigation))))

(defun flique-show-navigation ()
  "Display a navigation bar in header-line."
  (let* ((filename (file-name-nondirectory (buffer-file-name)))
         (prev (flique--next-file filename -1))
         (next (flique--next-file filename 1)))
    (when (or prev next)
      (setq header-line-format
            (propertize
             (concat
              (if (and prev (file-exists-p prev))
                  (concat "← " (file-name-base prev))
                ":-O")
              (propertize "\t" 'display `(space :width ,tab-width))
              (if (and next (file-exists-p next))
                  (concat (file-name-base next) " →")
                ":-D")
              (propertize " " 'display '(raise 0.3))
              (propertize " " 'display '(raise -0.2)))
             'face '(:height 130))))))

(defun flique-list ()
  "Show the current file in the flique index file."
  (interactive)
  (let ((filename (file-name-nondirectory (buffer-file-name))))
    (find-file "index.flique")
    (goto-char (point-min))
    (re-search-forward (concat "^" (regexp-quote filename) "$") nil t)
    (beginning-of-line)))

(define-derived-mode flique-mode fundamental-mode
  "Flique"
  "Editing flique index files."
  (setq outline-regexp (rx "*"))
  (outline-minor-mode))

(add-to-list 'auto-mode-alist '("\\.flique\\'" . flique-mode))

(provide 'flique)

;;; flique.el ends here
#+end_src

** acm-terminal
#+begin_src elisp

#+end_src

*** Source
#+begin_src elisp :tangle site-lisp/acm-terminal.el
;;; acm-terminal.el --- Patch for LSP bridge acm on Terminal -*- lexical-binding: t; -*-

;; Copyright (C) 2022 Gong Qijian <gongqijian@gmail.com>

;; Author: Gong Qijian <gongqijian@gmail.com>
;; Created: 2022/07/07
;; Version: 0.1.0
;; Last-Updated: 2022-09-19 19:43:33 +0800
;;           By: Gong Qijian
;; Package-Requires: ((emacs "26.1") (acm "0.1") (popon "0.3"))
;; URL: https://github.com/twlz0ne/acm-terminal
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Patch for LSP bridge acm on Terminal.

;; ## Requirements

;; - [lsp-bridge](https://github.com/manateelazycat/lsp-bridge) ddf03f3(2022-08-22) or newer
;; - [popon](https://codeberg.org/akib/emacs-popon)

;; ## Installation

;; Clone or download this repository (path of the folder is the `<path-to-acm-terminal>` used below).

;; ## Configuration

;; ```emacs-lisp
;; (require 'yasnippet)
;; (yas-global-mode 1)

;; (require 'lsp-bridge)
;; (global-lsp-bridge-mode)

;; (unless (display-graphic-p)
;;   (add-to-list 'load-path "<path-to-acm-terminal>")
;;   (with-eval-after-load 'acm
;;     (require 'acm-terminal)))
;; ```

;;; Code:

(require 'acm)
(require 'popon)

(defvar acm-terminal-min-width 45
  "The minimum width of the candidate menu in characters.")

(defvar acm-terminal-max-width 100
  "The maximum width of the candidate menu in characters.")

(defvar acm-terminal-doc-continuation-string "\\"
  "The string showing at the end of wrapped lines.")

(defvar acm-terminal-doc-min-width 40
  "The minimum width of the candidate doc in characters.")

(defvar acm-terminal-doc-max-width 80
  "The maximum width of the candidate doc in characters.")

(defvar-local acm-terminal-candidate-doc nil
  "Latest docstring.")

(defvar-local acm-terminal-current-input nil
  "Curent input.")

(defface acm-terminal-default-face
  '((((background dark))  :background "black")
    (((background light)) :background "white"))
  "Default face for Terminal.")

(defun acm-teminal-line-number-display-width ()
  "Return width of line number bar."
  (if (bound-and-true-p display-line-numbers-mode)
      (+ (line-number-display-width) 2)
    0))

(defun acm-terminal-nsplit-string (string width &optional cont)
  "Split STRING into substrings of length WIDTH.
If CONT non-nil, append it to each substring except the last, also, keep the
substring lenght, e.g.:
  (fn \"foobarbazq\" 3 \"↩\") => (\"fo↩\" \"ob↩\" \"ar↩\" \"q\")
  (fn \"foobarbazq\" 3)     => (\"foo\" \"bar\" \"q\") "
  (let* ((len (length string))
         (from 0)
         (step (- width (length cont)))
         (to step)
         lines)
    (if (>= to len)
        (list string)
      (while (< from len)
        (push (concat (substring string from (min to len)) cont) lines)
        (setq from to)
        (setq to (+ to step)))
      (when cont
        (setf (car lines) (substring (car lines) 0 (- (length cont)))))
      (reverse lines))))

(defun acm-terminal-init-colors (&optional force)
  (let* ((is-dark-mode (string-equal (acm-get-theme-mode) "dark"))
         (blend-background (if is-dark-mode "#000000" "#AAAAAA"))
         (default-background (let ((background (face-attribute 'default :background)))
                               (if (member background '("unspecified-bg" "unspecified"))
                                   (face-attribute 'acm-terminal-default-face :background)
                                 background))))
    ;; Make sure font size of frame same as Emacs.
    (set-face-attribute 'acm-buffer-size-face nil :height (face-attribute 'default :height))

    ;; Make sure menu follow the theme of Emacs.
    (when (or force (equal (face-attribute 'acm-default-face :background) 'unspecified))
      (set-face-background 'acm-default-face (acm-color-blend default-background blend-background (if is-dark-mode 0.8 0.9))))
    (when (or force (equal (face-attribute 'acm-select-face :background) 'unspecified))
      (set-face-background 'acm-select-face (acm-color-blend default-background blend-background 0.6)))
    (when (or force (equal (face-attribute 'acm-select-face :foreground) 'unspecified))
      (set-face-foreground 'acm-select-face (face-attribute 'font-lock-function-name-face :foreground)))))

(defun acm-terminal-get-popup-position ()
  "Return postion of menu."
  ;; The existing overlay will cause `popon-x-y-at-pos' and `posn-x-y' to get
  ;; the wrong position.
  (if acm-frame
      (let ((pos (popon-position acm-frame))
            (direction (plist-get (cdr acm-frame) :direction))
            (size (popon-size acm-frame)))
        (cons (car pos)
              (if (eq 'top direction)
                  (+ (cdr pos) (cdr size))
                (1- (cdr pos)))))
    (let ((pos (popon-x-y-at-pos acm-frame-popup-point)))
      (cons (car pos) (1+ (cdr pos))))))

(defun acm-terminal-popon-visible-p (popon)
  (when (popon-live-p popon)
    (plist-get (cdr popon) :visible)))

(defun acm-terminal-make-popon (text pos &optional window buffer priority)
  "Create an invisible popon with TEXT at POS of WINDOW.
See `popon-create' for more information."
  (cl-letf (((symbol-function 'popon-update) #'ignore))
    (popon-create text pos window buffer priority)))

(defun acm-terminal-make-frame (_)
  "Advice override `acm-make-frame' to make an invisible popon."
  (let* ((width (if (> (window-width) acm-terminal-min-width)
                    (min (window-width) acm-terminal-max-width)
                  acm-terminal-min-width))
         (pos (acm-terminal-get-popup-position)))
    (acm-terminal-make-popon (cons "" width) pos)))

(cl-defmacro acm-terminal-create-frame-if-not-exist (frame _frame-buffer _frame-name &optional _internal-border)
  `(unless (popon-live-p ,frame)
     (setq ,frame (acm-terminal-make-frame nil))))

(defun acm-terminal-menu-render-items (items menu-index)
  (let ((item-index 0)
        (menu-x (let ((pos (popon-x-y-at-pos acm-frame-popup-point)))
                  ;; Convert to local
                  (- (car pos) (window-left-column) (acm-teminal-line-number-display-width)))))
    (dolist (v items)
      (let* ((icon (cdr (assoc (downcase (plist-get v :icon)) acm-icon-alist)))
             (candidate (plist-get v :display-label))
             (candidate-length (funcall acm-string-width-function candidate))
             (annotation (plist-get v :annotation))
             (annotation-text (if annotation annotation ""))
             (annotation-length (funcall acm-string-width-function annotation-text))
             (max-length (cond ((< acm-menu-max-length-cache acm-terminal-min-width)
                                acm-terminal-min-width)
                               ((< acm-terminal-max-width acm-menu-max-length-cache)
                                acm-terminal-max-width)
                               (t acm-menu-max-length-cache)))
             (padding-length (- max-length (+ candidate-length annotation-length)))
             (icon-text (if icon (acm-icon-build (nth 0 icon) (nth 1 icon) (nth 2 icon)) ""))
             (quick-access-key (nth item-index acm-quick-access-keys))
             candidate-line)

        ;; Render deprecated candidate.
        (when (plist-get v :deprecated)
          (add-face-text-property 0 (length candidate) 'acm-deprecated-face 'append candidate))

        ;; Build candidate line.
        (setq candidate-line
              (concat
               ;; icon-text
               (when acm-enable-quick-access
                 (if quick-access-key (concat quick-access-key ". ") "   "))
               (if (zerop padding-length)
                   candidate
                 (if (> padding-length 0)
                     (concat candidate (make-string padding-length ?\s))
                   (truncate-string-to-width candidate max-length 0 ?\s)))
               (propertize (format "%s \n" (capitalize annotation-text))
                           'face
                           (if (equal item-index menu-index) 'acm-select-face 'font-lock-doc-face))))

        ;; Render current candidate.
        (if (equal item-index menu-index)
            (progn
              (add-face-text-property 0 (length candidate-line) 'acm-select-face 'append candidate-line)

              ;; Hide doc frame if some backend not support fetch candidate documentation.
              (when (and
                     (not (member (plist-get v :backend) '("lsp" "elisp" "yas")))
                     (acm-frame-visible-p acm-doc-frame))
                (acm-doc-hide)))
          (add-face-text-property 0 (length candidate-line) 'acm-default-face 'append candidate-line))

        ;; Insert candidate line.
        (insert candidate-line)

        ;; Delete the last extra return line.
        (when (equal item-index (1- (length items)))
          (delete-char -1))

        ;; Update item index.
        (setq item-index (1+ item-index))))))

(defun acm-terminal-doc-render (doc &optional width)
  "Render DOC string."
  (let ((width (or width (1- acm-terminal-doc-max-width)))
        lines)
    (dolist (nline (split-string doc "\n") lines)
      (dolist (mline (acm-terminal-nsplit-string
                      nline width acm-terminal-doc-continuation-string) lines)
        (setq mline (string-pad mline width))
        (add-face-text-property 0 (length mline) 'acm-default-face 'append mline)
        (push mline lines)))
    (reverse lines)))

(defun acm-terminal-menu-render (menu-old-cache)
  (let* ((items acm-menu-candidates)
         (menu-old-max-length (car menu-old-cache))
         (menu-old-number (cdr menu-old-cache))
         (menu-new-max-length (acm-menu-max-length))
         (menu-new-number (length items))
         (menu-index acm-menu-index))
    ;; Record newest cache.
    (setq acm-menu-max-length-cache menu-new-max-length)
    (setq acm-menu-number-cache menu-new-number)

    ;; Insert menu candidates.
    (when acm-frame
      (let ((lines (split-string
                    (with-temp-buffer
                      (acm-menu-render-items items menu-index)
                      (buffer-string))
                    "\n")))
        ;; Adjust menu frame position.
        (acm-terminal-menu-adjust-pos lines))

      (popon-redisplay)
      (plist-put (cdr acm-frame) :visible t))

    ;; Not adjust menu frame size if not necessary,
    ;; such as select candidate just change index,
    ;; or menu width not change when switch to next page.
    (when (or (not (equal menu-old-max-length menu-new-max-length))
              (not (equal menu-old-number menu-new-number)))
      ;; Adjust doc frame with menu frame position.
      (when (acm-terminal-popon-visible-p acm-doc-frame)
        (acm-terminal-doc-adjust-pos acm-terminal-candidate-doc)))

    ;; Fetch `documentation' and `additionalTextEdits' information.
    (cl-letf (((symbol-function 'acm-frame-visible-p) 'acm-terminal-popon-visible-p))
      (acm-fetch-candidate-doc))))

(defun acm-terminal-menu-adjust-pos (&optional lines)
  "Adjust menu frame position."
  (pcase-let* ((`(,edge-left ,edge-top ,edge-right ,edge-bottom) (window-inside-edges))
               (textarea-width (- (window-width)
                                  (+ (- edge-left (window-left-column))
                                     (acm-teminal-line-number-display-width))))
               (textarea-height (- edge-bottom edge-top))
               (`(,init-x . ,init-y)
                (prog1 (acm-terminal-get-popup-position)
                  (when lines
                    (plist-put (cdr acm-frame) :lines lines)
                    (plist-put (cdr acm-frame) :width (length (car lines))))))
               (`(,menu-w . ,menu-h) (popon-size acm-frame))
               (bottom-free-h (- edge-bottom edge-top init-y)))
    (let ((x (if (>= textarea-width (+ init-x menu-w))
                 init-x
               (- init-x (- (+ init-x menu-w) textarea-width) 1))))
      (plist-put (cdr acm-frame) :x x))
    (cond
     ;; top
     ((and (< bottom-free-h menu-h) (> init-y menu-h))
      (plist-put (cdr acm-frame) :direction 'top)
      (plist-put (cdr acm-frame) :y (- init-y menu-h)))
     ;; bottom
     (t
      (plist-put (cdr acm-frame) :direction 'bottom)
      (plist-put (cdr acm-frame) :y (+ init-y 1))))))

(defun acm-terminal-doc-adjust-pos (&optional candidate-doc)
  "Adjust doc frame position."
  (pcase-let* ((`(,edge-left ,edge-top ,edge-right ,edge-bottom) (window-inside-edges))
               (textarea-width (- (window-width)
                                  (+ (- edge-left (window-left-column))
                                     (acm-teminal-line-number-display-width))))
               (textarea-height (- edge-bottom edge-top))
               (`(,init-x . ,init-y) (acm-terminal-get-popup-position))
               (`(,menu-x . ,menu-y) (popon-position acm-frame))
               (`(,menu-w . ,menu-h) (popon-size acm-frame))
               (menu-right (+ menu-x menu-w))
               (doc-w nil)
               (doc-h nil))
    (cond
     ;; l:menu + r:document
     ((>= textarea-width (+ menu-right acm-terminal-doc-max-width))
      (plist-put (cdr acm-doc-frame) :lines (acm-terminal-doc-render candidate-doc))
      (setq doc-h (length (plist-get (cdr acm-doc-frame) :lines)))
      (plist-put (cdr acm-doc-frame) :x menu-right)
      (plist-put (cdr acm-doc-frame) :y (if (>= (- edge-bottom menu-y) doc-h)
                                            menu-y
                                          (- edge-bottom doc-h))))
     (t
      (let* ((fix-width (min acm-terminal-doc-max-width (- textarea-width 1)))
             (rects (list
                     (list 'right  (- textarea-width menu-x menu-w) edge-bottom)
                     (list 'bottom fix-width (- edge-bottom edge-top menu-y menu-h))
                     (list 'left   menu-x edge-bottom)
                     (list 'top    fix-width menu-y))))
        ;; Find the largest free space in left/top/bottom/right
        (pcase-let* ((`(,rect ,rect-width ,_rect-height)
                      (car (seq-sort (lambda (r1 r2)
                                       (> (apply #'* (cdr r1)) (apply #'* (cdr r2))))
                                     (if acm-terminal-doc-min-width
                                         (seq-filter
                                          (lambda (r)
                                            (>= (cadr r) acm-terminal-doc-min-width))
                                          rects)
                                       rects))))
                     (rerender-width (- (min fix-width rect-width) 1))
                     (lines (acm-terminal-doc-render candidate-doc rerender-width)))
          (plist-put (cdr acm-doc-frame) :lines lines)
          (setq doc-h (length lines)) ;; Update doc height
          (setq doc-w (1+ rerender-width))
          (pcase rect
            ('left
             (plist-put (cdr acm-doc-frame) :x (- menu-x doc-w))
             (plist-put (cdr acm-doc-frame) :y (if (>= (- edge-bottom menu-y) doc-h)
                                                   menu-y
                                                 (if (> edge-bottom doc-h)
                                                     (- edge-bottom doc-h)
                                                   edge-top))))
            ('top
             (plist-put (cdr acm-doc-frame) :x (if (>= (- textarea-width menu-x) doc-w)
                                                   menu-x
                                                 (- textarea-width doc-w)))
             (plist-put (cdr acm-doc-frame) :y (if (< menu-y init-y)
                                                   (- menu-y doc-h)
                                                 (- menu-y doc-h
                                                    (if (eq 'bottom (plist-get (cdr acm-frame) :direction))
                                                        1
                                                      0)))))
            ('bottom
             (plist-put (cdr acm-doc-frame) :x (if (>= (- textarea-width menu-x) doc-w)
                                                   menu-x
                                                 (- textarea-width doc-w)))
             (plist-put (cdr acm-doc-frame) :y (+ menu-y menu-h)))
            ('right
             (plist-put (cdr acm-doc-frame) :x (+ menu-x menu-w))
             (plist-put (cdr acm-doc-frame) :y (if (>= (- edge-bottom menu-y) doc-h)
                                                   menu-y
                                                 (- edge-bottom doc-h)))))))))
    (popon-redisplay)))

(defun acm-terminal-doc-hide ()
  (when (popon-live-p acm-doc-frame)
    (setq acm-doc-frame (popon-kill acm-doc-frame))))

(defun acm-terminal-doc-show ()
  (when acm-enable-doc
    (let* ((candidate (acm-menu-current-candidate))
           (backend (plist-get candidate :backend))
           (candidate-doc
            (pcase backend
              ("lsp" (acm-backend-lsp-candidate-doc candidate))
              ("elisp" (acm-backend-elisp-candidate-doc candidate))
              ("yas" (acm-backend-yas-candidate-doc candidate))
              ("tempel" (acm-backend-tempel-candidate-doc candidate))
              (_ ""))))
      (setq acm-terminal-candidate-doc candidate-doc)
      (if (and candidate-doc
               (not (string-equal candidate-doc "")))
          (progn
            ;; Create doc frame if it not exist.
            (acm-terminal-create-frame-if-not-exist acm-doc-frame acm-doc-buffer "acm doc frame")

            ;; Adjust doc frame position and size.
            (acm-terminal-doc-adjust-pos candidate-doc))

        ;; Hide doc frame
        (acm-terminal-doc-hide)))))

(defun acm-terminal-hide ()
  (interactive)
  ;; Turn off `acm-mode'.
  (acm-mode -1)

  ;; Hide menu frame.
  (when acm-frame
    (setq acm-frame (popon-kill acm-frame)))

  ;; Hide doc frame.
  (acm-terminal-doc-hide)

  ;; Clean `acm-menu-max-length-cache'.
  (setq acm-menu-max-length-cache 0)

  ;; Remove hook of `acm--pre-command'.
  (remove-hook 'pre-command-hook #'acm--pre-command 'local))

(defun acm-terminal-update ()
  ;; Adjust `gc-cons-threshold' to maximize temporary,
  ;; make sure Emacs not do GC when filter/sort candidates.
  (let* ((gc-cons-threshold most-positive-fixnum)
         (keyword (acm-get-input-prefix))
         (candidates (acm-update-candidates))
         (bounds (bounds-of-thing-at-point 'symbol))
         (direction (when (popon-live-p acm-frame)
                      (plist-get (cdr acm-frame) :direction))))
    (setq acm-terminal-current-input (acm-backend-search-words-get-point-string))
    (cond
     ;; Hide completion menu if user type first candidate completely.
     ((and (equal (length candidates) 1)
           (string-equal keyword (plist-get (nth 0 candidates) :label))
           ;; Volar always send back single emmet candidate, we need filter this condition.
           (not (string-equal "Emmet Abbreviation" (plist-get (nth 0 candidates) :annotation))))
      (acm-hide))
     ((> (length candidates) 0)
      (let* ((menu-old-cache (cons acm-menu-max-length-cache acm-menu-number-cache)))
        ;; Enable acm-mode to inject mode keys.
        (acm-mode 1)

        ;; Use `pre-command-hook' to hide completion menu when command match `acm-continue-commands'.
        (add-hook 'pre-command-hook #'acm--pre-command nil 'local)

        ;; Init candidates, menu index and offset.
        (setq-local acm-candidates candidates)
        (setq-local acm-menu-candidates
                    (cl-subseq acm-candidates
                               0 (min (length acm-candidates)
                                      acm-menu-length)))
        (setq-local acm-menu-index (if (zerop (length acm-menu-candidates)) -1 0))
        (setq-local acm-menu-offset 0)

        ;; Init colors.
        (acm-init-colors)

        ;; Record menu popup position and buffer.
        (setq acm-frame-popup-point (or (car bounds) (point)))

        ;; `posn-at-point' will failed in CI, add checker make sure CI can pass.
        ;; CI don't need popup completion menu.
        (when (posn-at-point acm-frame-popup-point)
          (setq acm-frame-popup-position (acm-frame-get-popup-position))

          ;; Create menu frame if it not exists.
          (acm-terminal-create-frame-if-not-exist acm-frame acm-buffer "acm frame")
          (plist-put (cdr acm-frame) :direction direction)

          ;; Render menu.
          (acm-menu-render menu-old-cache))
        ))
     (t
      (acm-hide)))))

(advice-add 'acm-init-colors :override 'acm-terminal-init-colors)
(advice-add 'acm-hide :override #'acm-terminal-hide)
(advice-add 'acm-update :override #'acm-terminal-update)
(advice-add 'acm-doc-show :override #'acm-terminal-doc-show)
(advice-add 'acm-doc-hide :override #'acm-terminal-doc-hide)
(advice-add 'acm-menu-render :override #'acm-terminal-menu-render)
(advice-add 'acm-menu-render-items :override #'acm-terminal-menu-render-items)

(provide 'acm-terminal)

;;; acm-terminal.el ends here
#+end_src

** window-numbering
#+begin_src elisp
(eat-package window-numbering
  :hook (after-init-hook . window-numbering-mode))
#+end_src

*** Source
#+begin_src elisp :tangle site-lisp/window-numbering.el
;;; window-numbering.el --- Numbered window shortcuts
;;
;; Copyright (C) 2006-2007, 2013, 2015 Nikolaj Schumacher <bugs * nschum , de>
;;
;; Author: Nikolaj Schumacher <bugs * nschum de>
;; Version: 1.1.2
;; Keywords: faces, matching
;; URL: http://nschum.de/src/emacs/window-numbering-mode/
;; Compatibility: GNU Emacs 22.x, GNU Emacs 23.x, GNU Emacs 24.x
;;
;; This file is NOT part of GNU Emacs.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 2
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;
;;; Commentary:
;;
;; Enable window-numbering-mode and use M-1 through M-0 to navigate.
;;
;; If you want to affect the numbers, use window-numbering-before-hook or
;; window-numbering-assign-func.
;; For instance, to always assign the calculator window the number 9, add the
;; following to your .emacs:
;;
;; (setq window-numbering-assign-func
;;       (lambda () (when (equal (buffer-name) "*Calculator*") 9)))
;;
;;; Changes Log:
;; 2022-07-06
;;
;;   Use cl-lib instead of cl.
;;   Update `define-minor-mode' key.
;;
;; Doglooksgod
;;
;;    Fix numbering of minibuffer for recent Emacs versions.
;;
;; 2013-03-23 (1.1.2)
;;    Fix numbering in terminal mode with menu bar visible.
;;    Add face for window number.  (thanks to Chen Bin)
;;
;; 2008-04-11 (1.1.1)
;;    Added possibility to delete window with prefix arg.
;;    Cleaned up code and migrated to `defcustom'.
;;
;; 2007-02-18 (1.1)
;;    Added window-numbering-before-hook, window-numbering-assign-func.
;;
;;; Code:

(eval-when-compile (require 'cl-lib))

(push "^No window numbered .$" debug-ignored-errors)

(defgroup window-numbering nil
  "Numbered window shortcuts"
  :group 'convenience)

(defcustom window-numbering-auto-assign-0-to-minibuffer t
  "*If non-nil, `window-numbering-mode' assigns 0 to the minibuffer if active."
  :group 'window-numbering
  :type '(choice (const :tag "Off" nil)
                 (const :tag "On" t)))

(defcustom window-numbering-before-hook nil
  "*Hook called before `window-numbering-mode' starts assigning numbers.
The number of windows that will be numbered is passed as a parameter.
Use `window-numbering-assign' to manually assign some of them a number.
If you want to assign a number to just one buffer, use
`window-numbering-assign-func' instead."
  :group 'window-numbering
  :type 'hook)

(defcustom window-numbering-assign-func nil
  "*Function called for each window by `window-numbering-mode'.
This is called before automatic assignment begins.  The function should
return a number to have it assigned to the current-window, nil otherwise."
  :group 'window-numbering
  :type 'function)

(defconst window-numbering-mode-line-position 1
  "The position in the mode-line `window-numbering-mode' displays the number.")

(defface window-numbering-face
  '()
  "Face used for the number in the mode-line."
  :group 'window-numbering)

(defvar window-numbering-table nil
  "table -> (window vector . number table)")

(defun select-window-by-number (i &optional arg)
  "Select window given number I by `window-numbering-mode'.
If prefix ARG is given, delete the window instead of selecting it."
  (interactive "P")
  (let ((windows (car (gethash (selected-frame) window-numbering-table)))
        window)
    (if (and (>= i 0) (< i 10)
             (setq window (aref windows i)))
        (if arg
            (delete-window window)
          (select-window window))
      (error "No window numbered %s" i))))

;; define interactive functions for keymap
(dotimes (i 10)
  (eval `(defun ,(intern (format "select-window-%s" i)) (&optional arg)
           ,(format "Select the window with number %i." i)
           (interactive "P")
           (select-window-by-number ,i arg))))

(defun window-numbering-calculate-left (windows)
  (let ((i 9) left)
    (while (>= i 0)
      (let ((window (aref windows i)))
        (unless window
          (push (% (1+ i) 10) left)))
      (cl-decf i))
    left))

(defvar window-numbering-windows nil
  "A vector listing the window for each number.")
(defvar window-numbering-numbers
  "A hash map containing each window's number.")
(defvar window-numbering-left
  "A list of unused window numbers.")

(defun window-numbering-assign (window &optional number)
  (if number
      (if (aref window-numbering-windows number)
          (progn (message "Number %s assigned to two buffers (%s and %s)"
                          number window (aref window-numbering-windows number))
                 nil)
        (setf (aref window-numbering-windows number) window)
        (puthash window number window-numbering-numbers)
        (setq window-numbering-left (delq number window-numbering-left))
        t)
    ;; else default adding
    (when window-numbering-left
      (unless (gethash window window-numbering-numbers)
        (let ((number (car window-numbering-left)))
          (window-numbering-assign window number)
          number)))))

(defun window-numbering-update ()
  "Update the window numbering for the current frame.
Optional parameter PREASSIGNED-WINDOWS is a hashmap already mapping some
windows to numbers."
  (setq window-numbering-windows (make-vector 10 nil)
        window-numbering-numbers (make-hash-table :size 10)
        window-numbering-left
        (window-numbering-calculate-left window-numbering-windows))
  (puthash (selected-frame)
           (cons window-numbering-windows window-numbering-numbers)
           window-numbering-table)
  (when (and window-numbering-auto-assign-0-to-minibuffer
             (active-minibuffer-window))
    (window-numbering-assign (active-minibuffer-window) 0))
  (let ((windows (window-list nil 0 (frame-first-window))))
    (run-hook-with-args 'window-numbering-before-hook windows)
    (when window-numbering-assign-func
      (mapc (lambda (window)
              (with-selected-window window
                (with-current-buffer (window-buffer window)
                  (let ((num (funcall window-numbering-assign-func)))
                    (when num
                      (window-numbering-assign window num))))))
            windows))
    (dolist (window windows)
      (window-numbering-assign window))))

(defun window-numbering-get-number-string (&optional window)
  (let ((s (int-to-string (window-numbering-get-number window))))
    (propertize s 'face 'window-numbering-face)))

(defun window-numbering-get-number (&optional window)
  (gethash (or window (selected-window))
           (cdr (gethash (selected-frame) window-numbering-table))))

(defvar window-numbering-keymap
  (let ((map (make-sparse-keymap)))
    (define-key map "\M-0" 'select-window-0)
    (define-key map "\M-1" 'select-window-1)
    (define-key map "\M-2" 'select-window-2)
    (define-key map "\M-3" 'select-window-3)
    (define-key map "\M-4" 'select-window-4)
    (define-key map "\M-5" 'select-window-5)
    (define-key map "\M-6" 'select-window-6)
    (define-key map "\M-7" 'select-window-7)
    (define-key map "\M-8" 'select-window-8)
    (define-key map "\M-9" 'select-window-9)
    map)
  "Keymap used in by `window-numbering-mode'.")

;;;###autoload
(define-minor-mode window-numbering-mode
  "A minor mode that assigns a number to each window."
  :init-value nil :lighter nil :keymap window-numbering-keymap :global t
  (if window-numbering-mode
      (unless window-numbering-table
        (save-excursion
          (setq window-numbering-table (make-hash-table :size 16))
          (add-hook 'minibuffer-setup-hook 'window-numbering-update)
          (add-hook 'window-configuration-change-hook
                    'window-numbering-update)
          (dolist (frame (frame-list))
            (select-frame frame)
            (window-numbering-update))))
    (window-numbering-clear-mode-line)
    (remove-hook 'minibuffer-setup-hook 'window-numbering-update)
    (remove-hook 'window-configuration-change-hook
                 'window-numbering-update)
    (setq window-numbering-table nil)))

(defun window-numbering-clear-mode-line ()
  "Remove the window number of `window-numbering-mode' from the mode-line."
  (let ((mode-line (default-value 'mode-line-format))
        (res))
    (while mode-line
      (let ((item (car mode-line)))
        (unless (equal item '(:eval (window-numbering-get-number-string)))
          (push item res)))
      (pop mode-line))
    (setq-default mode-line-format (nreverse res)))
  (force-mode-line-update t))

(provide 'window-numbering)

;;; window-numbering.el ends here
#+end_src
